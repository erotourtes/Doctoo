generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum BloodType {
  O_PLUS
  O_MINUS
  A_PLUS
  A_MINUS
  B_PLUS
  B_MINUS
  AB_PLUS
  AB_MINUS
}

enum Gender {
  MALE
  FEMALE
}

enum AppointmentStatus {
  COMPLETED
  PLANNED
  CANCELED
}

enum NotificationModel {
  APPOINTMENT
  CHAT
}

enum NotificationAction {
  TODO
  // TODO
}

model User {
  id             String    @id @default(uuid())
  first_name     String
  last_name      String
  phone          String
  email          String
  email_verified Boolean
  password       String?
  google_id      String?
  avatar_key     String
  doctors        Doctor[]
  patients       Patient[]

  @@map("users")
}

model Favorite {
  id         String  @id @default(uuid())
  doctor_id  String
  patient_id String
  doctor     Doctor  @relation(fields: [doctor_id], references: [id])
  patient    Patient @relation(fields: [patient_id], references: [id])

  @@map("favorites")
}

model Review {
  id         String  @id @default(uuid())
  doctor_id  String
  patient_id String
  docor      Doctor  @relation(fields: [doctor_id], references: [id])
  patient    Patient @relation(fields: [patient_id], references: [id])
  text       String
  rate       Int

  @@map("reviews")
}

model NotificationLog {
  id         String             @id @default(uuid())
  patient_id String
  model_id   String
  created_at DateTime           @default(now())
  patient    Patient            @relation(fields: [patient_id], references: [id])
  model      NotificationModel
  action     NotificationAction

  @@map("notification_logs")
}

model Doctor {
  id                     String                 @id @default(uuid())
  user_id                String
  payrate                Int
  about_me               String
  user                   User                   @relation(fields: [user_id], references: [id])
  appointments           Appointment[]
  chats                  Chat[]
  doctor_specializations DoctorSpecialization[]
  hospital_doctors       HospitalDoctor[]
  declarations           Declaration[]
  favorites              Favorite[]
  reviews                Review[]

  @@map("doctors")
}

model HospitalDoctor {
  id          String   @id @default(uuid())
  hospital_id String
  doctor_id   String
  hospital    Hospital @relation(fields: [hospital_id], references: [id])
  doctor      Doctor   @relation(fields: [doctor_id], references: [id])

  @@map("hospital_doctors")
}

model Hospital {
  id               String           @id @default(uuid())
  name             String
  country          String
  state            String?
  city             String
  street           String
  hospital_doctors HospitalDoctor[]

  @@map("hospitals")
}

model Declaration {
  id        Int       @id
  doctor_id String
  doctor    Doctor    @relation(fields: [doctor_id], references: [id])
  patients  Patient[]

  @@map("declarations")
}

model DoctorSpecialization {
  id                String @id @default(uuid())
  doctor_id         String
  specialization_id String
  doctor            Doctor @relation(fields: [doctor_id], references: [id])

  @@map("doctor_specializations")
}

model Patient {
  id                   String               @id @default(uuid())
  user_id              String
  weight               Int
  height               Int
  age                  Int
  blood_type           BloodType
  gender               Gender
  declaration_id       Int
  identity_card_key    String
  user                 User                 @relation(fields: [user_id], references: [id])
  appointments         Appointment[]
  chats                Chat[]
  patient_conditions   PatientCondition[]
  patient_allergies    PatientAllergy[]
  patient_caccinations PatientVaccination[]
  declaration          Declaration          @relation(fields: [declaration_id], references: [id])
  country              String
  state                String?
  city                 String
  street               String
  apartment            String?
  zip_code             Int?
  favorites            Favorite[]
  reviews              Review[]
  notification_logs    NotificationLog[]

  @@map("patients")
}

model Vaccination {
  id                   String               @id @default(uuid())
  name                 String
  patient_vaccinations PatientVaccination[]

  @@map("vaccinations")
}

model PatientVaccination {
  id             String      @id @default(uuid())
  vaccination_id String
  patient_id     String
  vaccination    Vaccination @relation(fields: [vaccination_id], references: [id])
  patient        Patient     @relation(fields: [patient_id], references: [id])

  @@map("patient_vaccinations")
}

model Allergy {
  id                String           @id @default(uuid())
  name              String
  patient_allergies PatientAllergy[]

  @@map("allergies")
}

model PatientAllergy {
  id         String  @id @default(uuid())
  patient_id String
  allergy_id String
  patient    Patient @relation(fields: [patient_id], references: [id])
  allergy    Allergy @relation(fields: [allergy_id], references: [id])

  @@map("patient_allergies")
}

model PatientCondition {
  id           String     @id @default(uuid())
  patient_id   String
  condition_id String
  patient      Patient    @relation(fields: [patient_id], references: [id])
  condition    Conditiion @relation(fields: [condition_id], references: [id])

  @@map("patient_conditions")
}

model Conditiion {
  id                        String                    @id @default(uuid())
  name                      String
  patient_conditions        PatientCondition[]
  specialization_conditions SpecializationCondition[]

  @@map("conditions")
}

model SpecializationCondition {
  id                String         @id @default(uuid())
  specialization_id String
  condition_id      String
  specialization    Specialization @relation(fields: [specialization_id], references: [id])
  condition         Conditiion     @relation(fields: [condition_id], references: [id])

  @@map("specialization_conditions")
}

model Specialization {
  id                        String                    @id @default(uuid())
  name                      String
  specialization_conditions SpecializationCondition[]

  @@map("specializations")
}

model Appointment {
  id          String            @id @default(uuid())
  patient_id  String
  doctor_id   String
  date        DateTime
  status      AppointmentStatus
  notes       String
  video_key   String?
  invoice_key String
  receipt_key String
  patient     Patient           @relation(fields: [patient_id], references: [id])
  doctor      Doctor            @relation(fields: [doctor_id], references: [id])

  @@map("appointments")
}

model Chat {
  id         String        @id @default(uuid())
  patient_id String
  doctor_id  String
  patient    Patient       @relation(fields: [patient_id], references: [id])
  doctor     Doctor        @relation(fields: [doctor_id], references: [id])
  messages   ChatMessage[]

  @@map("chats")
}

model ChatMessage {
  id                       String                  @id @default(uuid())
  chat_id                  String
  sender_id                String
  sent_at                  DateTime                @default(now())
  text                     String
  edited_at                DateTime
  chat                     Chat                    @relation(fields: [chat_id], references: [id])
  chat_message_attachments ChatMessageAttachment[]

  @@map("chats_messages")
}

model ChatMessageAttachment {
  id              String      @id @default(uuid())
  chat_message_id String
  attachment_key  String
  chat_message    ChatMessage @relation(fields: [chat_message_id], references: [id])

  @@map("chats_messages_attachments")
}
