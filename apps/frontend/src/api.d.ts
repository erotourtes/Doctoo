/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/login/patient": {
    /** Login patient */
    post: operations["AuthController_localLogin"];
  };
  "/auth/login/patient/mfa": {
    /** Login patient with MFA */
    post: operations["AuthController_verifyMFA"];
  };
  "/auth/signup": {
    /** Sign up user */
    post: operations["AuthController_signUpUserFirstStep"];
  };
  "/auth/signup/patient/{token}": {
    /** Sign up patient */
    post: operations["AuthController_signUpPatientSecondStep"];
  };
  "/auth/login/google": {
    /** Login with Google */
    get: operations["AuthController_googleLogin"];
  };
  "/auth/login/google/redirect": {
    /** Login with Google redirect */
    get: operations["AuthController_googleLoginRedirect"];
  };
  "/auth/logout": {
    /** Logout */
    get: operations["AuthController_logout"];
  };
  "/auth/password/change": {
    /** Change password */
    post: operations["AuthController_changePassword"];
  };
  "/auth/patient/me": {
    /** Get patient */
    get: operations["AuthController_getPatient"];
  };
  "/user/{id}": {
    /** Get user */
    get: operations["UserController_getUser"];
    /** Delete user */
    delete: operations["UserController_deleteUser"];
    /** Update user */
    patch: operations["UserController_patchUser"];
  };
  "/user": {
    /** Create user */
    post: operations["UserController_createUser"];
  };
  "/patient/{id}": {
    /** Get patient */
    get: operations["PatientController_getPatient"];
    /** Delete patient */
    delete: operations["PatientController_deletePatient"];
    /** Update patient */
    patch: operations["PatientController_patchPatient"];
  };
  "/patient": {
    /** Create patient */
    post: operations["PatientController_createPatient"];
  };
  "/patient/{id}/allergy": {
    /** Get patient allergies */
    get: operations["PatientController_getPatientAllergies"];
    /** Create patient allergy */
    post: operations["PatientController_createPatientAllergy"];
  };
  "/favorite": {
    /** Get favorites */
    get: operations["FavoriteController_getFavorites"];
    /** Create favorite */
    post: operations["FavoriteController_createFavorite"];
  };
  "/favorite/{id}": {
    /** Get favorite */
    get: operations["FavoriteController_getFovorite"];
    /** Delete favorite */
    delete: operations["FavoriteController_deleteFavorite"];
  };
  "/doctor": {
    /** Get all doctors */
    get: operations["DoctorController_getDoctors"];
    /** Create doctor */
    post: operations["DoctorController_createDoctor"];
  };
  "/doctor/dactors/{id}": {
    /** Get all doctors by patient */
    get: operations["DoctorController_getPatientDoctors"];
  };
  "/doctor/{id}": {
    /** Get doctor */
    get: operations["DoctorController_getDoctor"];
    /** Delete doctor */
    delete: operations["DoctorController_deleteDoctor"];
    /** Update doctor */
    patch: operations["DoctorController_patchDoctor"];
  };
  "/hospital": {
    /** Get all hospitals */
    get: operations["HospitalController_getHospitals"];
    /** Create hospital */
    post: operations["HospitalController_createHospital"];
  };
  "/hospital/{id}": {
    /** Get hospital */
    get: operations["HospitalController_getHospital"];
    /** Delete hospital */
    delete: operations["HospitalController_deleteHospital"];
    /** Update hospital */
    patch: operations["HospitalController_patchHospital"];
  };
  "/specialization": {
    /** Get all specializations */
    get: operations["SpecializationController_getSpecializations"];
    /** Create specialization */
    post: operations["SpecializationController_createSpecialization"];
  };
  "/specialization/{id}": {
    /** Get specialization */
    get: operations["SpecializationController_getSpecialization"];
    /** Delete specialization */
    delete: operations["SpecializationController_deleteSpecialization"];
    /** Update specialization */
    patch: operations["SpecializationController_patchSpecialization"];
  };
  "/file/upload": {
    /** Upload file */
    post: operations["FileController_uploadFile"];
  };
  "/file/{name}": {
    /** Get file */
    get: operations["FileController_getFileByName"];
    /** Delete file */
    delete: operations["FileController_deleteFileByName"];
  };
  "/appointment": {
    /** Get all appointments */
    get: operations["AppointmentController_getAppointments"];
    /** Create an appointment */
    post: operations["AppointmentController_createAppointment"];
  };
  "/appointment/patient/{id}": {
    /** Get all appointments by patient id */
    get: operations["AppointmentController_getAppointmentsByPatientId"];
  };
  "/appointment/doctor/{id}": {
    /** Get all appointments by doctor id */
    get: operations["AppointmentController_getAppointmentsByDoctorId"];
  };
  "/appointment/{id}": {
    /** Get an appointment */
    get: operations["AppointmentController_getAppointment"];
    /** Delete an appointment */
    delete: operations["AppointmentController_deleteAppointment"];
    /** Update an appointment */
    patch: operations["AppointmentController_patchAppointment"];
  };
  "/declaration": {
    /** Get declarations */
    get: operations["DeclarationController_getDeclrations"];
    /** Create declaration */
    post: operations["DeclarationController_createDeclaration"];
  };
  "/declaration/{id}": {
    /** Get declaration */
    get: operations["DeclarationController_getDeclaration"];
    /** Delete declaration */
    delete: operations["DeclarationController_deleteDeclaration"];
    /** Update declaration */
    patch: operations["DeclarationController_patchDeclaration"];
  };
  "/review/doctor/{doctorId}": {
    /** Get reviews by doctor */
    get: operations["ReviewController_getReviewsByDoctorId"];
    /** Create a new review */
    post: operations["ReviewController_createReview"];
  };
  "/review": {
    /** Get reviews */
    get: operations["ReviewController_getReviews"];
  };
  "/review/doctor/{doctorId}/average": {
    /** Get the average rating of a doctor */
    get: operations["ReviewController_getAvgRateByDoctorId"];
  };
  "/review/{id}": {
    /** Get review */
    get: operations["ReviewController_getReview"];
  };
  "/review/{reviewId}": {
    /** Delete a review */
    delete: operations["ReviewController_deleteReview"];
    /** Update a review */
    patch: operations["ReviewController_patchReview"];
  };
  "/allergy": {
    /** Get all allergies */
    get: operations["AllergyController_getAllergies"];
    /** Create allergy */
    post: operations["AllergyController_createAllergy"];
  };
  "/allergy/{id}": {
    /** Get allergy */
    get: operations["AllergyController_getAllergy"];
    /** Delete allergy */
    delete: operations["AllergyController_deleteAllergy"];
    /** Update allergy */
    patch: operations["AllergyController_patchAllergy"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    LocalLoginDto: {
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description User password.
       * @example password
       */
      password: string;
    };
    LocalLoginResponseDto: {
      /**
       * @description Whether two-factor authorization is enabled for the user.
       * @example false
       */
      isMFAEnabled: boolean;
    };
    ErrorValidationObject: {
      /**
       * @description The name of the field where validation failed.
       * @example name
       */
      proparty: string;
      /**
       * @description Detailed description of the error.
       * @example Name is too short
       */
      message: string;
    };
    BadRequestResponse: {
      /**
       * @description Error in numeric format.
       * @example 404
       */
      statusCode: number;
      /** @description Detailed description of the error. */
      message: string | string[];
      /** @description A list of all fields that failed validation. */
      errors: components["schemas"]["ErrorValidationObject"][];
    };
    ClassicNestResponse: {
      /**
       * @description Error in numeric format.
       * @example 404
       */
      statusCode: number;
      /** @description Detailed description of the error. */
      message: string | string[];
      /**
       * @description Brief description of the error.
       * @example The name must be longer than 4 characters.
       */
      error?: string;
    };
    LocalLoginTwoFactorDto: {
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description User password.
       * @example password
       */
      password: string;
      /**
       * @description One-time unique authorization code.
       * @example 236854
       */
      code: string;
    };
    SignUpUserDto: {
      /**
       * @description The user's real first name.
       * @example John
       */
      firstName: string;
      /**
       * @description The user's real last name.
       * @example Doe
       */
      lastName: string;
      /**
       * @description The user's phone number in national format.
       * @example +380000000000
       */
      phone: string;
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description User password.
       * @example password
       */
      password?: string;
      /**
       * @description Unique Google Id of the user.
       * @example G-123456789
       */
      googleId?: string;
      /**
       * @description Link to the user image.
       * @example https://imgur.com/2Bmq0jd
       */
      avatarImgUrl?: string;
    };
    ResponseUserDto: {
      /**
       * @description Unique user id.
       * @example a5d48a0c-7324-48de-bad3-be8c6eb26edc
       */
      id: string;
      /**
       * @description The user's real first name.
       * @example John
       */
      firstName: string;
      /**
       * @description The user's real last name.
       * @example Doe
       */
      lastName: string;
      /**
       * @description The user's phone number in national format.
       * @example +380000000000
       */
      phone: string;
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description Whether the user has confirmed his mail in the service.
       * @example false
       */
      emailVerified: boolean;
      /**
       * @description Unique Google Id of the user.
       * @example G-123456789
       */
      googleId?: string;
      /**
       * @description The unique file id of the file in S3 storage.
       * @example d199a4ef-6181-43bb-a9a9-a7d89faf8bc1.jpeg
       */
      avatarKey: string;
    };
    SignUpPatientDto: {
      /**
       * @description Patient's weight.
       * @example 65
       */
      weight: number;
      /**
       * @description Patient height.
       * @example 185
       */
      height: number;
      /**
       * @description Patient's age.
       * @example 35
       */
      age: number;
      /**
       * @description The patient's blood type.
       * @example AB_MINUS
       * @enum {string}
       */
      bloodType: "O_PLUS" | "O_MINUS" | "A_PLUS" | "A_MINUS" | "B_PLUS" | "B_MINUS" | "AB_PLUS" | "AB_MINUS";
      /**
       * @description Patient gender.
       * @example MALE
       * @enum {string}
       */
      gender: "MALE" | "FEMALE";
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description Patient's apartment number.
       * @example 35A
       */
      apartment?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode: number;
    };
    ChangePasswordDto: {
      /**
       * @description Old user password.
       * @example password
       */
      oldPassword: string;
      /**
       * @description New user password.
       * @example pa$$w0rd
       */
      newPassword: string;
    };
    BadRequestException: Record<string, never>;
    PatientResponseDto: {
      /**
       * @description The user's real first name.
       * @example John
       */
      firstName: string;
      /**
       * @description The user's real last name.
       * @example Doe
       */
      lastName: string;
      /**
       * @description The user's phone number in national format.
       * @example +380000000000
       */
      phone: string;
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description Whether the user has confirmed his mail in the service.
       * @example false
       */
      emailVerified: boolean;
      /**
       * @description Unique Google Id of the user.
       * @example G-123456789
       */
      googleId?: string;
      /**
       * @description The unique file id of the file in S3 storage.
       * @example d199a4ef-6181-43bb-a9a9-a7d89faf8bc1.jpeg
       */
      avatarKey: string;
      /**
       * @description Patient's weight.
       * @example 65
       */
      weight: number;
      /**
       * @description Patient height.
       * @example 185
       */
      height: number;
      /**
       * @description Patient's age.
       * @example 35
       */
      age: number;
      /**
       * @description The patient's blood type.
       * @example AB_MINUS
       * @enum {string}
       */
      bloodType: "O_PLUS" | "O_MINUS" | "A_PLUS" | "A_MINUS" | "B_PLUS" | "B_MINUS" | "AB_PLUS" | "AB_MINUS";
      /**
       * @description Patient gender.
       * @example MALE
       * @enum {string}
       */
      gender: "MALE" | "FEMALE";
      /**
       * @description A unique key to the patient identification file.
       * @example 61cce924-5b47-4b0d-9990-1df45f75190a
       */
      identityCardKey: string;
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description Patient's apartment number.
       * @example 35A
       */
      apartment?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode: number;
      /**
       * @description Status of alerts to the patient's email.
       * @default false
       */
      emailNotificationToggle: boolean;
      /**
       * @description Whether to request a two-factor confirmation when making a payment.
       * @example false
       */
      requestBillPaymentApproval: boolean;
      /**
       * @description Unique user id.
       * @example 45c21b14-ad0e-47af-8d98-11e881cb1baa
       */
      userId: string;
      /**
       * @description Unique patient id.
       * @example 1752e9a2-3b1f-47e6-a3aa-3273395c985a
       */
      patientId: string;
    };
    CreateUserDto: {
      /**
       * @description The user's real first name.
       * @example John
       */
      firstName: string;
      /**
       * @description The user's real last name.
       * @example Doe
       */
      lastName: string;
      /**
       * @description The user's phone number in national format.
       * @example +380000000000
       */
      phone: string;
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description User password.
       * @example password
       */
      password?: string;
      /**
       * @description Unique Google Id of the user.
       * @example G-123456789
       */
      googleId?: string;
      /**
       * @description The unique file id of the file in S3 storage.
       * @example 051c1348-b86b-4798-aa91-7235621760ad.jpeg
       */
      avatarKey: string;
    };
    PatchUserWithoutCredentialsDto: {
      /**
       * @description The user's real first name.
       * @example John
       */
      firstName?: string;
      /**
       * @description The user's real last name.
       * @example Doe
       */
      lastName?: string;
      /**
       * @description The user's phone number in national format.
       * @example +380000000000
       */
      phone?: string;
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email?: string;
      /**
       * @description The unique file id of the file in S3 storage.
       * @example 051c1348-b86b-4798-aa91-7235621760ad.jpeg
       */
      avatarKey?: string;
    };
    ResponsePatientDto: {
      /**
       * @description Unique patient id.
       * @example 5ae15641-f6f7-4b80-b487-d5185976de81
       */
      id: string;
      /**
       * @description The unique user id of the user to which the patient is bound.
       * @example 82c978b6-5293-4f35-b8a8-f1c9b141871b
       */
      userId: string;
      /**
       * @description Patient's weight.
       * @example 65
       */
      weight: number;
      /**
       * @description Patient height.
       * @example 185
       */
      height: number;
      /**
       * @description Patient's age.
       * @example 35
       */
      age: number;
      /**
       * @description The patient's blood type.
       * @example AB_MINUS
       * @enum {string}
       */
      bloodType: "O_PLUS" | "O_MINUS" | "A_PLUS" | "A_MINUS" | "B_PLUS" | "B_MINUS" | "AB_PLUS" | "AB_MINUS";
      /**
       * @description Patient gender.
       * @example MALE
       * @enum {string}
       */
      gender: "MALE" | "FEMALE";
      /**
       * @description A unique key to the patient identification file.
       * @example 61cce924-5b47-4b0d-9990-1df45f75190a
       */
      identityCardKey: string;
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description Patient's apartment number.
       * @example 35A
       */
      apartment?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode: number;
      /**
       * @description Status of alerts to the patient's email.
       * @default false
       */
      emailNotificationToggle: boolean;
      /**
       * @description Whether to request a two-factor confirmation when making a payment.
       * @example false
       */
      requestBillPaymentApproval: boolean;
    };
    CreatePatientDto: {
      /**
       * @description The unique user id of the user to which the patient is bound.
       * @example 450100d6-9684-42e5-a438-16bdf7330556
       */
      userId: string;
      /**
       * @description Patient's weight.
       * @example 65
       */
      weight: number;
      /**
       * @description Patient height.
       * @example 185
       */
      height: number;
      /**
       * @description Patient's age.
       * @example 35
       */
      age: number;
      /**
       * @description The patient's blood type.
       * @example AB_MINUS
       * @enum {string}
       */
      bloodType: "O_PLUS" | "O_MINUS" | "A_PLUS" | "A_MINUS" | "B_PLUS" | "B_MINUS" | "AB_PLUS" | "AB_MINUS";
      /**
       * @description Patient gender.
       * @example MALE
       * @enum {string}
       */
      gender: "MALE" | "FEMALE";
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description Patient's apartment number.
       * @example 35A
       */
      apartment?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode: number;
    };
    PatchPatientDto: {
      /**
       * @description Patient's weight.
       * @example 65
       */
      weight?: number;
      /**
       * @description Patient height.
       * @example 185
       */
      height?: number;
      /**
       * @description Patient's age.
       * @example 35
       */
      age?: number;
      /**
       * @description The patient's blood type.
       * @example AB_MINUS
       * @enum {string}
       */
      bloodType?: "O_PLUS" | "O_MINUS" | "A_PLUS" | "A_MINUS" | "B_PLUS" | "B_MINUS" | "AB_PLUS" | "AB_MINUS";
      /**
       * @description Patient gender.
       * @example MALE
       * @enum {string}
       */
      gender?: "MALE" | "FEMALE";
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country?: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city?: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street?: string;
      /**
       * @description Patient's apartment number.
       * @example 35A
       */
      apartment?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode?: number;
      /**
       * @description Unique declaration id.
       * @example 12234
       */
      declarationId: string;
      /**
       * @description A unique key to the patient identification file.
       * @example e22fb46e-676c-4ef8-8ccc-0e4858618395
       */
      identityCardKey: string;
      /**
       * @description Status of alerts to the patient's email.
       * @default false
       */
      emailNotificationToggle: boolean;
      /**
       * @description Status of alerts on the patient's text messages.
       * @example true
       */
      twoFactorAuthToggle: boolean;
      /**
       * @description Whether to request a two-factor confirmation when making a payment.
       * @example false
       */
      requestBillPaymentApproval: boolean;
    };
    CreatePatientConditionDto: {
      /**
       * @description Unique allergy id.
       * @example 6f32b54f-c085-45c2-b66f-793d6c4b0d94
       */
      allergyId: string;
    };
    ResponsePatientAllergyDto: {
      /**
       * @description Unique patient allergy id.
       * @example 7e0ffdc8-35c7-4b42-9a59-cce15f37b737
       */
      id: string;
      /**
       * @description Unique patient id.
       * @example 061a1bf5-1285-4e5d-96a2-e39143714e8e
       */
      patientId: string;
      /**
       * @description Unique allergy id.
       * @example 587f23d2-bf05-41fd-9d34-8d165fa91150
       */
      allergyId: string;
    };
    ResponseAllergyDto: {
      /**
       * @description Unique allergy id.
       * @example fe0678b2-e3c1-4b87-b476-3209d5518a9a
       */
      id: string;
      /**
       * @description Name of allergy.
       * @example Dust
       */
      name: string;
    };
    CreateFavoriteDto: {
      /**
       * @description Unique doctor id.
       * @example 4a8956cf-89d0-465a-adf3-66f035102cbb
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example cd0762a5-306f-481b-aa9a-69ea371ed2f4
       */
      patientId: string;
    };
    ResponseFavoriteDto: {
      /**
       * @description Unique doctor id.
       * @example 4a8956cf-89d0-465a-adf3-66f035102cbb
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example cd0762a5-306f-481b-aa9a-69ea371ed2f4
       */
      patientId: string;
      /**
       * @description Unique favorite id.
       * @example 6009df3b-011b-4351-966c-3a9b6a7be9b5
       */
      id: string;
    };
    CreateDoctorDto: {
      /**
       * @description Unique user id.
       * @example edaae95a-67c8-4e98-bcb7-86a12bfea642
       */
      userId: string;
      /**
       * @description Doctor's hourly rate.
       * @example 100
       */
      payrate: number;
      /**
       * @description A full description of the doctor.
       * @example Experienced doctor with a focus on patient care.
       */
      about: string;
      /**
       * @description A list of ids specialties that the doctor covers.
       * @example [
       *   "e96c2b59-1441-4599-9252-a0fbee2c55cf"
       * ]
       */
      specializationIds: string[];
      /**
       * @description List of hospitals where the doctor works.
       * @example [
       *   "20c813d5-4826-49bd-bea9-f03ddd154f00"
       * ]
       */
      hospitalIds: string[];
    };
    ResponseHospitalDto: {
      /**
       * @description The hospital's unique id.
       * @example 4c487c38-bdae-42c0-b67b-d046c6fd0d39
       */
      id: string;
      /**
       * @description The full name of the hospital is.
       * @example Ichilov and Assuta
       */
      name: string;
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode: number;
    };
    ResponseSpecializationDto: {
      /**
       * @description Unique specialisation id.
       * @example 3b618141-2b0e-4f65-84ba-49153ac72967
       */
      id: string;
      /**
       * @description Specialization name.
       * @example Surgeon
       */
      name: string;
    };
    ResponseDoctorDto: {
      /**
       * @description The ID of the doctor
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333
       */
      id: string;
      /**
       * @description The ID of the user associated with the doctor
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333
       */
      userId: string;
      /**
       * @description The pay rate of the doctor
       * @example 100
       */
      payrate: number;
      /**
       * @description About section of the doctor
       * @example Experienced doctor with a focus on patient care
       */
      about: string;
      /**
       * @description First name of the doctor
       * @example John
       */
      firstName: string;
      /**
       * @description Last name of the doctor
       * @example Doe
       */
      lastName: string;
      /**
       * @description Key of the avatar of the doctor
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333.jpg
       */
      avatarKey: string;
      /**
       * @description The phone of the doctor
       * @example +38099561735634
       */
      phone: string;
      /**
       * @description Email of the doctor
       * @example johndoe@mail.com
       */
      email: string;
      /** @description An array of hospitals associated with the doctor */
      hospitals: components["schemas"]["ResponseHospitalDto"][];
      /** @description An array of specializations of the doctor */
      specializations: components["schemas"]["ResponseSpecializationDto"][];
    };
    PatchDoctorDto: {
      /**
       * @description The pay rate of the doctor
       * @example 100
       */
      payrate: number;
      /**
       * @description About section of the doctor
       * @example Experienced doctor with a focus on patient care
       */
      about: string;
    };
    CreateHospitalDto: {
      /**
       * @description The full name of the hospital is.
       * @example Ichilov and Assuta
       */
      name: string;
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode: number;
    };
    PatchHospitalDto: {
      /**
       * @description The full name of the hospital is.
       * @example Ichilov and Assuta
       */
      name?: string;
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country?: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city?: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode?: number;
    };
    CreateSpecializationDto: {
      /**
       * @description Specialization name.
       * @example Surgeon
       */
      name: string;
    };
    UpdateSpecializationDto: {
      /**
       * @description Specialization name.
       * @example Surgeon
       */
      name?: string;
    };
    ResponseFileDto: {
      /**
       * @description File Name.
       * @example 3404a1cb-ffc1-4c30-8ecc-3e260b2a14b4.png
       */
      name: string;
      /**
       * @description Full link in the S3 storage to get the file.
       * @example https://storage.googleapis.com/bucket/3404a1cb-ffc1-4c30-8ecc-3e260b2a14b4.png
       */
      url: string;
    };
    CreateAppointmentDto: {
      /**
       * @description Unique doctor id.
       * @example 4f665813-2f44-4de5-9ecd-35c3f6956492
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example ba16b31c-60c5-47fb-bef6-1f2de213ec47
       */
      patientId: string;
      /**
       * @description The date on which the meeting is scheduled.
       * @example 2024-04-28T14:33:16.293Z
       */
      assignedAt: string;
      /**
       * @description Current status of the appointment.
       * @example PLANNED
       * @enum {string}
       */
      status: "PENDING_PAYMENT" | "PLANNED" | "COMPLETED" | "CANCELED";
      /**
       * @description Additional comments left by the patient or doctor.
       * @example Get some blood pressure pills.
       */
      notes: string;
      /**
       * @description The unique id of the billed payment.
       * @example 6a20250e-68e7-42ba-8b27-66aa46c96028
       */
      paymentInvoiceKey: string;
      /**
       * @description The unique id from the receipt file for the appointment.
       * @example 0016ea45-646b-4f48-bfcf-242c0d61f285
       */
      paymentReceiptKey: string;
      /**
       * @description The time when the appointment should start.
       * @example 2024-04-28T14:33:16.294Z
       */
      startedAt: string;
      /**
       * @description The time when the appointment should end.
       * @example 2024-04-28T14:33:16.294Z
       */
      endedAt: string;
    };
    ResponseAppointmentDto: {
      /**
       * @description Unique appointment id.
       * @example 184d705c-d787-4662-92b3-e251a88164a9
       */
      id: string;
      /**
       * @description Unique doctor id.
       * @example 12baffcd-e822-4823-8b83-2592ad8da94e
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example f1ec41f3-670b-4c90-b55f-baf698dd4daf
       */
      patientId: string;
      /**
       * Format: date-time
       * @description The date on which the meeting is scheduled.
       * @example 2024-04-28T14:33:16.291Z
       */
      assignedAt: string;
      /**
       * @description Current status of the appointment.
       * @enum {string}
       */
      status: "PENDING_PAYMENT" | "PLANNED" | "COMPLETED" | "CANCELED";
      /**
       * @description Additional comments left by the patient or doctor.
       * @example Get some blood pressure pills.
       */
      notes: string;
      /**
       * @description The unique id of the billed payment.
       * @example 8158b153-aa06-4cdc-86d5-59d583efdc9c
       */
      paymentInvoiceKey: string;
      /** @description The unique id from the receipt file for the appointment. */
      paymentReceiptKey: string;
      /**
       * @description The unique id of the video chat recording.
       * @example c6021337-4947-4578-b3ca-595505c67f65.mp4
       */
      videoRecordKey: string;
      /**
       * @description The time when the appointment should start.
       * @example 2024-04-28T14:33:16.292Z
       */
      startedAt: string;
      /**
       * @description The time when the appointment should end.
       * @example 2024-04-28T14:33:16.292Z
       */
      endedAt: string;
    };
    PatchAppointmentDto: {
      /**
       * @description Unique doctor id.
       * @example 4f665813-2f44-4de5-9ecd-35c3f6956492
       */
      doctorId?: string;
      /**
       * @description Unique patient id.
       * @example ba16b31c-60c5-47fb-bef6-1f2de213ec47
       */
      patientId?: string;
      /**
       * @description The date on which the meeting is scheduled.
       * @example 2024-04-28T14:33:16.293Z
       */
      assignedAt?: string;
      /**
       * @description Current status of the appointment.
       * @example PLANNED
       * @enum {string}
       */
      status?: "PENDING_PAYMENT" | "PLANNED" | "COMPLETED" | "CANCELED";
      /**
       * @description Additional comments left by the patient or doctor.
       * @example Get some blood pressure pills.
       */
      notes?: string;
      /**
       * @description The unique id of the billed payment.
       * @example 6a20250e-68e7-42ba-8b27-66aa46c96028
       */
      paymentInvoiceKey?: string;
      /**
       * @description The unique id from the receipt file for the appointment.
       * @example 0016ea45-646b-4f48-bfcf-242c0d61f285
       */
      paymentReceiptKey?: string;
      /**
       * @description The time when the appointment should start.
       * @example 2024-04-28T14:33:16.294Z
       */
      startedAt?: string;
      /**
       * @description The time when the appointment should end.
       * @example 2024-04-28T14:33:16.294Z
       */
      endedAt?: string;
    };
    CreateDeclarationDto: {
      /**
       * @description Unique doctor id.
       * @example d6108b68-0325-4ccc-9923-efce2a09e9b8
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example 6b840808-5322-47c5-8497-9a5ca4f4e29b
       */
      patientId: string;
    };
    ResponseDeclarationDto: {
      /**
       * @description Unique doctor id.
       * @example d6108b68-0325-4ccc-9923-efce2a09e9b8
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example 6b840808-5322-47c5-8497-9a5ca4f4e29b
       */
      patientId: string;
      /**
       * @description Unique declration id.
       * @example 1
       */
      id: number;
    };
    CreateReviewDto: {
      /**
       * @description Text of the review.
       * @example Good doctor, recommended.
       */
      text?: string;
      /**
       * @description Rate of the review.
       * @example 5
       */
      rate?: number;
    };
    ResponseReviewDto: {
      /**
       * @description Unique rating id.
       * @example 1e2b8478-3156-4019-a98a-910fc5f5b3b6
       */
      id: string;
      /**
       * @description The rate in review.
       * @example 4
       */
      rate: number;
      /**
       * @description Text in review.
       * @example Experienced doctor with a focus on patient care.
       */
      text: string;
      /**
       * @description Unique doctor id.
       * @example 6ba257ef-13d9-4481-8fac-763a9dff8b83
       */
      doctorId: string;
      /**
       * Format: date-time
       * @description The date when the review was created.
       * @example 2024-04-28T14:33:17.291Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The date when the review was updated.
       * @example 2024-04-28T14:33:17.291Z
       */
      updatedAt: string;
    };
    UnauthorizedResponse: {
      /**
       * @description Detailed description of the error.
       * @example Unauthorized access
       */
      message: string;
      /**
       * @description Error in numeric format.
       * @example 401
       */
      errorCode: number;
    };
    ResponseReviewDtoWithNames: {
      /**
       * @description Unique rating id.
       * @example 1e2b8478-3156-4019-a98a-910fc5f5b3b6
       */
      id: string;
      /**
       * @description The rate in review.
       * @example 4
       */
      rate: number;
      /**
       * @description Text in review.
       * @example Experienced doctor with a focus on patient care.
       */
      text: string;
      /**
       * @description Unique doctor id.
       * @example 6ba257ef-13d9-4481-8fac-763a9dff8b83
       */
      doctorId: string;
      /**
       * @description The names of the doctor, when icnludesName prodived.
       * @example {
       *   "user": {
       *     "firstName": "John",
       *     "lastName": "Doe"
       *   }
       * }
       */
      doctor?: Record<string, never>;
      /**
       * @description The names of the patient, when icnludesName provided.
       * @example {
       *   "user": {
       *     "firstName": "John",
       *     "lastName": "Doe"
       *   }
       * }
       */
      patient?: Record<string, never>;
    };
    AvgRateResponse: {
      /**
       * @description Average rating.
       * @example 4.5
       */
      avg: number;
      /**
       * @description Total number of reviews.
       * @example 10
       */
      count: number;
    };
    PatchReviewDto: {
      /**
       * @description Text of the review.
       * @example Good doctor, recommended.
       */
      text?: string;
      /**
       * @description Rate of the review.
       * @example 5
       */
      rate?: number;
    };
    CreateAllergyDto: {
      /**
       * @description Name of allergy.
       * @example Dust
       */
      name: string;
    };
    UpdateAllergyDto: {
      /**
       * @description Name of allergy.
       * @example Dust
       */
      name?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Login patient */
  AuthController_localLogin: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LocalLoginDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["LocalLoginResponseDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Login patient with MFA */
  AuthController_verifyMFA: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LocalLoginTwoFactorDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Sign up user */
  AuthController_signUpUserFirstStep: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignUpUserDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseUserDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Sign up patient */
  AuthController_signUpPatientSecondStep: {
    parameters: {
      path: {
        token: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignUpPatientDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Login with Google */
  AuthController_googleLogin: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Login with Google redirect */
  AuthController_googleLoginRedirect: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Logout */
  AuthController_logout: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Change password */
  AuthController_changePassword: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangePasswordDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["BadRequestException"];
        };
      };
    };
  };
  /** Get patient */
  AuthController_getPatient: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["PatientResponseDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get user */
  UserController_getUser: {
    parameters: {
      path: {
        /**
         * @description Unique user id.
         * @example aadcf2a1-acd4-44f3-8687-6c8640a22862
         */
        id: string;
      };
    };
    responses: {
      /** @description Response if an error occurs while processing a request. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseUserDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Delete user */
  UserController_deleteUser: {
    parameters: {
      path: {
        /**
         * @description Unique user id.
         * @example 3bd0dc50-d60f-4ff4-9b62-bc5d8cdf9e22
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Update user */
  UserController_patchUser: {
    parameters: {
      path: {
        /**
         * @description Unique user id.
         * @example ee547328-0e01-40f4-a1fd-2ec7c346574f
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchUserWithoutCredentialsDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseUserDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Create user */
  UserController_createUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseUserDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get patient */
  PatientController_getPatient: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example e598f847-b8a2-4a5c-960a-2991b2113d12
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponsePatientDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Delete patient */
  PatientController_deletePatient: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example 7910f7fc-e0c9-4397-8f37-c6038224cd2b
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Update patient */
  PatientController_patchPatient: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example e45a52f8-06b8-4d82-a4b1-881b5c99ddbc
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchPatientDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponsePatientDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Create patient */
  PatientController_createPatient: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePatientDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponsePatientDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get patient allergies */
  PatientController_getPatientAllergies: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example 63686df5-07fe-4c95-891b-bab40d05048f
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAllergyDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Create patient allergy */
  PatientController_createPatientAllergy: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example ec21fdec-81cd-46a1-8d35-c93faad95e21
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePatientConditionDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponsePatientAllergyDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get favorites */
  FavoriteController_getFavorites: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseFavoriteDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Create favorite */
  FavoriteController_createFavorite: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateFavoriteDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseFavoriteDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get favorite */
  FavoriteController_getFovorite: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 2af389c7-e374-44e9-abce-a254d86e3cfe
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseFavoriteDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Delete favorite */
  FavoriteController_deleteFavorite: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 17156018-0642-4f01-8a32-8fcb4838f246
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get all doctors */
  DoctorController_getDoctors: {
    parameters: {
      query?: {
        /** @description ID of the hospital to filter doctors by */
        hospitalId?: string;
        /** @description ID of the specialization to filter doctors by */
        specializationId?: string;
        /** @description Search string */
        search?: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDoctorDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Create doctor */
  DoctorController_createDoctor: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateDoctorDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDoctorDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get all doctors by patient */
  DoctorController_getPatientDoctors: {
    parameters: {
      path: {
        /**
         * @description Unique patient id.
         * @example ea166f74-1f3c-4cec-b985-7bdbc7037b19
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDoctorDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get doctor */
  DoctorController_getDoctor: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 6d5746e5-9c33-4a5f-8b25-f28ff55f1596
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDoctorDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Delete doctor */
  DoctorController_deleteDoctor: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 2a0d4425-283c-4c65-9811-f04d6999c1bf
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Update doctor */
  DoctorController_patchDoctor: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 19e234de-e7f0-476c-9149-265318472ad2
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchDoctorDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDoctorDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get all hospitals */
  HospitalController_getHospitals: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseHospitalDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Create hospital */
  HospitalController_createHospital: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateHospitalDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseHospitalDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get hospital */
  HospitalController_getHospital: {
    parameters: {
      path: {
        /**
         * @description The hospital's unique id.
         * @example 2fe0b87b-bdb3-449c-855b-bba8c3e67295
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseHospitalDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Delete hospital */
  HospitalController_deleteHospital: {
    parameters: {
      path: {
        /**
         * @description The hospital's unique id.
         * @example 96cb30af-80f9-44ec-8032-1f6f847f5734
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Update hospital */
  HospitalController_patchHospital: {
    parameters: {
      path: {
        /**
         * @description The hospital's unique id.
         * @example 422232be-3787-4a72-b494-9541aa376a9c
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchHospitalDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseHospitalDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get all specializations */
  SpecializationController_getSpecializations: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseSpecializationDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
    };
  };
  /** Create specialization */
  SpecializationController_createSpecialization: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSpecializationDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseSpecializationDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
    };
  };
  /** Get specialization */
  SpecializationController_getSpecialization: {
    parameters: {
      path: {
        /**
         * @description Unique specialisation id.
         * @example f7581ca5-79a2-47a2-8b5a-b820d8278b24
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseSpecializationDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
    };
  };
  /** Delete specialization */
  SpecializationController_deleteSpecialization: {
    parameters: {
      path: {
        /**
         * @description Unique specialisation id.
         * @example 9d40274f-7a40-4fe9-83db-102b0ed27ddf
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
    };
  };
  /** Update specialization */
  SpecializationController_patchSpecialization: {
    parameters: {
      path: {
        /**
         * @description Unique specialisation id.
         * @example 74d27c57-ab85-484b-9106-6a62b6329805
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSpecializationDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseSpecializationDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
    };
  };
  /** Upload file */
  FileController_uploadFile: {
    /** @description The file to be uploaded. */
    requestBody: {
      content: {
        "multipart/form-data": string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseFileDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get file */
  FileController_getFileByName: {
    parameters: {
      path: {
        /**
         * @description Unique file name.
         * @example d466c133-93c4-4340-813a-ceef5e92c61b.png
         */
        name: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseFileDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Delete file */
  FileController_deleteFileByName: {
    parameters: {
      path: {
        /**
         * @description Unique file name.
         * @example 306a7a80-f775-469b-9f2f-29654339a599.png
         */
        name: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get all appointments */
  AppointmentController_getAppointments: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAppointmentDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Create an appointment */
  AppointmentController_createAppointment: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAppointmentDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAppointmentDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get all appointments by patient id */
  AppointmentController_getAppointmentsByPatientId: {
    parameters: {
      path: {
        /**
         * @description Unique patient id.
         * @example 07e9d0da-da8c-444b-b0a3-e68ee4348a89
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAppointmentDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get all appointments by doctor id */
  AppointmentController_getAppointmentsByDoctorId: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 48718d35-ee88-4936-bfa5-b7e5aab0d366
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAppointmentDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get an appointment */
  AppointmentController_getAppointment: {
    parameters: {
      path: {
        /**
         * @description Unique appointment id.
         * @example f2132436-42f7-4157-a019-da7ea20c5943
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAppointmentDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Delete an appointment */
  AppointmentController_deleteAppointment: {
    parameters: {
      path: {
        /**
         * @description Unique appointment id.
         * @example 648a60cc-5e5d-45bf-9261-8cf9fbb81c55
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Update an appointment */
  AppointmentController_patchAppointment: {
    parameters: {
      path: {
        /**
         * @description Unique appointment id.
         * @example 751d5a86-79f4-44b4-a3b0-f9eded2fe3ed
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchAppointmentDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAppointmentDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get declarations */
  DeclarationController_getDeclrations: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDeclarationDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Create declaration */
  DeclarationController_createDeclaration: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateDeclarationDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDeclarationDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get declaration */
  DeclarationController_getDeclaration: {
    parameters: {
      path: {
        /**
         * @description Unique declaration id.
         * @example 1
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDeclarationDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Delete declaration */
  DeclarationController_deleteDeclaration: {
    parameters: {
      path: {
        /**
         * @description Unique declaration id.
         * @example 1
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Update declaration */
  DeclarationController_patchDeclaration: {
    parameters: {
      path: {
        /**
         * @description Unique declaration id.
         * @example 1
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateDeclarationDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDeclarationDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get reviews by doctor */
  ReviewController_getReviewsByDoctorId: {
    parameters: {
      path: {
        doctorId: string;
        /**
         * @description Include names in reviews.
         * @example false
         */
        includeNames: string;
        /**
         * @description How many reviews should be skipped.
         * @example 1
         */
        skip: string;
        /**
         * @description How many reviews should be taken.
         * @example 50
         */
        take: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseReviewDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Create a new review */
  ReviewController_createReview: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
      path: {
        doctorId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateReviewDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseReviewDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get reviews */
  ReviewController_getReviews: {
    parameters: {
      path: {
        /**
         * @description Include names in reviews.
         * @example false
         */
        includeNames: string;
        /**
         * @description How many reviews should be skipped.
         * @example 1
         */
        skip: string;
        /**
         * @description How many reviews should be taken.
         * @example 50
         */
        take: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseReviewDtoWithNames"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get the average rating of a doctor */
  ReviewController_getAvgRateByDoctorId: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example d35b00d2-a557-4658-b2af-869f1e5afd82
         */
        doctorId: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["AvgRateResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get review */
  ReviewController_getReview: {
    parameters: {
      path: {
        /**
         * @description Unique review id.
         * @example 577b6b99-d347-41c5-b6de-27f93a94f039
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseReviewDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Delete a review */
  ReviewController_deleteReview: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
      path: {
        reviewId: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Update a review */
  ReviewController_patchReview: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
      path: {
        reviewId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchReviewDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseReviewDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get all allergies */
  AllergyController_getAllergies: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAllergyDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Create allergy */
  AllergyController_createAllergy: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAllergyDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAllergyDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get allergy */
  AllergyController_getAllergy: {
    parameters: {
      path: {
        /**
         * @description Unique allergy id.
         * @example 64a24068-5255-4d38-99af-da3472fddf97
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAllergyDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Delete allergy */
  AllergyController_deleteAllergy: {
    parameters: {
      path: {
        /**
         * @description Unique allergy id.
         * @example 3ff024a6-ba46-436d-9532-27b5d2cd5d61
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      404: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Update allergy */
  AllergyController_patchAllergy: {
    parameters: {
      path: {
        /**
         * @description Unique allergy id.
         * @example fd1e1a65-b816-40eb-9bb2-ee3ab02a1cf8
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateAllergyDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAllergyDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
}
