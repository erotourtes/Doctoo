/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth/login/patient': {
    /** Login patient */
    post: operations['AuthController_localLogin'];
  };
  '/auth/login/patient/mfa': {
    /** Login patient with MFA */
    post: operations['AuthController_verifyMFA'];
  };
  '/auth/signup': {
    /** Sign up user */
    post: operations['AuthController_signUpUserFirstStep'];
  };
  '/auth/signup/patient/{token}': {
    /** Sign up patient */
    post: operations['AuthController_signUpPatientSecondStep'];
  };
  '/auth/login/google': {
    /** Login with Google */
    get: operations['AuthController_googleLogin'];
  };
  '/auth/login/google/redirect': {
    /** Login with Google redirect */
    get: operations['AuthController_googleLoginRedirect'];
  };
  '/auth/logout': {
    /** Logout */
    get: operations['AuthController_logout'];
  };
  '/auth/password/change': {
    /** Change password */
    post: operations['AuthController_changePassword'];
  };
  '/auth/patient/me': {
    /** Get patient */
    get: operations['AuthController_getPatient'];
  };
  '/user/{id}': {
    /** Get user */
    get: operations['UserController_getUser'];
    /** Delete user */
    delete: operations['UserController_deleteUser'];
    /** Update user */
    patch: operations['UserController_patchUser'];
  };
  '/user': {
    /** Create user */
    post: operations['UserController_createUser'];
  };
  '/patient/{id}': {
    /** Get patient */
    get: operations['PatientController_getPatient'];
    /** Delete patient */
    delete: operations['PatientController_deletePatient'];
    /** Update patient */
    patch: operations['PatientController_patchPatient'];
  };
  '/patient': {
    /** Create patient */
    post: operations['PatientController_createPatient'];
  };
  '/patient/{id}/allergy': {
    /** Get patient allergies */
    get: operations['PatientController_getPatientAllergies'];
    /** Create patient allergy */
    post: operations['PatientController_createPatientAllergy'];
  };
  '/favorite': {
    /** Get favorites */
    get: operations['FavoriteController_getFavorites'];
    /** Create favorite */
    post: operations['FavoriteController_createFavorite'];
  };
  '/favorite/{id}': {
    /** Get favorite */
    get: operations['FavoriteController_getFovorite'];
    /** Delete favorite */
    delete: operations['FavoriteController_deleteFavorite'];
  };
  '/doctor': {
    /** Get all doctors */
    get: operations['DoctorController_getDoctors'];
    /** Create doctor */
    post: operations['DoctorController_createDoctor'];
  };
  '/doctor/dactors/{id}': {
    /** Get all doctors by patient */
    get: operations['DoctorController_getPatientDoctors'];
  };
  '/doctor/{id}': {
    /** Get doctor */
    get: operations['DoctorController_getDoctor'];
    /** Delete doctor */
    delete: operations['DoctorController_deleteDoctor'];
    /** Update doctor */
    patch: operations['DoctorController_patchDoctor'];
  };
  '/hospital': {
    /** Get all hospitals */
    get: operations['HospitalController_getHospitals'];
    /** Create hospital */
    post: operations['HospitalController_createHospital'];
  };
  '/hospital/{id}': {
    /** Get hospital */
    get: operations['HospitalController_getHospital'];
    /** Delete hospital */
    delete: operations['HospitalController_deleteHospital'];
    /** Update hospital */
    patch: operations['HospitalController_patchHospital'];
  };
  '/specialization': {
    /** Get all specializations */
    get: operations['SpecializationController_getSpecializations'];
    /** Create specialization */
    post: operations['SpecializationController_createSpecialization'];
  };
  '/specialization/{id}': {
    /** Get specialization */
    get: operations['SpecializationController_getSpecialization'];
    /** Delete specialization */
    delete: operations['SpecializationController_deleteSpecialization'];
    /** Update specialization */
    patch: operations['SpecializationController_patchSpecialization'];
  };
  '/file/upload': {
    /** Upload file */
    post: operations['FileController_uploadFile'];
  };
  '/file/{name}': {
    /** Get file */
    get: operations['FileController_getFileByName'];
    /** Delete file */
    delete: operations['FileController_deleteFileByName'];
  };
  '/appointment': {
    /** Get all appointments */
    get: operations['AppointmentController_getAppointments'];
    /** Create an appointment */
    post: operations['AppointmentController_createAppointment'];
  };
  '/appointment/patient/{id}': {
    /** Get all appointments by patient id */
    get: operations['AppointmentController_getAppointmentsByPatientId'];
  };
  '/appointment/doctor/{id}': {
    /** Get all appointments by doctor id */
    get: operations['AppointmentController_getAppointmentsByDoctorId'];
  };
  '/appointment/{id}': {
    /** Get an appointment */
    get: operations['AppointmentController_getAppointment'];
    /** Delete an appointment */
    delete: operations['AppointmentController_deleteAppointment'];
    /** Update an appointment */
    patch: operations['AppointmentController_patchAppointment'];
  };
  '/declaration': {
    /** Get declarations */
    get: operations['DeclarationController_getDeclrations'];
    /** Create declaration */
    post: operations['DeclarationController_createDeclaration'];
  };
  '/declaration/{id}': {
    /** Get declaration */
    get: operations['DeclarationController_getDeclaration'];
    /** Delete declaration */
    delete: operations['DeclarationController_deleteDeclaration'];
    /** Update declaration */
    patch: operations['DeclarationController_patchDeclaration'];
  };
  '/review/doctor/{doctorId}': {
    /** Get reviews by doctor */
    get: operations['ReviewController_getReviewsByDoctorId'];
    /** Create a new review */
    post: operations['ReviewController_createReview'];
  };
  '/review': {
    /** Get reviews */
    get: operations['ReviewController_getReviews'];
  };
  '/review/doctor/{doctorId}/average': {
    /** Get the average rating of a doctor */
    get: operations['ReviewController_getAvgRateByDoctorId'];
  };
  '/review/{id}': {
    /** Get review */
    get: operations['ReviewController_getReview'];
  };
  '/review/{reviewId}': {
    /** Delete a review */
    delete: operations['ReviewController_deleteReview'];
    /** Update a review */
    patch: operations['ReviewController_patchReview'];
  };
  '/allergy': {
    /** Get all allergies */
    get: operations['AllergyController_getAllergies'];
    /** Create allergy */
    post: operations['AllergyController_createAllergy'];
  };
  '/allergy/{id}': {
    /** Get allergy */
    get: operations['AllergyController_getAllergy'];
    /** Delete allergy */
    delete: operations['AllergyController_deleteAllergy'];
    /** Update allergy */
    patch: operations['AllergyController_patchAllergy'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    LocalLoginDto: {
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description User password.
       * @example password
       */
      password: string;
    };
    LocalLoginResponseDto: {
      /**
       * @description Whether two-factor authorization is enabled for the user.
       * @example false
       */
      isMFAEnabled: boolean;
    };
    ErrorValidationObject: {
      /**
       * @description The name of the field where validation failed.
       * @example name
       */
      proparty: string;
      /**
       * @description Detailed description of the error.
       * @example Name is too short
       */
      message: string;
    };
    BadRequestResponse: {
      /**
       * @description Error in numeric format.
       * @example 404
       */
      statusCode: number;
      /** @description Detailed description of the error. */
      message: string | string[];
      /** @description A list of all fields that failed validation. */
      errors: components['schemas']['ErrorValidationObject'][];
    };
    ClassicNestResponse: {
      /**
       * @description Error in numeric format.
       * @example 404
       */
      statusCode: number;
      /** @description Detailed description of the error. */
      message: string | string[];
      /**
       * @description Brief description of the error.
       * @example The name must be longer than 4 characters.
       */
      error?: string;
    };
    LocalLoginTwoFactorDto: {
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description User password.
       * @example password
       */
      password: string;
      /**
       * @description One-time unique authorization code.
       * @example 236854
       */
      code: string;
    };
    SignUpUserDto: {
      /**
       * @description The user's real first name.
       * @example John
       */
      firstName: string;
      /**
       * @description The user's real last name.
       * @example Doe
       */
      lastName: string;
      /**
       * @description The user's phone number in national format.
       * @example +380000000000
       */
      phone: string;
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description User password.
       * @example password
       */
      password?: string;
      /**
       * @description Unique Google Id of the user.
       * @example G-123456789
       */
      googleId?: string;
      /**
       * @description Link to the user image.
       * @example https://imgur.com/2Bmq0jd
       */
      avatarImgUrl?: string;
    };
    ResponseUserDto: {
      /**
       * @description Unique user id.
       * @example 723b3221-5a1d-489e-9720-ec045a65968e
       */
      id: string;
      /**
       * @description The user's real first name.
       * @example John
       */
      firstName: string;
      /**
       * @description The user's real last name.
       * @example Doe
       */
      lastName: string;
      /**
       * @description The user's phone number in national format.
       * @example +380000000000
       */
      phone: string;
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description Whether the user has confirmed his mail in the service.
       * @example false
       */
      emailVerified: boolean;
      /**
       * @description Unique Google Id of the user.
       * @example G-123456789
       */
      googleId?: string;
      /**
       * @description The unique file id of the file in S3 storage.
       * @example a078ec62-596d-4f28-b1a7-cf01bab60450.jpeg
       */
      avatarKey: string;
    };
    SignUpPatientDto: {
      /**
       * @description Patient's weight.
       * @example 65
       */
      weight: number;
      /**
       * @description Patient height.
       * @example 185
       */
      height: number;
      /**
       * @description Patient's age.
       * @example 35
       */
      age: number;
      /**
       * @description The patient's blood type.
       * @example AB_MINUS
       * @enum {string}
       */
      bloodType: 'O_PLUS' | 'O_MINUS' | 'A_PLUS' | 'A_MINUS' | 'B_PLUS' | 'B_MINUS' | 'AB_PLUS' | 'AB_MINUS';
      /**
       * @description Patient gender.
       * @example MALE
       * @enum {string}
       */
      gender: 'MALE' | 'FEMALE';
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description Patient's apartment number.
       * @example 35A
       */
      apartment?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode: number;
    };
    ChangePasswordDto: {
      /**
       * @description Old user password.
       * @example password
       */
      oldPassword: string;
      /**
       * @description New user password.
       * @example pa$$w0rd
       */
      newPassword: string;
    };
    BadRequestException: Record<string, never>;
    PatientResponseDto: {
      /**
       * @description The user's real first name.
       * @example John
       */
      firstName: string;
      /**
       * @description The user's real last name.
       * @example Doe
       */
      lastName: string;
      /**
       * @description The user's phone number in national format.
       * @example +380000000000
       */
      phone: string;
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description Whether the user has confirmed his mail in the service.
       * @example false
       */
      emailVerified: boolean;
      /**
       * @description Unique Google Id of the user.
       * @example G-123456789
       */
      googleId?: string;
      /**
       * @description The unique file id of the file in S3 storage.
       * @example a078ec62-596d-4f28-b1a7-cf01bab60450.jpeg
       */
      avatarKey: string;
      /**
       * @description Patient's weight.
       * @example 65
       */
      weight: number;
      /**
       * @description Patient height.
       * @example 185
       */
      height: number;
      /**
       * @description Patient's age.
       * @example 35
       */
      age: number;
      /**
       * @description The patient's blood type.
       * @example AB_MINUS
       * @enum {string}
       */
      bloodType: 'O_PLUS' | 'O_MINUS' | 'A_PLUS' | 'A_MINUS' | 'B_PLUS' | 'B_MINUS' | 'AB_PLUS' | 'AB_MINUS';
      /**
       * @description Patient gender.
       * @example MALE
       * @enum {string}
       */
      gender: 'MALE' | 'FEMALE';
      /**
       * @description A unique key to the patient identification file.
       * @example 6dcff58e-dc9e-4246-ac72-62cb555f4d3a
       */
      identityCardKey: string;
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description Patient's apartment number.
       * @example 35A
       */
      apartment?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode: number;
      /**
       * @description Status of alerts to the patient's email.
       * @default false
       */
      emailNotificationToggle: boolean;
      /**
       * @description Whether to request a two-factor confirmation when making a payment.
       * @example false
       */
      requestBillPaymentApproval: boolean;
      /**
       * @description Unique user id.
       * @example a63b4fda-b858-4e90-9683-c8cd678a7dfc
       */
      userId: string;
      /**
       * @description Unique patient id.
       * @example 51bb7bee-ac11-4f95-9e9e-95875808fb4e
       */
      patientId: string;
    };
    CreateUserDto: {
      /**
       * @description The user's real first name.
       * @example John
       */
      firstName: string;
      /**
       * @description The user's real last name.
       * @example Doe
       */
      lastName: string;
      /**
       * @description The user's phone number in national format.
       * @example +380000000000
       */
      phone: string;
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description User password.
       * @example password
       */
      password?: string;
      /**
       * @description Unique Google Id of the user.
       * @example G-123456789
       */
      googleId?: string;
      /**
       * @description The unique file id of the file in S3 storage.
       * @example 8204dfa6-ff8d-4efc-961f-dc437a15ad35.jpeg
       */
      avatarKey: string;
    };
    PatchUserWithoutCredentialsDto: {
      /**
       * @description The user's real first name.
       * @example John
       */
      firstName?: string;
      /**
       * @description The user's real last name.
       * @example Doe
       */
      lastName?: string;
      /**
       * @description The user's phone number in national format.
       * @example +380000000000
       */
      phone?: string;
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email?: string;
      /**
       * @description The unique file id of the file in S3 storage.
       * @example 8204dfa6-ff8d-4efc-961f-dc437a15ad35.jpeg
       */
      avatarKey?: string;
    };
    ResponsePatientDto: {
      /**
       * @description Unique patient id.
       * @example 55bb1fb3-146a-4da9-9684-1f883aaf9b81
       */
      id: string;
      /**
       * @description The unique user id of the user to which the patient is bound.
       * @example 52db4a7f-9dc7-4333-90bf-ebd279b55769
       */
      userId: string;
      /**
       * @description Patient's weight.
       * @example 65
       */
      weight: number;
      /**
       * @description Patient height.
       * @example 185
       */
      height: number;
      /**
       * @description Patient's age.
       * @example 35
       */
      age: number;
      /**
       * @description The patient's blood type.
       * @example AB_MINUS
       * @enum {string}
       */
      bloodType: 'O_PLUS' | 'O_MINUS' | 'A_PLUS' | 'A_MINUS' | 'B_PLUS' | 'B_MINUS' | 'AB_PLUS' | 'AB_MINUS';
      /**
       * @description Patient gender.
       * @example MALE
       * @enum {string}
       */
      gender: 'MALE' | 'FEMALE';
      /**
       * @description A unique key to the patient identification file.
       * @example 6dcff58e-dc9e-4246-ac72-62cb555f4d3a
       */
      identityCardKey: string;
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description Patient's apartment number.
       * @example 35A
       */
      apartment?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode: number;
      /**
       * @description Status of alerts to the patient's email.
       * @default false
       */
      emailNotificationToggle: boolean;
      /**
       * @description Whether to request a two-factor confirmation when making a payment.
       * @example false
       */
      requestBillPaymentApproval: boolean;
    };
    CreatePatientDto: {
      /**
       * @description The unique user id of the user to which the patient is bound.
       * @example 9b8a3cee-8201-416b-aada-f48831e01b2e
       */
      userId: string;
      /**
       * @description Patient's weight.
       * @example 65
       */
      weight: number;
      /**
       * @description Patient height.
       * @example 185
       */
      height: number;
      /**
       * @description Patient's age.
       * @example 35
       */
      age: number;
      /**
       * @description The patient's blood type.
       * @example AB_MINUS
       * @enum {string}
       */
      bloodType: 'O_PLUS' | 'O_MINUS' | 'A_PLUS' | 'A_MINUS' | 'B_PLUS' | 'B_MINUS' | 'AB_PLUS' | 'AB_MINUS';
      /**
       * @description Patient gender.
       * @example MALE
       * @enum {string}
       */
      gender: 'MALE' | 'FEMALE';
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description Patient's apartment number.
       * @example 35A
       */
      apartment?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode: number;
    };
    PatchPatientDto: {
      /**
       * @description Patient's weight.
       * @example 65
       */
      weight?: number;
      /**
       * @description Patient height.
       * @example 185
       */
      height?: number;
      /**
       * @description Patient's age.
       * @example 35
       */
      age?: number;
      /**
       * @description The patient's blood type.
       * @example AB_MINUS
       * @enum {string}
       */
      bloodType?: 'O_PLUS' | 'O_MINUS' | 'A_PLUS' | 'A_MINUS' | 'B_PLUS' | 'B_MINUS' | 'AB_PLUS' | 'AB_MINUS';
      /**
       * @description Patient gender.
       * @example MALE
       * @enum {string}
       */
      gender?: 'MALE' | 'FEMALE';
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country?: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city?: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street?: string;
      /**
       * @description Patient's apartment number.
       * @example 35A
       */
      apartment?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode?: number;
      /**
       * @description Unique declaration id.
       * @example 12234
       */
      declarationId: string;
      /**
       * @description A unique key to the patient identification file.
       * @example ad97ea46-c240-4282-bc5b-254ce33bd1e2
       */
      identityCardKey: string;
      /**
       * @description Status of alerts to the patient's email.
       * @default false
       */
      emailNotificationToggle: boolean;
      /**
       * @description Status of alerts on the patient's text messages.
       * @example true
       */
      twoFactorAuthToggle: boolean;
      /**
       * @description Whether to request a two-factor confirmation when making a payment.
       * @example false
       */
      requestBillPaymentApproval: boolean;
    };
    CreatePatientConditionDto: {
      /**
       * @description Unique allergy id.
       * @example ab90406d-2add-428e-8d8e-e58abb5021f3
       */
      allergyId: string;
    };
    ResponsePatientAllergyDto: {
      /**
       * @description Unique patient allergy id.
       * @example f5eac717-8d58-41ec-8129-94740f732a88
       */
      id: string;
      /**
       * @description Unique patient id.
       * @example be122e86-e1e0-427c-b4cc-edead83f0488
       */
      patientId: string;
      /**
       * @description Unique allergy id.
       * @example 12389e81-2fa2-4dbd-bf5d-c54721d81a28
       */
      allergyId: string;
    };
    ResponseAllergyDto: {
      /**
       * @description Unique allergy id.
       * @example efcdd2c6-4651-4f00-b2f8-66de0c29f67a
       */
      id: string;
      /**
       * @description Name of allergy.
       * @example Dust
       */
      name: string;
    };
    CreateFavoriteDto: {
      /**
       * @description Unique doctor id.
       * @example 2cd7336c-cdb5-42b9-b804-4db9c0aaaba9
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example 70be5414-93c9-48d1-bce8-5514348c3b10
       */
      patientId: string;
    };
    ResponseFavoriteDto: {
      /**
       * @description Unique doctor id.
       * @example 2cd7336c-cdb5-42b9-b804-4db9c0aaaba9
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example 70be5414-93c9-48d1-bce8-5514348c3b10
       */
      patientId: string;
      /**
       * @description Unique favorite id.
       * @example c8821ff0-6776-40e4-be9c-36edbe1fdbea
       */
      id: string;
    };
    CreateDoctorDto: {
      /**
       * @description Unique user id.
       * @example 1359e2d4-364b-4003-8ac1-dedcbfe47252
       */
      userId: string;
      /**
       * @description Doctor's hourly rate.
       * @example 100
       */
      payrate: number;
      /**
       * @description A full description of the doctor.
       * @example Experienced doctor with a focus on patient care.
       */
      about: string;
      /**
       * @description A list of ids specialties that the doctor covers.
       * @example [
       *   "86153d9b-ede0-48ed-8944-94b5928314cb"
       * ]
       */
      specializationIds: string[];
      /**
       * @description List of hospitals where the doctor works.
       * @example [
       *   "5a5141b0-9e27-4182-80ba-60485ee0bc85"
       * ]
       */
      hospitalIds: string[];
    };
    ResponseHospitalDto: {
      /**
       * @description The hospital's unique id.
       * @example 29d71fea-f528-40c8-9152-0b8506aa6be7
       */
      id: string;
      /**
       * @description The full name of the hospital is.
       * @example Ichilov and Assuta
       */
      name: string;
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode: number;
    };
    ResponseSpecializationDto: {
      /**
       * @description Unique specialisation id.
       * @example 16c832b7-2a70-4ad8-8d66-8d696da1a804
       */
      id: string;
      /**
       * @description Specialization name.
       * @example Surgeon
       */
      name: string;
    };
    ResponseDoctorDto: {
      /**
       * @description The ID of the doctor
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333
       */
      id: string;
      /**
       * @description The ID of the user associated with the doctor
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333
       */
      userId: string;
      /**
       * @description The pay rate of the doctor
       * @example 100
       */
      payrate: number;
      /**
       * @description About section of the doctor
       * @example Experienced doctor with a focus on patient care
       */
      about: string;
      /**
       * @description First name of the doctor
       * @example John
       */
      firstName: string;
      /**
       * @description Last name of the doctor
       * @example Doe
       */
      lastName: string;
      /**
       * @description Key of the avatar of the doctor
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333.jpg
       */
      avatarKey: string;
      /**
       * @description The phone of the doctor
       * @example +38099561735634
       */
      phone: string;
      /**
       * @description Email of the doctor
       * @example johndoe@mail.com
       */
      email: string;
      /** @description An array of hospitals associated with the doctor */
      hospitals: components['schemas']['ResponseHospitalDto'][];
      /** @description An array of specializations of the doctor */
      specializations: components['schemas']['ResponseSpecializationDto'][];
    };
    PatchDoctorDto: {
      /**
       * @description The pay rate of the doctor
       * @example 100
       */
      payrate: number;
      /**
       * @description About section of the doctor
       * @example Experienced doctor with a focus on patient care
       */
      about: string;
    };
    CreateHospitalDto: {
      /**
       * @description The full name of the hospital is.
       * @example Ichilov and Assuta
       */
      name: string;
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode: number;
    };
    PatchHospitalDto: {
      /**
       * @description The full name of the hospital is.
       * @example Ichilov and Assuta
       */
      name?: string;
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country?: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city?: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode?: number;
    };
    CreateSpecializationDto: {
      /**
       * @description Specialization name.
       * @example Surgeon
       */
      name: string;
    };
    UpdateSpecializationDto: {
      /**
       * @description Specialization name.
       * @example Surgeon
       */
      name?: string;
    };
    ResponseFileDto: {
      /**
       * @description File Name.
       * @example 3b15ba67-d303-413e-a6ea-a11beb9a4c93.png
       */
      name: string;
      /**
       * @description Full link in the S3 storage to get the file.
       * @example https://storage.googleapis.com/bucket/3b15ba67-d303-413e-a6ea-a11beb9a4c93.png
       */
      url: string;
    };
    CreateAppointmentDto: {
      /**
       * @description Unique doctor id.
       * @example 3076f823-537d-4448-8520-c410ccccd58c
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example 02543710-d520-4ccc-8a3f-7a33ac20afed
       */
      patientId: string;
      /**
       * @description The date on which the meeting is scheduled.
       * @example 2024-04-28T12:55:30.888Z
       */
      assignedAt: string;
      /**
       * @description Current status of the appointment.
       * @example PLANNED
       * @enum {string}
       */
      status: 'PENDING_PAYMENT' | 'PLANNED' | 'COMPLETED' | 'CANCELED';
      /**
       * @description Additional comments left by the patient or doctor.
       * @example Get some blood pressure pills.
       */
      notes: string;
      /**
       * @description The unique id of the billed payment.
       * @example 97fd3a5b-7f96-48d7-b0dc-30883820bec5
       */
      paymentInvoiceKey: string;
      /**
       * @description The unique id from the receipt file for the appointment.
       * @example 054cb1f8-e823-42a4-b7e7-3f818d879365
       */
      paymentReceiptKey: string;
      /**
       * @description The time when the appointment should start.
       * @example 2024-04-28T12:55:30.888Z
       */
      startedAt: string;
      /**
       * @description The time when the appointment should end.
       * @example 2024-04-28T12:55:30.888Z
       */
      endedAt: string;
    };
    ResponseAppointmentDto: {
      /**
       * @description Unique appointment id.
       * @example 9b53467a-6319-447e-8abd-b691594bb031
       */
      id: string;
      /**
       * @description Unique doctor id.
       * @example 1f22e859-32e1-428c-9255-e85ce2923a30
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example e4c8d537-6e4d-4168-aa84-88994282b3f7
       */
      patientId: string;
      /**
       * Format: date-time
       * @description The date on which the meeting is scheduled.
       * @example 2024-04-28T12:55:30.887Z
       */
      assignedAt: string;
      /**
       * @description Current status of the appointment.
       * @enum {string}
       */
      status: 'PENDING_PAYMENT' | 'PLANNED' | 'COMPLETED' | 'CANCELED';
      /**
       * @description Additional comments left by the patient or doctor.
       * @example Get some blood pressure pills.
       */
      notes: string;
      /**
       * @description The unique id of the billed payment.
       * @example 1443c59e-9b43-4172-b511-935aa35e3e72
       */
      paymentInvoiceKey: string;
      /** @description The unique id from the receipt file for the appointment. */
      paymentReceiptKey: string;
      /**
       * @description The unique id of the video chat recording.
       * @example 926beefc-79aa-4de3-8a79-db237a08cb50.mp4
       */
      videoRecordKey: string;
      /**
       * @description The time when the appointment should start.
       * @example 2024-04-28T12:55:30.887Z
       */
      startedAt: string;
      /**
       * @description The time when the appointment should end.
       * @example 2024-04-28T12:55:30.887Z
       */
      endedAt: string;
    };
    PatchAppointmentDto: {
      /**
       * @description Unique doctor id.
       * @example 3076f823-537d-4448-8520-c410ccccd58c
       */
      doctorId?: string;
      /**
       * @description Unique patient id.
       * @example 02543710-d520-4ccc-8a3f-7a33ac20afed
       */
      patientId?: string;
      /**
       * @description The date on which the meeting is scheduled.
       * @example 2024-04-28T12:55:30.888Z
       */
      assignedAt?: string;
      /**
       * @description Current status of the appointment.
       * @example PLANNED
       * @enum {string}
       */
      status?: 'PENDING_PAYMENT' | 'PLANNED' | 'COMPLETED' | 'CANCELED';
      /**
       * @description Additional comments left by the patient or doctor.
       * @example Get some blood pressure pills.
       */
      notes?: string;
      /**
       * @description The unique id of the billed payment.
       * @example 97fd3a5b-7f96-48d7-b0dc-30883820bec5
       */
      paymentInvoiceKey?: string;
      /**
       * @description The unique id from the receipt file for the appointment.
       * @example 054cb1f8-e823-42a4-b7e7-3f818d879365
       */
      paymentReceiptKey?: string;
      /**
       * @description The time when the appointment should start.
       * @example 2024-04-28T12:55:30.888Z
       */
      startedAt?: string;
      /**
       * @description The time when the appointment should end.
       * @example 2024-04-28T12:55:30.888Z
       */
      endedAt?: string;
    };
    CreateDeclarationDto: {
      /**
       * @description Unique doctor id.
       * @example 6fb62e24-0af5-472c-9af0-f244294657e5
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example 0e62cfa5-efc3-4ac7-bbd8-f36c2f167f07
       */
      patientId: string;
    };
    ResponseDeclarationDto: {
      /**
       * @description Unique doctor id.
       * @example 6fb62e24-0af5-472c-9af0-f244294657e5
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example 0e62cfa5-efc3-4ac7-bbd8-f36c2f167f07
       */
      patientId: string;
      /**
       * @description Unique declration id.
       * @example 1
       */
      id: number;
    };
    CreateReviewDto: {
      /**
       * @description Text of the review.
       * @example Good doctor, recommended.
       */
      text?: string;
      /**
       * @description Rate of the review.
       * @example 5
       */
      rate?: number;
    };
    ResponseReviewDto: {
      /**
       * @description Unique rating id.
       * @example 18d51138-92d7-463b-a5a4-00580c66f786
       */
      id: string;
      /**
       * @description The rate in review.
       * @example 4
       */
      rate: number;
      /**
       * @description Text in review.
       * @example Experienced doctor with a focus on patient care.
       */
      text: string;
      /**
       * @description Unique doctor id.
       * @example 4372ba52-f677-44d4-ad71-42cfbe764b7b
       */
      doctorId: string;
      /**
       * Format: date-time
       * @description The date when the review was created.
       * @example 2024-04-28T12:55:31.204Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The date when the review was updated.
       * @example 2024-04-28T12:55:31.204Z
       */
      updatedAt: string;
    };
    UnauthorizedResponse: {
      /**
       * @description Detailed description of the error.
       * @example Unauthorized access
       */
      message: string;
      /**
       * @description Error in numeric format.
       * @example 401
       */
      errorCode: number;
    };
    ResponseReviewDtoWithNames: {
      /**
       * @description Unique rating id.
       * @example 18d51138-92d7-463b-a5a4-00580c66f786
       */
      id: string;
      /**
       * @description The rate in review.
       * @example 4
       */
      rate: number;
      /**
       * @description Text in review.
       * @example Experienced doctor with a focus on patient care.
       */
      text: string;
      /**
       * @description Unique doctor id.
       * @example 4372ba52-f677-44d4-ad71-42cfbe764b7b
       */
      doctorId: string;
      /**
       * @description The names of the doctor, when icnludesName prodived.
       * @example {
       *   "user": {
       *     "firstName": "John",
       *     "lastName": "Doe"
       *   }
       * }
       */
      doctor?: Record<string, never>;
      /**
       * @description The names of the patient, when icnludesName provided.
       * @example {
       *   "user": {
       *     "firstName": "John",
       *     "lastName": "Doe"
       *   }
       * }
       */
      patient?: Record<string, never>;
    };
    AvgRateResponse: {
      /**
       * @description Average rating.
       * @example 4.5
       */
      avg: number;
      /**
       * @description Total number of reviews.
       * @example 10
       */
      count: number;
    };
    PatchReviewDto: {
      /**
       * @description Text of the review.
       * @example Good doctor, recommended.
       */
      text?: string;
      /**
       * @description Rate of the review.
       * @example 5
       */
      rate?: number;
    };
    CreateAllergyDto: {
      /**
       * @description Name of allergy.
       * @example Dust
       */
      name: string;
    };
    UpdateAllergyDto: {
      /**
       * @description Name of allergy.
       * @example Dust
       */
      name?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** Login patient */
  AuthController_localLogin: {
    requestBody: {
      content: {
        'application/json': components['schemas']['LocalLoginDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['LocalLoginResponseDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Login patient with MFA */
  AuthController_verifyMFA: {
    requestBody: {
      content: {
        'application/json': components['schemas']['LocalLoginTwoFactorDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Sign up user */
  AuthController_signUpUserFirstStep: {
    requestBody: {
      content: {
        'application/json': components['schemas']['SignUpUserDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseUserDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Sign up patient */
  AuthController_signUpPatientSecondStep: {
    parameters: {
      path: {
        token: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SignUpPatientDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Login with Google */
  AuthController_googleLogin: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Login with Google redirect */
  AuthController_googleLoginRedirect: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Logout */
  AuthController_logout: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Change password */
  AuthController_changePassword: {
    requestBody: {
      content: {
        'application/json': components['schemas']['ChangePasswordDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      500: {
        content: {
          'application/json': components['schemas']['BadRequestException'];
        };
      };
    };
  };
  /** Get patient */
  AuthController_getPatient: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['PatientResponseDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get user */
  UserController_getUser: {
    parameters: {
      path: {
        /**
         * @description Unique user id.
         * @example a6953524-6242-41a4-a136-053fd5b9b990
         */
        id: string;
      };
    };
    responses: {
      /** @description Response if an error occurs while processing a request. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseUserDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete user */
  UserController_deleteUser: {
    parameters: {
      path: {
        /**
         * @description Unique user id.
         * @example fa683b77-d7d4-48f3-8eac-6c3fafdd1c28
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update user */
  UserController_patchUser: {
    parameters: {
      path: {
        /**
         * @description Unique user id.
         * @example ab2e4d2e-0d77-4304-83ee-731146313651
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchUserWithoutCredentialsDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseUserDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create user */
  UserController_createUser: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateUserDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseUserDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get patient */
  PatientController_getPatient: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example 7bc62b06-14aa-4561-b086-89d8c0261d81
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponsePatientDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete patient */
  PatientController_deletePatient: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example fe79e591-aaae-42ff-901e-836e500abbf3
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update patient */
  PatientController_patchPatient: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example 78833dbf-14ce-49b6-a6ad-1c7f1084a960
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchPatientDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponsePatientDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create patient */
  PatientController_createPatient: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePatientDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponsePatientDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get patient allergies */
  PatientController_getPatientAllergies: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example cc224a64-932d-43f6-84dc-042ef50d8f4b
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAllergyDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create patient allergy */
  PatientController_createPatientAllergy: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example e8432d10-abaf-4067-bf08-d3b8e13b43fe
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePatientConditionDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponsePatientAllergyDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get favorites */
  FavoriteController_getFavorites: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseFavoriteDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create favorite */
  FavoriteController_createFavorite: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateFavoriteDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseFavoriteDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get favorite */
  FavoriteController_getFovorite: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 75b62e83-e20c-4295-baa4-7c798d14959a
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseFavoriteDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete favorite */
  FavoriteController_deleteFavorite: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 0b603902-cecb-441b-a866-ebd19fca4ae1
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all doctors */
  DoctorController_getDoctors: {
    parameters: {
      query?: {
        /** @description ID of the hospital to filter doctors by */
        hospitalId?: string;
        /** @description ID of the specialization to filter doctors by */
        specializationId?: string;
        /** @description Search string */
        search?: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDoctorDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create doctor */
  DoctorController_createDoctor: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateDoctorDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDoctorDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all doctors by patient */
  DoctorController_getPatientDoctors: {
    parameters: {
      path: {
        /**
         * @description Unique patient id.
         * @example ee3ec495-bc28-449b-ab54-d37de4aadb77
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDoctorDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get doctor */
  DoctorController_getDoctor: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 20f869fc-e4da-4423-81a9-083904cd361a
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDoctorDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete doctor */
  DoctorController_deleteDoctor: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 85375c25-7d63-4d1d-9600-55995be8a115
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update doctor */
  DoctorController_patchDoctor: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 857b28fa-e633-49c8-bab8-2301e785f03b
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchDoctorDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDoctorDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all hospitals */
  HospitalController_getHospitals: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseHospitalDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create hospital */
  HospitalController_createHospital: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateHospitalDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseHospitalDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get hospital */
  HospitalController_getHospital: {
    parameters: {
      path: {
        /**
         * @description The hospital's unique id.
         * @example d4bdeb3e-bae8-4fc0-ae20-a4c29aaa3233
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseHospitalDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete hospital */
  HospitalController_deleteHospital: {
    parameters: {
      path: {
        /**
         * @description The hospital's unique id.
         * @example e4eaf7a0-f934-47c0-9104-e51f8e00a09d
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update hospital */
  HospitalController_patchHospital: {
    parameters: {
      path: {
        /**
         * @description The hospital's unique id.
         * @example 9bc6f60f-6e12-446d-a4a9-22e915f9840d
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchHospitalDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseHospitalDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all specializations */
  SpecializationController_getSpecializations: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseSpecializationDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
    };
  };
  /** Create specialization */
  SpecializationController_createSpecialization: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSpecializationDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseSpecializationDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
    };
  };
  /** Get specialization */
  SpecializationController_getSpecialization: {
    parameters: {
      path: {
        /**
         * @description Unique specialisation id.
         * @example 93302d68-c7e5-4cb0-8691-56e9c18a3884
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseSpecializationDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
    };
  };
  /** Delete specialization */
  SpecializationController_deleteSpecialization: {
    parameters: {
      path: {
        /**
         * @description Unique specialisation id.
         * @example 11806b4b-fb18-4bf0-a3b7-4699a0fa312a
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
    };
  };
  /** Update specialization */
  SpecializationController_patchSpecialization: {
    parameters: {
      path: {
        /**
         * @description Unique specialisation id.
         * @example 653d2328-3a00-4081-80b1-3aa28222af49
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSpecializationDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseSpecializationDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
    };
  };
  /** Upload file */
  FileController_uploadFile: {
    /** @description The file to be uploaded. */
    requestBody: {
      content: {
        'multipart/form-data': string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseFileDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get file */
  FileController_getFileByName: {
    parameters: {
      path: {
        /**
         * @description Unique file name.
         * @example 6ff58f8f-3fbe-4ff5-bfed-b50044eef9bc.png
         */
        name: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseFileDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete file */
  FileController_deleteFileByName: {
    parameters: {
      path: {
        /**
         * @description Unique file name.
         * @example bf4774c2-2490-4959-a612-8736eade564a.png
         */
        name: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all appointments */
  AppointmentController_getAppointments: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAppointmentDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create an appointment */
  AppointmentController_createAppointment: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAppointmentDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAppointmentDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all appointments by patient id */
  AppointmentController_getAppointmentsByPatientId: {
    parameters: {
      path: {
        /**
         * @description Unique patient id.
         * @example a116f624-ea34-45b6-8aac-3cc0e727e74a
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAppointmentDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all appointments by doctor id */
  AppointmentController_getAppointmentsByDoctorId: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 4f3532a4-2004-492e-a5a1-1a99cbf2cca8
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAppointmentDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get an appointment */
  AppointmentController_getAppointment: {
    parameters: {
      path: {
        /**
         * @description Unique appointment id.
         * @example 306dc70a-0423-4b1a-a1ed-777e018f4ee2
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAppointmentDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete an appointment */
  AppointmentController_deleteAppointment: {
    parameters: {
      path: {
        /**
         * @description Unique appointment id.
         * @example 543a4c8d-cff6-47f5-90d9-3c1130025c7e
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update an appointment */
  AppointmentController_patchAppointment: {
    parameters: {
      path: {
        /**
         * @description Unique appointment id.
         * @example 077ae83e-f394-4369-bdab-9eedee888746
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchAppointmentDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAppointmentDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get declarations */
  DeclarationController_getDeclrations: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDeclarationDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create declaration */
  DeclarationController_createDeclaration: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateDeclarationDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDeclarationDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get declaration */
  DeclarationController_getDeclaration: {
    parameters: {
      path: {
        /**
         * @description Unique declaration id.
         * @example 1
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDeclarationDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete declaration */
  DeclarationController_deleteDeclaration: {
    parameters: {
      path: {
        /**
         * @description Unique declaration id.
         * @example 1
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update declaration */
  DeclarationController_patchDeclaration: {
    parameters: {
      path: {
        /**
         * @description Unique declaration id.
         * @example 1
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateDeclarationDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDeclarationDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get reviews by doctor */
  ReviewController_getReviewsByDoctorId: {
    parameters: {
      path: {
        doctorId: string;
        /**
         * @description Include names in reviews.
         * @example false
         */
        includeNames: string;
        /**
         * @description How many reviews should be skipped.
         * @example 1
         */
        skip: string;
        /**
         * @description How many reviews should be taken.
         * @example 50
         */
        take: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseReviewDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create a new review */
  ReviewController_createReview: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
      path: {
        doctorId: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateReviewDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseReviewDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get reviews */
  ReviewController_getReviews: {
    parameters: {
      path: {
        /**
         * @description Include names in reviews.
         * @example false
         */
        includeNames: string;
        /**
         * @description How many reviews should be skipped.
         * @example 1
         */
        skip: string;
        /**
         * @description How many reviews should be taken.
         * @example 50
         */
        take: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseReviewDtoWithNames'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get the average rating of a doctor */
  ReviewController_getAvgRateByDoctorId: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 79a699f6-3c1b-46cc-8879-bb1513a49f46
         */
        doctorId: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['AvgRateResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get review */
  ReviewController_getReview: {
    parameters: {
      path: {
        /**
         * @description Unique review id.
         * @example 3e720fcf-00ae-42aa-a509-78e5f7d8a0f1
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseReviewDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete a review */
  ReviewController_deleteReview: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
      path: {
        reviewId: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update a review */
  ReviewController_patchReview: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
      path: {
        reviewId: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchReviewDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseReviewDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all allergies */
  AllergyController_getAllergies: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAllergyDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create allergy */
  AllergyController_createAllergy: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAllergyDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAllergyDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get allergy */
  AllergyController_getAllergy: {
    parameters: {
      path: {
        /**
         * @description Unique allergy id.
         * @example 65a17e47-bbcf-47f1-b38b-7932bf4fee17
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAllergyDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete allergy */
  AllergyController_deleteAllergy: {
    parameters: {
      path: {
        /**
         * @description Unique allergy id.
         * @example e151cac8-9b52-417e-8a91-49f625d37c61
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      404: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update allergy */
  AllergyController_patchAllergy: {
    parameters: {
      path: {
        /**
         * @description Unique allergy id.
         * @example 46fd80a0-5378-4c69-af97-c354661a5157
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAllergyDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAllergyDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
}
