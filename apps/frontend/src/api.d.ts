/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/login/patient": {
    /** Login patient */
    post: operations["AuthController_localLogin"];
  };
  "/auth/login/patient/mfa": {
    /** Login patient with MFA */
    post: operations["AuthController_verifyMFA"];
  };
  "/auth/signup": {
    /** Sign up user */
    post: operations["AuthController_signUpUserFirstStep"];
  };
  "/auth/signup/patient/{token}": {
    /** Sign up patient */
    post: operations["AuthController_signUpPatientSecondStep"];
  };
  "/auth/login/google": {
    /** Login with Google */
    get: operations["AuthController_googleLogin"];
  };
  "/auth/login/google/redirect": {
    /** Login with Google redirect */
    get: operations["AuthController_googleLoginRedirect"];
  };
  "/auth/logout": {
    /** Logout */
    get: operations["AuthController_logout"];
  };
  "/auth/password/change": {
    /** Change password */
    post: operations["AuthController_changePassword"];
  };
  "/auth/patient/me": {
    /** Get patient */
    get: operations["AuthController_getPatient"];
  };
  "/user/{id}": {
    /** Get user */
    get: operations["UserController_getUser"];
    /** Delete user */
    delete: operations["UserController_deleteUser"];
    /** Update user */
    patch: operations["UserController_patchUser"];
  };
  "/user": {
    /** Create user */
    post: operations["UserController_createUser"];
  };
  "/patient/{id}": {
    /** Get patient */
    get: operations["PatientController_getPatient"];
    /** Delete patient */
    delete: operations["PatientController_deletePatient"];
    /** Update patient */
    patch: operations["PatientController_patchPatient"];
  };
  "/patient": {
    /** Create patient */
    post: operations["PatientController_createPatient"];
  };
  "/patient/{id}/allergy": {
    /** Get patient allergies */
    get: operations["PatientController_getPatientAllergies"];
    /** Create patient allergy */
    post: operations["PatientController_createPatientAllergy"];
  };
  "/patient/{id}/condition": {
    /** Get patient conditions */
    get: operations["PatientController_getPatientConditions"];
    /** Create patient conditions */
    post: operations["PatientController_createPatientConditions"];
  };
  "/favorite": {
    /** Get favorites */
    get: operations["FavoriteController_getFavorites"];
    /** Create favorite */
    post: operations["FavoriteController_createFavorite"];
  };
  "/favorite/{id}": {
    /** Get favorite */
    get: operations["FavoriteController_getFovorite"];
    /** Delete favorite */
    delete: operations["FavoriteController_deleteFavorite"];
  };
  "/doctor": {
    /** Get all doctors */
    get: operations["DoctorController_getDoctors"];
    /** Create doctor */
    post: operations["DoctorController_createDoctor"];
  };
  "/doctor/doctors/{id}": {
    /** Get all doctors by patient */
    get: operations["DoctorController_getPatientDoctors"];
  };
  "/doctor/doctors/my": {
    /** Get my doctors */
    get: operations["DoctorController_getMyDoctors"];
  };
  "/doctor/{id}": {
    /** Get doctor */
    get: operations["DoctorController_getDoctor"];
    /** Delete doctor */
    delete: operations["DoctorController_deleteDoctor"];
    /** Update doctor */
    patch: operations["DoctorController_patchDoctor"];
  };
  "/hospital": {
    /** Get all hospitals */
    get: operations["HospitalController_getHospitals"];
    /** Create hospital */
    post: operations["HospitalController_createHospital"];
  };
  "/hospital/{id}": {
    /** Get hospital */
    get: operations["HospitalController_getHospital"];
    /** Delete hospital */
    delete: operations["HospitalController_deleteHospital"];
    /** Update hospital */
    patch: operations["HospitalController_patchHospital"];
  };
  "/specialization": {
    /** Get all specializations */
    get: operations["SpecializationController_getSpecializations"];
    /** Create specialization */
    post: operations["SpecializationController_createSpecialization"];
  };
  "/specialization/{id}": {
    /** Get specialization */
    get: operations["SpecializationController_getSpecialization"];
    /** Delete specialization */
    delete: operations["SpecializationController_deleteSpecialization"];
    /** Update specialization */
    patch: operations["SpecializationController_patchSpecialization"];
  };
  "/file/upload": {
    /** Upload file */
    post: operations["FileController_uploadFile"];
  };
  "/file/{name}": {
    /** Get file */
    get: operations["FileController_getFileByName"];
    /** Delete file */
    delete: operations["FileController_deleteFileByName"];
  };
  "/appointment": {
    /** Get all appointments */
    get: operations["AppointmentController_getAppointments"];
    /** Create an appointment */
    post: operations["AppointmentController_createAppointment"];
  };
  "/appointment/patient/{id}": {
    /** Get all appointments by patient id */
    get: operations["AppointmentController_getAppointmentsByPatientId"];
  };
  "/appointment/my": {
    /** Get my appointment */
    get: operations["AppointmentController_getMyAppointments"];
  };
  "/appointment/doctor/{id}": {
    /** Get all appointments by doctor id */
    get: operations["AppointmentController_getAppointmentsByDoctorId"];
  };
  "/appointment/{id}": {
    /** Get an appointment */
    get: operations["AppointmentController_getAppointment"];
    /** Delete an appointment */
    delete: operations["AppointmentController_deleteAppointment"];
    /** Update an appointment */
    patch: operations["AppointmentController_patchAppointment"];
  };
  "/declaration": {
    /** Get declarations */
    get: operations["DeclarationController_getDeclrations"];
    /** Create declaration */
    post: operations["DeclarationController_createDeclaration"];
  };
  "/declaration/{id}": {
    /** Get declaration */
    get: operations["DeclarationController_getDeclaration"];
    /** Delete declaration */
    delete: operations["DeclarationController_deleteDeclaration"];
    /** Update declaration */
    patch: operations["DeclarationController_patchDeclaration"];
  };
  "/review/doctor/{doctorId}": {
    /** Get reviews by doctor */
    get: operations["ReviewController_getReviewsByDoctorId"];
    /** Create a new review */
    post: operations["ReviewController_createReview"];
  };
  "/review": {
    /** Get reviews */
    get: operations["ReviewController_getReviews"];
  };
  "/review/doctor/{doctorId}/average": {
    /** Get the average rating of a doctor */
    get: operations["ReviewController_getAvgRateByDoctorId"];
  };
  "/review/{id}": {
    /** Get review */
    get: operations["ReviewController_getReview"];
  };
  "/review/{reviewId}": {
    /** Delete a review */
    delete: operations["ReviewController_deleteReview"];
    /** Update a review */
    patch: operations["ReviewController_patchReview"];
  };
  "/condition": {
    /**
     * Get all conditions
     * @description This endpoint retrieves all conditions.
     */
    get: operations["ConditionController_findAll"];
    /**
     * Create a new condition
     * @description This endpoint creates a new condition.
     */
    post: operations["ConditionController_create"];
  };
  "/condition/{id}": {
    /**
     * Get a condition by ID
     * @description This endpoint retrieves a condition object by ID.
     */
    get: operations["ConditionController_findOne"];
    /**
     * Delete a condition by ID
     * @description This endpoint deletes a condition object by ID.
     */
    delete: operations["ConditionController_remove"];
    /**
     * Update a condition by ID
     * @description This endpoint updates a condition object by ID.
     */
    patch: operations["ConditionController_update"];
  };
  "/allergy": {
    /** Get all allergies */
    get: operations["AllergyController_getAllergies"];
    /** Create allergy */
    post: operations["AllergyController_createAllergy"];
  };
  "/allergy/{id}": {
    /** Get allergy */
    get: operations["AllergyController_getAllergy"];
    /** Delete allergy */
    delete: operations["AllergyController_deleteAllergy"];
    /** Update allergy */
    patch: operations["AllergyController_patchAllergy"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    LocalLoginDto: {
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description User password.
       * @example password
       */
      password: string;
    };
    LocalLoginResponseDto: {
      /**
       * @description Whether two-factor authorization is enabled for the user.
       * @example false
       */
      isMFAEnabled: boolean;
    };
    ErrorValidationObject: {
      /**
       * @description The name of the field where validation failed.
       * @example name
       */
      proparty: string;
      /**
       * @description Detailed description of the error.
       * @example Name is too short
       */
      message: string;
    };
    BadRequestResponse: {
      /**
       * @description Error in numeric format.
       * @example 404
       */
      statusCode: number;
      /** @description Detailed description of the error. */
      message: string | string[];
      /** @description A list of all fields that failed validation. */
      errors: components["schemas"]["ErrorValidationObject"][];
    };
    ClassicNestResponse: {
      /**
       * @description Error in numeric format.
       * @example 404
       */
      statusCode: number;
      /** @description Detailed description of the error. */
      message: string | string[];
      /**
       * @description Brief description of the error.
       * @example The name must be longer than 4 characters.
       */
      error?: string;
    };
    LocalLoginTwoFactorDto: {
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description User password.
       * @example password
       */
      password: string;
      /**
       * @description One-time unique authorization code.
       * @example 236854
       */
      code: string;
    };
    SignUpUserDto: {
      /**
       * @description The user's real first name.
       * @example John
       */
      firstName: string;
      /**
       * @description The user's real last name.
       * @example Doe
       */
      lastName: string;
      /**
       * @description The user's phone number in national format.
       * @example +380000000000
       */
      phone: string;
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description User password.
       * @example password
       */
      password?: string;
      /**
       * @description Unique Google Id of the user.
       * @example G-123456789
       */
      googleId?: string;
      /**
       * @description Link to the user image.
       * @example https://imgur.com/2Bmq0jd
       */
      avatarImgUrl?: string;
    };
    ResponseUserDto: {
      /**
       * @description Unique user id.
       * @example 207980cc-24e4-4793-b7a4-d50d137f8ae9
       */
      id: string;
      /**
       * @description The user's real first name.
       * @example John
       */
      firstName: string;
      /**
       * @description The user's real last name.
       * @example Doe
       */
      lastName: string;
      /**
       * @description The user's phone number in national format.
       * @example +380000000000
       */
      phone: string;
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description Whether the user has confirmed his mail in the service.
       * @example false
       */
      emailVerified: boolean;
      /**
       * @description Unique Google Id of the user.
       * @example G-123456789
       */
      googleId?: string;
      /**
       * @description The unique file id of the file in S3 storage.
       * @example 21b8bd62-059d-494c-a3f2-1c27fc298d33.jpeg
       */
      avatarKey: string;
    };
    SignUpPatientDto: {
      /**
       * @description Patient's weight.
       * @example 65
       */
      weight: number;
      /**
       * @description Patient height.
       * @example 185
       */
      height: number;
      /**
       * @description Patient's age.
       * @example 35
       */
      age: number;
      /**
       * @description The patient's blood type.
       * @example AB_MINUS
       * @enum {string}
       */
      bloodType: "O_PLUS" | "O_MINUS" | "A_PLUS" | "A_MINUS" | "B_PLUS" | "B_MINUS" | "AB_PLUS" | "AB_MINUS";
      /**
       * @description Patient gender.
       * @example MALE
       * @enum {string}
       */
      gender: "MALE" | "FEMALE";
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description Patient's apartment number.
       * @example 35A
       */
      apartment?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode?: number;
    };
    UnauthorizedResponse: {
      /**
       * @description Detailed description of the error.
       * @example Unauthorized
       */
      message: string;
      /**
       * @description Error in numeric format.
       * @example 401
       */
      statusCode: number;
    };
    ChangePasswordDto: {
      /**
       * @description Old user password.
       * @example password
       */
      oldPassword: string;
      /**
       * @description New user password.
       * @example pa$$w0rd
       */
      newPassword: string;
    };
    BadRequestException: Record<string, never>;
    ResponseConditionDto: {
      /**
       * @description Condition id
       * @example 22d38a2e-f92d-4bb1-8e50-e85427df4341
       */
      id: string;
      /**
       * @description Condition name
       * @example Asthma
       */
      name: string;
    };
    ResponsePatientDto: {
      /**
       * @description Unique patient id.
       * @example 56e9cab3-c0e0-4fa1-96e6-ae3f350984ba
       */
      id: string;
      /**
       * @description The unique user id of the user to which the patient is bound.
       * @example a10b544a-c0b8-4564-87c3-d5807f4884ee
       */
      userId: string;
      /**
       * @description Patient's weight.
       * @example 65
       */
      weight: number;
      /**
       * @description Patient height.
       * @example 185
       */
      height: number;
      /**
       * @description Patient's age.
       * @example 35
       */
      age: number;
      /**
       * @description The patient's blood type.
       * @example AB_MINUS
       * @enum {string}
       */
      bloodType: "O_PLUS" | "O_MINUS" | "A_PLUS" | "A_MINUS" | "B_PLUS" | "B_MINUS" | "AB_PLUS" | "AB_MINUS";
      /**
       * @description Patient gender.
       * @example MALE
       * @enum {string}
       */
      gender: "MALE" | "FEMALE";
      /**
       * @description A unique key to the patient identification file.
       * @example 93ce68ec-1dc9-4b10-bd49-d1efd4249781
       */
      identityCardKey: string;
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description Patient's apartment number.
       * @example 35A
       */
      apartment?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode: number;
      /**
       * @description Status of alerts to the patient's email.
       * @default false
       */
      emailNotificationToggle: boolean;
      /**
       * @description Whether to request a two-factor confirmation when making a payment.
       * @example false
       */
      requestBillPaymentApproval: boolean;
      /** @description The two factor authentication toggle of the patient */
      twoFactorAuthToggle: boolean;
      /**
       * @description First name of the doctor
       * @example John
       */
      firstName: string;
      /**
       * @description Last name of the doctor
       * @example Doe
       */
      lastName: string;
      /**
       * @description Key of the avatar of the doctor
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333.jpg
       */
      avatarKey: string;
      /**
       * @description The phone of the doctor
       * @example +38099561735634
       */
      phone: string;
      /**
       * @description Email of the doctor
       * @example johndoe@mail.com
       */
      email: string;
      /**
       * @description List of conditions of the patient.
       * @example {
       *   "id": "a5373aa2-4148-4ba5-8802-f1e0cee70b24",
       *   "name": "Diabetes"
       * }
       */
      conditions: components["schemas"]["ResponseConditionDto"][];
    };
    CreateUserDto: {
      /**
       * @description The user's real first name.
       * @example John
       */
      firstName: string;
      /**
       * @description The user's real last name.
       * @example Doe
       */
      lastName: string;
      /**
       * @description The user's phone number in national format.
       * @example +380000000000
       */
      phone: string;
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description User password.
       * @example password
       */
      password?: string;
      /**
       * @description Unique Google Id of the user.
       * @example G-123456789
       */
      googleId?: string;
      /**
       * @description The unique file id of the file in S3 storage.
       * @example e824025e-29e6-4210-9444-99ac5581b80d.jpeg
       */
      avatarKey: string;
    };
    PatchUserWithoutCredentialsDto: {
      /**
       * @description The user's real first name.
       * @example John
       */
      firstName?: string;
      /**
       * @description The user's real last name.
       * @example Doe
       */
      lastName?: string;
      /**
       * @description The user's phone number in national format.
       * @example +380000000000
       */
      phone?: string;
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email?: string;
      /**
       * @description The unique file id of the file in S3 storage.
       * @example e824025e-29e6-4210-9444-99ac5581b80d.jpeg
       */
      avatarKey?: string;
    };
    CreatePatientDto: {
      /**
       * @description The unique user id of the user to which the patient is bound.
       * @example 48b076e4-c6e5-4c2c-98af-8fd0b3392504
       */
      userId: string;
      /**
       * @description Patient's weight.
       * @example 65
       */
      weight: number;
      /**
       * @description Patient height.
       * @example 185
       */
      height: number;
      /**
       * @description Patient's age.
       * @example 35
       */
      age: number;
      /**
       * @description The patient's blood type.
       * @example AB_MINUS
       * @enum {string}
       */
      bloodType: "O_PLUS" | "O_MINUS" | "A_PLUS" | "A_MINUS" | "B_PLUS" | "B_MINUS" | "AB_PLUS" | "AB_MINUS";
      /**
       * @description Patient gender.
       * @example MALE
       * @enum {string}
       */
      gender: "MALE" | "FEMALE";
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description Patient's apartment number.
       * @example 35A
       */
      apartment?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode?: number;
    };
    PatchPatientDto: {
      /**
       * @description Patient's weight.
       * @example 65
       */
      weight?: number;
      /**
       * @description Patient height.
       * @example 185
       */
      height?: number;
      /**
       * @description Patient's age.
       * @example 35
       */
      age?: number;
      /**
       * @description The patient's blood type.
       * @example AB_MINUS
       * @enum {string}
       */
      bloodType?: "O_PLUS" | "O_MINUS" | "A_PLUS" | "A_MINUS" | "B_PLUS" | "B_MINUS" | "AB_PLUS" | "AB_MINUS";
      /**
       * @description Patient gender.
       * @example MALE
       * @enum {string}
       */
      gender?: "MALE" | "FEMALE";
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country?: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city?: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street?: string;
      /**
       * @description Patient's apartment number.
       * @example 35A
       */
      apartment?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode?: number;
      /**
       * @description Unique declaration id.
       * @example 12234
       */
      declarationId?: string;
      /**
       * @description A unique key to the patient identification file.
       * @example 18382ef1-e539-464e-ace4-84606e6dd6fd
       */
      identityCardKey?: string;
      /**
       * @description Status of alerts to the patient's email.
       * @default false
       */
      emailNotificationToggle?: boolean;
      /**
       * @description Status of alerts on the patient's text messages.
       * @example true
       */
      twoFactorAuthToggle?: boolean;
      /**
       * @description Whether to request a two-factor confirmation when making a payment.
       * @example false
       */
      requestBillPaymentApproval?: boolean;
    };
    CreatePatientAllergyDto: {
      /**
       * @description Unique allergy id.
       * @example 6a19b08c-9f06-481a-b227-022937a22a02
       */
      allergyId: string;
    };
    ResponsePatientAllergyDto: {
      /**
       * @description Unique patient allergy id.
       * @example 91294b95-5372-4708-8a9e-45cc6a1205fe
       */
      id: string;
      /**
       * @description Unique patient id.
       * @example bd27509c-0a99-482e-bbd7-b90655e4fe14
       */
      patientId: string;
      /**
       * @description Unique allergy id.
       * @example 6fbd35a5-be78-4843-993b-30023a627e57
       */
      allergyId: string;
    };
    ResponseAllergyDto: {
      /**
       * @description Unique allergy id.
       * @example 320b09c5-6b0c-40c3-a06b-f0d74c306054
       */
      id: string;
      /**
       * @description Name of allergy.
       * @example Dust
       */
      name: string;
    };
    CreatePatientConditionDto: {
      /** @description Id of condition */
      conditionId: string;
    };
    CreateFavoriteDto: {
      /**
       * @description Unique doctor id.
       * @example 3a3b6830-3e56-4e71-8775-26c365bd658d
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example 3d4d65e8-60da-4622-abd7-622ae7f407c5
       */
      patientId: string;
    };
    ResponseFavoriteDto: {
      /**
       * @description Unique doctor id.
       * @example 3a3b6830-3e56-4e71-8775-26c365bd658d
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example 3d4d65e8-60da-4622-abd7-622ae7f407c5
       */
      patientId: string;
      /**
       * @description Unique favorite id.
       * @example cf513252-353c-4548-a123-f84572682fe4
       */
      id: string;
    };
    CreateDoctorDto: {
      /**
       * @description Unique user id.
       * @example f9e40432-effa-4bf8-9d38-70a4332d8ef9
       */
      userId: string;
      /**
       * @description Doctor's hourly rate.
       * @example 100
       */
      payrate: number;
      /**
       * @description A full description of the doctor.
       * @example Experienced doctor with a focus on patient care.
       */
      about: string;
      /**
       * @description A list of ids specialties that the doctor covers.
       * @example [
       *   "787510a6-0439-474b-be2c-ea4b39467efc"
       * ]
       */
      specializationIds: string[];
      /**
       * @description List of hospitals where the doctor works.
       * @example [
       *   "bf655e4a-c049-4070-b6e4-34eb9b8d306f"
       * ]
       */
      hospitalIds: string[];
    };
    ResponseHospitalDto: {
      /**
       * @description The hospital's unique id.
       * @example ce4ef969-8476-4c0f-ad7f-e1633eed50a0
       */
      id: string;
      /**
       * @description The full name of the hospital is.
       * @example Ichilov and Assuta
       */
      name: string;
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode: number;
    };
    ResponseSpecializationDto: {
      /**
       * @description Unique specialisation id.
       * @example 269ed033-9949-432d-83da-dc2804e79d8c
       */
      id: string;
      /**
       * @description Specialization name.
       * @example Surgeon
       */
      name: string;
    };
    ResponseDoctorDto: {
      /**
       * @description The ID of the doctor
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333
       */
      id: string;
      /**
       * @description The ID of the user associated with the doctor
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333
       */
      userId: string;
      /**
       * @description The pay rate of the doctor
       * @example 100
       */
      payrate: number;
      /**
       * @description About section of the doctor
       * @example Experienced doctor with a focus on patient care
       */
      about: string;
      /**
       * @description First name of the doctor
       * @example John
       */
      firstName: string;
      /**
       * @description Last name of the doctor
       * @example Doe
       */
      lastName: string;
      /**
       * @description Key of the avatar of the doctor
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333.jpg
       */
      avatarKey: string;
      /**
       * @description The phone of the doctor
       * @example +38099561735634
       */
      phone: string;
      /**
       * @description Email of the doctor
       * @example johndoe@mail.com
       */
      email: string;
      /** @description An array of hospitals associated with the doctor */
      hospitals: components["schemas"]["ResponseHospitalDto"][];
      /** @description An array of specializations of the doctor */
      specializations: components["schemas"]["ResponseSpecializationDto"][];
    };
    PatchDoctorDto: {
      /**
       * @description The pay rate of the doctor
       * @example 100
       */
      payrate?: number;
      /**
       * @description About section of the doctor
       * @example Experienced doctor with a focus on patient care
       */
      about?: string;
    };
    CreateHospitalDto: {
      /**
       * @description The full name of the hospital is.
       * @example Ichilov and Assuta
       */
      name: string;
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode: number;
    };
    PatchHospitalDto: {
      /**
       * @description The full name of the hospital is.
       * @example Ichilov and Assuta
       */
      name?: string;
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country?: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city?: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode?: number;
    };
    CreateSpecializationDto: {
      /**
       * @description Specialization name.
       * @example Surgeon
       */
      name: string;
    };
    UpdateSpecializationDto: {
      /**
       * @description Specialization name.
       * @example Surgeon
       */
      name?: string;
    };
    ResponseFileDto: {
      /**
       * @description File Name.
       * @example 2377ab82-6564-4776-8a89-6e5cc4c171da.png
       */
      name: string;
      /**
       * @description Full link in the S3 storage to get the file.
       * @example https://storage.googleapis.com/bucket/2377ab82-6564-4776-8a89-6e5cc4c171da.png
       */
      url: string;
    };
    CreateAppointmentDto: {
      /**
       * @description Unique doctor id.
       * @example 25f6b9ac-1f19-4e1f-afc0-f98ca2f20dcb
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example 04e1aed2-e85d-45f6-902a-574dead92983
       */
      patientId: string;
      /**
       * @description The date on which the meeting is scheduled.
       * @example 2024-04-29T13:36:12.639Z
       */
      assignedAt: string;
      /**
       * @description Current status of the appointment.
       * @example PLANNED
       * @enum {string}
       */
      status: "PENDING_PAYMENT" | "PLANNED" | "COMPLETED" | "CANCELED";
      /**
       * @description Additional comments left by the patient or doctor.
       * @example Get some blood pressure pills.
       */
      notes?: string;
      /**
       * @description The unique Id of the billed payment.
       * @example 5a063a46-7d33-42f8-8a89-d89ed433f99c
       */
      paymentInvoiceKey?: string;
      /**
       * @description The unique id of the payment receipt.
       * @example 1fdd7a2f-30e4-42cc-9176-b201e71c0d03
       */
      paymentReceiptKey?: string;
      /** @description The date and time the appointment started */
      startedAt?: string;
      /** @description The date and time the appointment ended */
      endedAt?: string;
    };
    ResponseAppointmentDto: {
      /**
       * @description Unique appointment id.
       * @example f8ef7dba-53c0-47f0-aadb-6f0fe5d586dd
       */
      id: string;
      /**
       * @description Unique doctor id.
       * @example 95e56be5-67f9-4cdb-b8a8-034383aaadc7
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example 19f5e8c0-a90d-4414-a358-a6a380bb812d
       */
      patientId: string;
      /**
       * Format: date-time
       * @description The date on which the meeting is scheduled.
       * @example 2024-04-29T13:36:12.637Z
       */
      assignedAt: string;
      /**
       * @description Current status of the appointment.
       * @enum {string}
       */
      status: "PENDING_PAYMENT" | "PLANNED" | "COMPLETED" | "CANCELED";
      /**
       * @description Additional comments left by the patient or doctor.
       * @example Get some blood pressure pills.
       */
      notes: string;
      /**
       * @description The unique id of the billed payment.
       * @example 720e0b64-d725-4d5e-a22e-cfb0baae05ef
       */
      paymentInvoiceKey: string;
      /** @description The unique id from the receipt file for the appointment. */
      paymentReceiptKey: string;
      /**
       * @description The unique id of the video chat recording.
       * @example 24c102a3-fc41-4cea-a97a-efda64c0fccb.mp4
       */
      videoRecordKey: string;
      /**
       * @description The time when the appointment should start.
       * @example 2024-04-29T13:36:12.637Z
       */
      startedAt: string;
      /**
       * @description The time when the appointment should end.
       * @example 2024-04-29T13:36:12.637Z
       */
      endedAt: string;
    };
    PatchAppointmentDto: {
      /**
       * @description Unique doctor id.
       * @example 25f6b9ac-1f19-4e1f-afc0-f98ca2f20dcb
       */
      doctorId?: string;
      /**
       * @description Unique patient id.
       * @example 04e1aed2-e85d-45f6-902a-574dead92983
       */
      patientId?: string;
      /**
       * @description The date on which the meeting is scheduled.
       * @example 2024-04-29T13:36:12.639Z
       */
      assignedAt?: string;
      /**
       * @description Current status of the appointment.
       * @example PLANNED
       * @enum {string}
       */
      status?: "PENDING_PAYMENT" | "PLANNED" | "COMPLETED" | "CANCELED";
      /**
       * @description Additional comments left by the patient or doctor.
       * @example Get some blood pressure pills.
       */
      notes?: string;
      /**
       * @description The unique Id of the billed payment.
       * @example 5a063a46-7d33-42f8-8a89-d89ed433f99c
       */
      paymentInvoiceKey?: string;
      /**
       * @description The unique id of the payment receipt.
       * @example 1fdd7a2f-30e4-42cc-9176-b201e71c0d03
       */
      paymentReceiptKey?: string;
      /** @description The date and time the appointment started */
      startedAt?: string;
      /** @description The date and time the appointment ended */
      endedAt?: string;
    };
    CreateDeclarationDto: {
      /**
       * @description Unique doctor id.
       * @example e6e7312c-5d17-431f-bcbd-6af08237998a
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example 6e43b6d1-11af-4918-a4d9-9265f154ef92
       */
      patientId: string;
    };
    ResponseDeclarationDto: {
      /**
       * @description Unique doctor id.
       * @example e6e7312c-5d17-431f-bcbd-6af08237998a
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example 6e43b6d1-11af-4918-a4d9-9265f154ef92
       */
      patientId: string;
      /**
       * @description Unique declration id.
       * @example 1
       */
      id: number;
    };
    CreateReviewDto: {
      /**
       * @description Text of the review.
       * @example Good doctor, recommended.
       */
      text?: string;
      /**
       * @description Rate of the review.
       * @example 5
       */
      rate?: number;
    };
    ResponseReviewDto: {
      /**
       * @description Unique rating id.
       * @example 35b4ac89-dd6d-40c0-96c7-c6fdbbb0c52c
       */
      id: string;
      /**
       * @description The rate in review.
       * @example 4
       */
      rate: number;
      /**
       * @description Text in review.
       * @example Experienced doctor with a focus on patient care.
       */
      text: string;
      /**
       * @description Unique doctor id.
       * @example 451d8138-6153-4c03-9cd4-23068354164d
       */
      doctorId: string;
      /**
       * Format: date-time
       * @description The date when the review was created.
       * @example 2024-04-29T13:36:13.745Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The date when the review was updated.
       * @example 2024-04-29T13:36:13.745Z
       */
      updatedAt: string;
    };
    ResponseReviewDtoWithNames: {
      /**
       * @description Unique rating id.
       * @example 35b4ac89-dd6d-40c0-96c7-c6fdbbb0c52c
       */
      id: string;
      /**
       * @description The rate in review.
       * @example 4
       */
      rate: number;
      /**
       * @description Text in review.
       * @example Experienced doctor with a focus on patient care.
       */
      text: string;
      /**
       * @description Unique doctor id.
       * @example 451d8138-6153-4c03-9cd4-23068354164d
       */
      doctorId: string;
      /**
       * @description The names of the doctor, when icnludesName prodived.
       * @example {
       *   "user": {
       *     "firstName": "John",
       *     "lastName": "Doe"
       *   }
       * }
       */
      doctor?: Record<string, never>;
      /**
       * @description The names of the patient, when icnludesName provided.
       * @example {
       *   "user": {
       *     "firstName": "John",
       *     "lastName": "Doe"
       *   }
       * }
       */
      patient?: Record<string, never>;
    };
    AvgRateResponse: {
      /**
       * @description Average rating.
       * @example 4.5
       */
      avg: number;
      /**
       * @description Total number of reviews.
       * @example 10
       */
      count: number;
    };
    PatchReviewDto: {
      /**
       * @description Text of the review.
       * @example Good doctor, recommended.
       */
      text?: string;
      /**
       * @description Rate of the review.
       * @example 5
       */
      rate?: number;
    };
    CreateConditionDto: {
      /**
       * @description Condition name
       * @example Asthma
       */
      name: string;
    };
    ResponseCondtionDto: {
      /**
       * @description Condition id
       * @example 1
       */
      id: string;
      /**
       * @description Condition name
       * @example Asthma
       */
      name: string;
    };
    UpdateConditionDto: {
      /**
       * @description Condition name
       * @example Asthma
       */
      name?: string;
    };
    CreateAllergyDto: {
      /**
       * @description Name of allergy.
       * @example Dust
       */
      name: string;
    };
    UpdateAllergyDto: {
      /**
       * @description Name of allergy.
       * @example Dust
       */
      name?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Login patient */
  AuthController_localLogin: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LocalLoginDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["LocalLoginResponseDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Login patient with MFA */
  AuthController_verifyMFA: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LocalLoginTwoFactorDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Sign up user */
  AuthController_signUpUserFirstStep: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignUpUserDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseUserDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Sign up patient */
  AuthController_signUpPatientSecondStep: {
    parameters: {
      path: {
        token: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignUpPatientDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Login with Google */
  AuthController_googleLogin: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Login with Google redirect */
  AuthController_googleLoginRedirect: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Logout */
  AuthController_logout: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Change password */
  AuthController_changePassword: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangePasswordDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["BadRequestException"];
        };
      };
    };
  };
  /** Get patient */
  AuthController_getPatient: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponsePatientDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get user */
  UserController_getUser: {
    parameters: {
      path: {
        /**
         * @description Unique user id.
         * @example 472fd81f-f838-4b21-be50-2ce636781504
         */
        id: string;
      };
    };
    responses: {
      /** @description Response if an error occurs while processing a request. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseUserDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Delete user */
  UserController_deleteUser: {
    parameters: {
      path: {
        /**
         * @description Unique user id.
         * @example 1181d2e0-8249-4fcb-90c2-677034d2bb8e
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Update user */
  UserController_patchUser: {
    parameters: {
      path: {
        /**
         * @description Unique user id.
         * @example f00fe17c-b32c-439f-893b-1355dc471642
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchUserWithoutCredentialsDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseUserDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Create user */
  UserController_createUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseUserDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get patient */
  PatientController_getPatient: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example de7ce2d5-4800-4f82-9674-c580efca1290
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponsePatientDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Delete patient */
  PatientController_deletePatient: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example 44a98164-d6c3-42fe-a68d-8dc0f7ecfdbd
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Update patient */
  PatientController_patchPatient: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example c4f04c22-1da3-4a4f-998f-559925793b28
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchPatientDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponsePatientDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Create patient */
  PatientController_createPatient: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePatientDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponsePatientDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get patient allergies */
  PatientController_getPatientAllergies: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example 115e9996-7f4f-438a-95d6-d7364cf48332
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAllergyDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Create patient allergy */
  PatientController_createPatientAllergy: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example 61c55617-fb13-4dc4-a9b1-224bb62fdc28
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePatientAllergyDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponsePatientAllergyDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get patient conditions */
  PatientController_getPatientConditions: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example 3d78a00a-ae8a-4c9a-9b57-bdb575248fcb
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseConditionDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Create patient conditions */
  PatientController_createPatientConditions: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example f734f010-fdb8-44b8-9cab-9be268547b52
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePatientConditionDto"][];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get favorites */
  FavoriteController_getFavorites: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseFavoriteDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Create favorite */
  FavoriteController_createFavorite: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateFavoriteDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseFavoriteDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get favorite */
  FavoriteController_getFovorite: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 31fc1a64-c5b2-403f-a942-3121ae6bb2ca
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseFavoriteDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Delete favorite */
  FavoriteController_deleteFavorite: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 306cda78-37e1-4ab7-b744-d880b8ca8144
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get all doctors */
  DoctorController_getDoctors: {
    parameters: {
      query?: {
        /** @description ID of the hospital to filter doctors by */
        hospitalId?: string;
        /** @description ID of the specialization to filter doctors by */
        specializationId?: string;
        /** @description Search string */
        search?: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDoctorDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Create doctor */
  DoctorController_createDoctor: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateDoctorDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDoctorDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get all doctors by patient */
  DoctorController_getPatientDoctors: {
    parameters: {
      path: {
        /**
         * @description Unique patient id.
         * @example bac03364-b697-433d-9fdf-9e1be1988f05
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDoctorDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get my doctors */
  DoctorController_getMyDoctors: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDoctorDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get doctor */
  DoctorController_getDoctor: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example c7d85e9f-cd7e-4234-b938-9b3b76218b74
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDoctorDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Delete doctor */
  DoctorController_deleteDoctor: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 1f2d3609-9ce9-4b45-8430-1893d0133850
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Update doctor */
  DoctorController_patchDoctor: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 4f3848b1-59cd-4397-8dc4-5ef102bc6c88
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchDoctorDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDoctorDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get all hospitals */
  HospitalController_getHospitals: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseHospitalDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Create hospital */
  HospitalController_createHospital: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateHospitalDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseHospitalDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get hospital */
  HospitalController_getHospital: {
    parameters: {
      path: {
        /**
         * @description The hospital's unique id.
         * @example 02bb74dd-0c3b-4269-9ff2-4e4854cc6d44
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseHospitalDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Delete hospital */
  HospitalController_deleteHospital: {
    parameters: {
      path: {
        /**
         * @description The hospital's unique id.
         * @example 40e85a06-a4d3-412f-93fc-6e5c385fb91a
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Update hospital */
  HospitalController_patchHospital: {
    parameters: {
      path: {
        /**
         * @description The hospital's unique id.
         * @example d55aba67-e5d0-435d-8c1c-fb5ad85f2b30
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchHospitalDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseHospitalDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get all specializations */
  SpecializationController_getSpecializations: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseSpecializationDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
    };
  };
  /** Create specialization */
  SpecializationController_createSpecialization: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSpecializationDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseSpecializationDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
    };
  };
  /** Get specialization */
  SpecializationController_getSpecialization: {
    parameters: {
      path: {
        /**
         * @description Unique specialisation id.
         * @example 19fae14d-5cb3-429c-bb4e-4024563439a9
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseSpecializationDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
    };
  };
  /** Delete specialization */
  SpecializationController_deleteSpecialization: {
    parameters: {
      path: {
        /**
         * @description Unique specialisation id.
         * @example 18481496-76a1-4907-9f56-8e87e0ecf9ff
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
    };
  };
  /** Update specialization */
  SpecializationController_patchSpecialization: {
    parameters: {
      path: {
        /**
         * @description Unique specialisation id.
         * @example 5c65675e-0d41-405f-995e-0b652028b507
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSpecializationDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseSpecializationDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
    };
  };
  /** Upload file */
  FileController_uploadFile: {
    /** @description The file to be uploaded. */
    requestBody: {
      content: {
        "multipart/form-data": string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseFileDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get file */
  FileController_getFileByName: {
    parameters: {
      path: {
        /**
         * @description Unique file name.
         * @example 93766fd2-c9da-48b7-b0a6-e62bcaf52923.png
         */
        name: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseFileDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Delete file */
  FileController_deleteFileByName: {
    parameters: {
      path: {
        /**
         * @description Unique file name.
         * @example 0f259efe-3fe3-4cc9-a01a-839f85cfb962.png
         */
        name: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get all appointments */
  AppointmentController_getAppointments: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAppointmentDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Create an appointment */
  AppointmentController_createAppointment: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAppointmentDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAppointmentDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get all appointments by patient id */
  AppointmentController_getAppointmentsByPatientId: {
    parameters: {
      path: {
        /**
         * @description Unique patient id.
         * @example bf738fa5-db05-47d3-9a48-5f0345b87148
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAppointmentDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get my appointment */
  AppointmentController_getMyAppointments: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAppointmentDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get all appointments by doctor id */
  AppointmentController_getAppointmentsByDoctorId: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 3f0443b3-7ab7-4b38-8f9c-71ed320b744d
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAppointmentDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get an appointment */
  AppointmentController_getAppointment: {
    parameters: {
      path: {
        /**
         * @description Unique appointment id.
         * @example 4c08a815-7c65-46cf-ae09-54319a679f43
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAppointmentDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Delete an appointment */
  AppointmentController_deleteAppointment: {
    parameters: {
      path: {
        /**
         * @description Unique appointment id.
         * @example 395c5386-ce5d-4556-8dfb-d02c459c60d5
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Update an appointment */
  AppointmentController_patchAppointment: {
    parameters: {
      path: {
        /**
         * @description Unique appointment id.
         * @example ba035458-eaf0-48b4-8612-cc41ce8fa972
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchAppointmentDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAppointmentDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get declarations */
  DeclarationController_getDeclrations: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDeclarationDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Create declaration */
  DeclarationController_createDeclaration: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateDeclarationDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDeclarationDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get declaration */
  DeclarationController_getDeclaration: {
    parameters: {
      path: {
        /**
         * @description Unique declaration id.
         * @example 1
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDeclarationDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Delete declaration */
  DeclarationController_deleteDeclaration: {
    parameters: {
      path: {
        /**
         * @description Unique declaration id.
         * @example 1
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Update declaration */
  DeclarationController_patchDeclaration: {
    parameters: {
      path: {
        /**
         * @description Unique declaration id.
         * @example 1
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateDeclarationDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDeclarationDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get reviews by doctor */
  ReviewController_getReviewsByDoctorId: {
    parameters: {
      path: {
        doctorId: string;
        /**
         * @description Include names in reviews.
         * @example false
         */
        includeNames: string;
        /**
         * @description How many reviews should be skipped.
         * @example 1
         */
        skip: string;
        /**
         * @description How many reviews should be taken.
         * @example 50
         */
        take: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseReviewDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Create a new review */
  ReviewController_createReview: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
      path: {
        doctorId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateReviewDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseReviewDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get reviews */
  ReviewController_getReviews: {
    parameters: {
      path: {
        /**
         * @description Include names in reviews.
         * @example false
         */
        includeNames: string;
        /**
         * @description How many reviews should be skipped.
         * @example 1
         */
        skip: string;
        /**
         * @description How many reviews should be taken.
         * @example 50
         */
        take: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseReviewDtoWithNames"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get the average rating of a doctor */
  ReviewController_getAvgRateByDoctorId: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 546d77c7-f152-47c0-9bad-edd0b4d85287
         */
        doctorId: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["AvgRateResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get review */
  ReviewController_getReview: {
    parameters: {
      path: {
        /**
         * @description Unique review id.
         * @example 3304c533-a833-4b56-9912-558f462b9e12
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseReviewDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Delete a review */
  ReviewController_deleteReview: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
      path: {
        reviewId: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Update a review */
  ReviewController_patchReview: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
      path: {
        reviewId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchReviewDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseReviewDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Get all conditions
   * @description This endpoint retrieves all conditions.
   */
  ConditionController_findAll: {
    responses: {
      /** @description Return conditions list */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseCondtionDto"][];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Create a new condition
   * @description This endpoint creates a new condition.
   */
  ConditionController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateConditionDto"];
      };
    };
    responses: {
      /** @description Condition created */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseCondtionDto"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Get a condition by ID
   * @description This endpoint retrieves a condition object by ID.
   */
  ConditionController_findOne: {
    parameters: {
      path: {
        /**
         * @description Condition ID
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    responses: {
      /** @description Return condition by id */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseCondtionDto"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Delete a condition by ID
   * @description This endpoint deletes a condition object by ID.
   */
  ConditionController_remove: {
    parameters: {
      path: {
        /**
         * @description Condition id
         * @example 1
         */
        id: string;
      };
    };
    responses: {
      /** @description Condition deleted */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseCondtionDto"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Condition not found */
      404: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Update a condition by ID
   * @description This endpoint updates a condition object by ID.
   */
  ConditionController_update: {
    parameters: {
      path: {
        /**
         * @description Condition id
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateConditionDto"];
      };
    };
    responses: {
      /** @description Condition updated */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseCondtionDto"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get all allergies */
  AllergyController_getAllergies: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAllergyDto"][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Create allergy */
  AllergyController_createAllergy: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAllergyDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAllergyDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Get allergy */
  AllergyController_getAllergy: {
    parameters: {
      path: {
        /**
         * @description Unique allergy id.
         * @example dd964152-efdf-4848-be43-eeaeda1a7ccd
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAllergyDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Delete allergy */
  AllergyController_deleteAllergy: {
    parameters: {
      path: {
        /**
         * @description Unique allergy id.
         * @example 934e4dc9-03b7-47cd-9521-b5918f280d6e
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      404: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /** Update allergy */
  AllergyController_patchAllergy: {
    parameters: {
      path: {
        /**
         * @description Unique allergy id.
         * @example 0d9aa1f0-5fc8-48ff-b63b-35d1a7937796
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateAllergyDto"];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAllergyDto"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
}
