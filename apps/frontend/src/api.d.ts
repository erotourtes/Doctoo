/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth/login/patient': {
    /** Login patient */
    post: operations['AuthController_localLogin'];
  };
  '/auth/login/patient/mfa': {
    /** Login patient with MFA */
    post: operations['AuthController_verifyMFA'];
  };
  '/auth/signup': {
    /** Sign up user */
    post: operations['AuthController_signUpUserFirstStep'];
  };
  '/auth/signup/patient/{token}': {
    /** Sign up patient */
    post: operations['AuthController_signUpPatientSecondStep'];
  };
  '/auth/login/google': {
    /** Login with Google */
    get: operations['AuthController_googleLogin'];
  };
  '/auth/login/google/redirect': {
    /** Login with Google redirect */
    get: operations['AuthController_googleLoginRedirect'];
  };
  '/auth/logout': {
    /** Logout */
    get: operations['AuthController_logout'];
  };
  '/auth/password/change': {
    /** Change password */
    post: operations['AuthController_changePassword'];
  };
  '/auth/patient/me': {
    /** Get patient */
    get: operations['AuthController_getPatient'];
  };
  '/user/{id}': {
    /** Get user */
    get: operations['UserController_getUser'];
    /** Delete user */
    delete: operations['UserController_deleteUser'];
    /** Update user */
    patch: operations['UserController_patchUser'];
  };
  '/user': {
    /** Create user */
    post: operations['UserController_createUser'];
  };
  '/patient/{id}': {
    /** Get patient */
    get: operations['PatientController_getPatient'];
    /** Delete patient */
    delete: operations['PatientController_deletePatient'];
    /** Update patient */
    patch: operations['PatientController_patchPatient'];
  };
  '/patient': {
    /** Create patient */
    post: operations['PatientController_createPatient'];
  };
  '/patient/{id}/allergy': {
    /** Get patient allergies */
    get: operations['PatientController_getPatientAllergies'];
    /** Create patient allergy */
    post: operations['PatientController_createPatientAllergy'];
  };
  '/patient/{id}/condition': {
    /** Get patient conditions */
    get: operations['PatientController_getPatientConditions'];
    /** Create patient conditions */
    post: operations['PatientController_createPatientConditions'];
  };
  '/favorite': {
    /** Get favorites */
    get: operations['FavoriteController_getFavorites'];
    /** Create favorite */
    post: operations['FavoriteController_createFavorite'];
  };
  '/favorite/{id}': {
    /** Get favorite */
    get: operations['FavoriteController_getFovorite'];
    /** Delete favorite */
    delete: operations['FavoriteController_deleteFavorite'];
  };
  '/doctor': {
    /** Get all doctors */
    get: operations['DoctorController_getDoctors'];
    /** Create doctor */
    post: operations['DoctorController_createDoctor'];
  };
  '/doctor/doctors/{id}': {
    /** Get all doctors by patient */
    get: operations['DoctorController_getPatientDoctors'];
  };
  '/doctor/doctors/my': {
    /** Get my doctors */
    get: operations['DoctorController_getMyDoctors'];
  };
  '/doctor/{id}': {
    /** Get doctor */
    get: operations['DoctorController_getDoctor'];
    /** Delete doctor */
    delete: operations['DoctorController_deleteDoctor'];
    /** Update doctor */
    patch: operations['DoctorController_patchDoctor'];
  };
  '/hospital': {
    /** Get all hospitals */
    get: operations['HospitalController_getHospitals'];
    /** Create hospital */
    post: operations['HospitalController_createHospital'];
  };
  '/hospital/{id}': {
    /** Get hospital */
    get: operations['HospitalController_getHospital'];
    /** Delete hospital */
    delete: operations['HospitalController_deleteHospital'];
    /** Update hospital */
    patch: operations['HospitalController_patchHospital'];
  };
  '/specialization': {
    /** Get all specializations */
    get: operations['SpecializationController_getSpecializations'];
    /** Create specialization */
    post: operations['SpecializationController_createSpecialization'];
  };
  '/specialization/{id}': {
    /** Get specialization */
    get: operations['SpecializationController_getSpecialization'];
    /** Delete specialization */
    delete: operations['SpecializationController_deleteSpecialization'];
    /** Update specialization */
    patch: operations['SpecializationController_patchSpecialization'];
  };
  '/file/upload': {
    /** Upload file */
    post: operations['FileController_uploadFile'];
  };
  '/file/{name}': {
    /** Get file */
    get: operations['FileController_getFileByName'];
    /** Delete file */
    delete: operations['FileController_deleteFileByName'];
  };
  '/appointment': {
    /** Get all appointments */
    get: operations['AppointmentController_getAppointments'];
    /** Create an appointment */
    post: operations['AppointmentController_createAppointment'];
  };
  '/appointment/patient/{id}': {
    /** Get all appointments by patient id */
    get: operations['AppointmentController_getAppointmentsByPatientId'];
  };
  '/appointment/my': {
    /** Get my appointment */
    get: operations['AppointmentController_getMyAppointments'];
  };
  '/appointment/doctor/{id}': {
    /** Get all appointments by doctor id */
    get: operations['AppointmentController_getAppointmentsByDoctorId'];
  };
  '/appointment/{id}': {
    /** Get an appointment */
    get: operations['AppointmentController_getAppointment'];
    /** Delete an appointment */
    delete: operations['AppointmentController_deleteAppointment'];
    /** Update an appointment */
    patch: operations['AppointmentController_patchAppointment'];
  };
  '/declaration': {
    /** Get declarations */
    get: operations['DeclarationController_getDeclrations'];
    /** Create declaration */
    post: operations['DeclarationController_createDeclaration'];
  };
  '/declaration/{id}': {
    /** Get declaration */
    get: operations['DeclarationController_getDeclaration'];
    /** Delete declaration */
    delete: operations['DeclarationController_deleteDeclaration'];
    /** Update declaration */
    patch: operations['DeclarationController_patchDeclaration'];
  };
  '/review/doctor/{doctorId}': {
    /** Get reviews by doctor */
    get: operations['ReviewController_getReviewsByDoctorId'];
    /** Create a new review */
    post: operations['ReviewController_createReview'];
  };
  '/review': {
    /** Get reviews */
    get: operations['ReviewController_getReviews'];
  };
  '/review/doctor/{doctorId}/average': {
    /** Get the average rating of a doctor */
    get: operations['ReviewController_getAvgRateByDoctorId'];
  };
  '/review/{id}': {
    /** Get review */
    get: operations['ReviewController_getReview'];
  };
  '/review/{reviewId}': {
    /** Delete a review */
    delete: operations['ReviewController_deleteReview'];
    /** Update a review */
    patch: operations['ReviewController_patchReview'];
  };
  '/condition': {
    /**
     * Get all conditions
     * @description This endpoint retrieves all conditions.
     */
    get: operations['ConditionController_findAll'];
    /**
     * Create a new condition
     * @description This endpoint creates a new condition.
     */
    post: operations['ConditionController_create'];
  };
  '/condition/{id}': {
    /**
     * Get a condition by ID
     * @description This endpoint retrieves a condition object by ID.
     */
    get: operations['ConditionController_findOne'];
    /**
     * Delete a condition by ID
     * @description This endpoint deletes a condition object by ID.
     */
    delete: operations['ConditionController_remove'];
    /**
     * Update a condition by ID
     * @description This endpoint updates a condition object by ID.
     */
    patch: operations['ConditionController_update'];
  };
  '/allergy': {
    /** Get all allergies */
    get: operations['AllergyController_getAllergies'];
    /** Create allergy */
    post: operations['AllergyController_createAllergy'];
  };
  '/allergy/{id}': {
    /** Get allergy */
    get: operations['AllergyController_getAllergy'];
    /** Delete allergy */
    delete: operations['AllergyController_deleteAllergy'];
    /** Update allergy */
    patch: operations['AllergyController_patchAllergy'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    LocalLoginDto: {
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description User password.
       * @example password
       */
      password: string;
    };
    LocalLoginResponseDto: {
      /**
       * @description Whether two-factor authorization is enabled for the user.
       * @example false
       */
      isMFAEnabled: boolean;
    };
    ErrorValidationObject: {
      /**
       * @description The name of the field where validation failed.
       * @example name
       */
      proparty: string;
      /**
       * @description Detailed description of the error.
       * @example Name is too short
       */
      message: string;
    };
    BadRequestResponse: {
      /**
       * @description Error in numeric format.
       * @example 404
       */
      statusCode: number;
      /** @description Detailed description of the error. */
      message: string | string[];
      /** @description A list of all fields that failed validation. */
      errors: components['schemas']['ErrorValidationObject'][];
    };
    ClassicNestResponse: {
      /**
       * @description Error in numeric format.
       * @example 404
       */
      statusCode: number;
      /** @description Detailed description of the error. */
      message: string | string[];
      /**
       * @description Brief description of the error.
       * @example The name must be longer than 4 characters.
       */
      error?: string;
    };
    LocalLoginTwoFactorDto: {
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description User password.
       * @example password
       */
      password: string;
      /**
       * @description One-time unique authorization code.
       * @example 236854
       */
      code: string;
    };
    SignUpUserDto: {
      /**
       * @description The user's real first name.
       * @example John
       */
      firstName: string;
      /**
       * @description The user's real last name.
       * @example Doe
       */
      lastName: string;
      /**
       * @description The user's phone number in national format.
       * @example +380000000000
       */
      phone: string;
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description User password.
       * @example password
       */
      password?: string;
      /**
       * @description Unique Google Id of the user.
       * @example G-123456789
       */
      googleId?: string;
      /**
       * @description Link to the user image.
       * @example https://imgur.com/2Bmq0jd
       */
      avatarImgUrl?: string;
    };
    ResponseUserDto: {
      /**
       * @description Unique user id.
       * @example c834b8bb-a379-4d95-a9d5-2f27a6f4e54b
       */
      id: string;
      /**
       * @description The user's real first name.
       * @example John
       */
      firstName: string;
      /**
       * @description The user's real last name.
       * @example Doe
       */
      lastName: string;
      /**
       * @description The user's phone number in national format.
       * @example +380000000000
       */
      phone: string;
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description Whether the user has confirmed his mail in the service.
       * @example false
       */
      emailVerified: boolean;
      /**
       * @description Unique Google Id of the user.
       * @example G-123456789
       */
      googleId?: string;
      /**
       * @description The unique file id of the file in S3 storage.
       * @example b4b0879d-8330-4740-8da9-ad1c2e90ff15.jpeg
       */
      avatarKey: string;
    };
    SignUpPatientDto: {
      /**
       * @description Patient's weight.
       * @example 65
       */
      weight: number;
      /**
       * @description Patient height.
       * @example 185
       */
      height: number;
      /**
       * @description Patient's age.
       * @example 35
       */
      age: number;
      /**
       * @description The patient's blood type.
       * @example AB_MINUS
       * @enum {string}
       */
      bloodType: 'O_PLUS' | 'O_MINUS' | 'A_PLUS' | 'A_MINUS' | 'B_PLUS' | 'B_MINUS' | 'AB_PLUS' | 'AB_MINUS';
      /**
       * @description Patient gender.
       * @example MALE
       * @enum {string}
       */
      gender: 'MALE' | 'FEMALE';
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description Patient's apartment number.
       * @example 35A
       */
      apartment?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode?: number;
    };
    UnauthorizedResponse: {
      /**
       * @description Detailed description of the error.
       * @example Unauthorized
       */
      message: string;
      /**
       * @description Error in numeric format.
       * @example 401
       */
      statusCode: number;
    };
    ChangePasswordDto: {
      /**
       * @description Old user password.
       * @example password
       */
      oldPassword: string;
      /**
       * @description New user password.
       * @example pa$$w0rd
       */
      newPassword: string;
    };
    BadRequestException: Record<string, never>;
    ResponseConditionDto: {
      /**
       * @description Condition id
       * @example 36e4c1e5-16f6-4bd6-980b-af9c07d0e39a
       */
      id: string;
      /**
       * @description Condition name
       * @example Asthma
       */
      name: string;
    };
    ResponsePatientDto: {
      /**
       * @description Unique patient id.
       * @example ec40d6f2-f152-47d8-97fe-dc3a296b43ab
       */
      id: string;
      /**
       * @description The unique user id of the user to which the patient is bound.
       * @example b8784ebb-2cac-4526-8988-1541a831a905
       */
      userId: string;
      /**
       * @description Patient's weight.
       * @example 65
       */
      weight: number;
      /**
       * @description Patient height.
       * @example 185
       */
      height: number;
      /**
       * @description Patient's age.
       * @example 35
       */
      age: number;
      /**
       * @description The patient's blood type.
       * @example AB_MINUS
       * @enum {string}
       */
      bloodType: 'O_PLUS' | 'O_MINUS' | 'A_PLUS' | 'A_MINUS' | 'B_PLUS' | 'B_MINUS' | 'AB_PLUS' | 'AB_MINUS';
      /**
       * @description Patient gender.
       * @example MALE
       * @enum {string}
       */
      gender: 'MALE' | 'FEMALE';
      /**
       * @description A unique key to the patient identification file.
       * @example 58df776b-bfc7-4a13-9efc-6847d145bf99
       */
      identityCardKey: string;
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description Patient's apartment number.
       * @example 35A
       */
      apartment?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode: number;
      /**
       * @description Status of alerts to the patient's email.
       * @default false
       */
      emailNotificationToggle: boolean;
      /**
       * @description Whether to request a two-factor confirmation when making a payment.
       * @example false
       */
      requestBillPaymentApproval: boolean;
      /** @description The two factor authentication toggle of the patient */
      twoFactorAuthToggle: boolean;
      /**
       * @description First name of the doctor
       * @example John
       */
      firstName: string;
      /**
       * @description Last name of the doctor
       * @example Doe
       */
      lastName: string;
      /**
       * @description Key of the avatar of the doctor
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333.jpg
       */
      avatarKey: string;
      /**
       * @description The phone of the doctor
       * @example +38099561735634
       */
      phone: string;
      /**
       * @description Email of the doctor
       * @example johndoe@mail.com
       */
      email: string;
      /**
       * @description List of conditions of the patient.
       * @example {
       *   "id": "011341ae-349e-4372-9263-3d472b1e1ba5",
       *   "name": "Diabetes"
       * }
       */
      conditions: components['schemas']['ResponseConditionDto'][];
    };
    CreateUserDto: {
      /**
       * @description The user's real first name.
       * @example John
       */
      firstName: string;
      /**
       * @description The user's real last name.
       * @example Doe
       */
      lastName: string;
      /**
       * @description The user's phone number in national format.
       * @example +380000000000
       */
      phone: string;
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description User password.
       * @example password
       */
      password?: string;
      /**
       * @description Unique Google Id of the user.
       * @example G-123456789
       */
      googleId?: string;
      /**
       * @description The unique file id of the file in S3 storage.
       * @example b386bcff-d538-4473-a3d7-cb2b4b7d3c65.jpeg
       */
      avatarKey: string;
    };
    PatchUserWithoutCredentialsDto: {
      /**
       * @description The user's real first name.
       * @example John
       */
      firstName?: string;
      /**
       * @description The user's real last name.
       * @example Doe
       */
      lastName?: string;
      /**
       * @description The user's phone number in national format.
       * @example +380000000000
       */
      phone?: string;
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email?: string;
      /**
       * @description The unique file id of the file in S3 storage.
       * @example b386bcff-d538-4473-a3d7-cb2b4b7d3c65.jpeg
       */
      avatarKey?: string;
    };
    CreatePatientDto: {
      /**
       * @description The unique user id of the user to which the patient is bound.
       * @example edcd7eb0-9cca-40ca-a632-25343d599211
       */
      userId: string;
      /**
       * @description Patient's weight.
       * @example 65
       */
      weight: number;
      /**
       * @description Patient height.
       * @example 185
       */
      height: number;
      /**
       * @description Patient's age.
       * @example 35
       */
      age: number;
      /**
       * @description The patient's blood type.
       * @example AB_MINUS
       * @enum {string}
       */
      bloodType: 'O_PLUS' | 'O_MINUS' | 'A_PLUS' | 'A_MINUS' | 'B_PLUS' | 'B_MINUS' | 'AB_PLUS' | 'AB_MINUS';
      /**
       * @description Patient gender.
       * @example MALE
       * @enum {string}
       */
      gender: 'MALE' | 'FEMALE';
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description Patient's apartment number.
       * @example 35A
       */
      apartment?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode?: number;
    };
    PatchPatientDto: {
      /**
       * @description Patient's weight.
       * @example 65
       */
      weight?: number;
      /**
       * @description Patient height.
       * @example 185
       */
      height?: number;
      /**
       * @description Patient's age.
       * @example 35
       */
      age?: number;
      /**
       * @description The patient's blood type.
       * @example AB_MINUS
       * @enum {string}
       */
      bloodType?: 'O_PLUS' | 'O_MINUS' | 'A_PLUS' | 'A_MINUS' | 'B_PLUS' | 'B_MINUS' | 'AB_PLUS' | 'AB_MINUS';
      /**
       * @description Patient gender.
       * @example MALE
       * @enum {string}
       */
      gender?: 'MALE' | 'FEMALE';
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country?: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city?: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street?: string;
      /**
       * @description Patient's apartment number.
       * @example 35A
       */
      apartment?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode?: number;
      /**
       * @description Unique declaration id.
       * @example 12234
       */
      declarationId?: string;
      /**
       * @description A unique key to the patient identification file.
       * @example 6db92985-83e2-4911-b55e-0d3a6faf27a5
       */
      identityCardKey?: string;
      /**
       * @description Status of alerts to the patient's email.
       * @default false
       */
      emailNotificationToggle?: boolean;
      /**
       * @description Status of alerts on the patient's text messages.
       * @example true
       */
      twoFactorAuthToggle?: boolean;
      /**
       * @description Whether to request a two-factor confirmation when making a payment.
       * @example false
       */
      requestBillPaymentApproval?: boolean;
    };
    CreatePatientAllergyDto: {
      /**
       * @description Unique allergy id.
       * @example 6227630c-2779-42cb-a349-bb57143975db
       */
      allergyId: string;
    };
    ResponsePatientAllergyDto: {
      /**
       * @description Unique patient allergy id.
       * @example 474b5fe9-61f9-4cf0-97c6-f4a10e3f2769
       */
      id: string;
      /**
       * @description Unique patient id.
       * @example 3f48e52e-94d4-4893-9cfd-420b22216b10
       */
      patientId: string;
      /**
       * @description Unique allergy id.
       * @example d735522a-d430-434b-9b03-92ac671c1e67
       */
      allergyId: string;
    };
    ResponseAllergyDto: {
      /**
       * @description Unique allergy id.
       * @example e2635ebb-3fce-4515-8c4c-6547ba102f1f
       */
      id: string;
      /**
       * @description Name of allergy.
       * @example Dust
       */
      name: string;
    };
    CreatePatientConditionDto: {
      /** @description Id of condition */
      conditionId: string;
    };
    CreateFavoriteDto: {
      /**
       * @description Unique doctor id.
       * @example 6b321000-581b-433a-8002-792b183558ac
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example cf036ce4-7998-40ac-97ef-1d7c5c2363ca
       */
      patientId: string;
    };
    ResponseFavoriteDto: {
      /**
       * @description Unique doctor id.
       * @example 6b321000-581b-433a-8002-792b183558ac
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example cf036ce4-7998-40ac-97ef-1d7c5c2363ca
       */
      patientId: string;
      /**
       * @description Unique favorite id.
       * @example 8cbea823-1e4b-4ff8-aa4b-ca9605e7166d
       */
      id: string;
    };
    CreateDoctorDto: {
      /**
       * @description Unique user id.
       * @example f78dc76e-4861-4e94-a95d-c10edda45928
       */
      userId: string;
      /**
       * @description Doctor's hourly rate.
       * @example 100
       */
      payrate: number;
      /**
       * @description A full description of the doctor.
       * @example Experienced doctor with a focus on patient care.
       */
      about: string;
      /**
       * @description A list of ids specialties that the doctor covers.
       * @example [
       *   "90941394-f815-4ce3-a1ef-0824116a3bb0"
       * ]
       */
      specializationIds: string[];
      /**
       * @description List of hospitals where the doctor works.
       * @example [
       *   "6ee03a18-f1b4-48d9-b041-1660559e011e"
       * ]
       */
      hospitalIds: string[];
    };
    ResponseHospitalDto: {
      /**
       * @description The hospital's unique id.
       * @example 488e4cd7-7a5a-41ee-b7b0-721fc338e0f4
       */
      id: string;
      /**
       * @description The full name of the hospital is.
       * @example Ichilov and Assuta
       */
      name: string;
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode: number;
    };
    ResponseSpecializationDto: {
      /**
       * @description Unique specialisation id.
       * @example 25802719-e59e-43af-8398-22dbb7796cc7
       */
      id: string;
      /**
       * @description Specialization name.
       * @example Surgeon
       */
      name: string;
    };
    ResponseDoctorDto: {
      /**
       * @description The ID of the doctor
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333
       */
      id: string;
      /**
       * @description The ID of the user associated with the doctor
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333
       */
      userId: string;
      /**
       * @description The pay rate of the doctor
       * @example 100
       */
      payrate: number;
      /**
       * @description About section of the doctor
       * @example Experienced doctor with a focus on patient care
       */
      about: string;
      /**
       * @description First name of the doctor
       * @example John
       */
      firstName: string;
      /**
       * @description Last name of the doctor
       * @example Doe
       */
      lastName: string;
      /**
       * @description Key of the avatar of the doctor
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333.jpg
       */
      avatarKey: string;
      /**
       * @description The phone of the doctor
       * @example +38099561735634
       */
      phone: string;
      /**
       * @description Email of the doctor
       * @example johndoe@mail.com
       */
      email: string;
      /** @description An array of hospitals associated with the doctor */
      hospitals: components['schemas']['ResponseHospitalDto'][];
      /** @description An array of specializations of the doctor */
      specializations: components['schemas']['ResponseSpecializationDto'][];
    };
    PatchDoctorDto: {
      /**
       * @description The pay rate of the doctor
       * @example 100
       */
      payrate?: number;
      /**
       * @description About section of the doctor
       * @example Experienced doctor with a focus on patient care
       */
      about?: string;
    };
    CreateHospitalDto: {
      /**
       * @description The full name of the hospital is.
       * @example Ichilov and Assuta
       */
      name: string;
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode: number;
    };
    PatchHospitalDto: {
      /**
       * @description The full name of the hospital is.
       * @example Ichilov and Assuta
       */
      name?: string;
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country?: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city?: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode?: number;
    };
    CreateSpecializationDto: {
      /**
       * @description Specialization name.
       * @example Surgeon
       */
      name: string;
    };
    UpdateSpecializationDto: {
      /**
       * @description Specialization name.
       * @example Surgeon
       */
      name?: string;
    };
    ResponseFileDto: {
      /**
       * @description File Name.
       * @example b17fedfa-e22e-453d-898c-5ce6735978cb.png
       */
      name: string;
      /**
       * @description Full link in the S3 storage to get the file.
       * @example https://storage.googleapis.com/bucket/b17fedfa-e22e-453d-898c-5ce6735978cb.png
       */
      url: string;
    };
    CreateAppointmentDto: {
      /**
       * @description Unique doctor id.
       * @example 0879bf5c-8831-496f-9c37-e868321acc63
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example 72e98753-88a7-4abe-ad50-4befe5d710bd
       */
      patientId: string;
      /**
       * @description The date on which the meeting is scheduled.
       * @example 2024-04-29T18:13:34.038Z
       */
      assignedAt: string;
      /**
       * @description Current status of the appointment.
       * @example PLANNED
       * @enum {string}
       */
      status: 'PENDING_PAYMENT' | 'PLANNED' | 'COMPLETED' | 'CANCELED';
      /**
       * @description Additional comments left by the patient or doctor.
       * @example Get some blood pressure pills.
       */
      notes?: string;
      /**
       * @description The unique Id of the billed payment.
       * @example 78a6e481-121d-440e-bc03-f2636ce50d95
       */
      paymentInvoiceKey?: string;
      /**
       * @description The unique id of the payment receipt.
       * @example 5a18c2f7-0d77-46d2-8438-b764d5d79b77
       */
      paymentReceiptKey?: string;
      /** @description The date and time the appointment started */
      startedAt?: string;
      /** @description The date and time the appointment ended */
      endedAt?: string;
    };
    ResponseAppointmentDto: {
      /**
       * @description Unique appointment id.
       * @example 7b42cddf-d57b-43a7-949f-e54a004be015
       */
      id: string;
      /**
       * @description Unique doctor id.
       * @example 2fa36aae-f874-4dbe-a573-a3a5a4150704
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example 1c024a28-fe02-45d3-962c-8c3ec87e100f
       */
      patientId: string;
      /**
       * Format: date-time
       * @description The date on which the meeting is scheduled.
       * @example 2024-04-29T18:13:34.037Z
       */
      assignedAt: string;
      /**
       * @description Current status of the appointment.
       * @enum {string}
       */
      status: 'PENDING_PAYMENT' | 'PLANNED' | 'COMPLETED' | 'CANCELED';
      /**
       * @description Additional comments left by the patient or doctor.
       * @example Get some blood pressure pills.
       */
      notes: string;
      /**
       * @description The unique id of the billed payment.
       * @example 7b9f7a80-9e2a-4159-b401-798d270ff917
       */
      paymentInvoiceKey: string;
      /** @description The unique id from the receipt file for the appointment. */
      paymentReceiptKey: string;
      /**
       * @description The unique id of the video chat recording.
       * @example 08523078-5b09-4840-9f1b-09d8e42f1fc5.mp4
       */
      videoRecordKey: string;
      /**
       * @description The time when the appointment should start.
       * @example 2024-04-29T18:13:34.037Z
       */
      startedAt: string;
      /**
       * @description The time when the appointment should end.
       * @example 2024-04-29T18:13:34.037Z
       */
      endedAt: string;
    };
    PatchAppointmentDto: {
      /**
       * @description Unique doctor id.
       * @example 0879bf5c-8831-496f-9c37-e868321acc63
       */
      doctorId?: string;
      /**
       * @description Unique patient id.
       * @example 72e98753-88a7-4abe-ad50-4befe5d710bd
       */
      patientId?: string;
      /**
       * @description The date on which the meeting is scheduled.
       * @example 2024-04-29T18:13:34.038Z
       */
      assignedAt?: string;
      /**
       * @description Current status of the appointment.
       * @example PLANNED
       * @enum {string}
       */
      status?: 'PENDING_PAYMENT' | 'PLANNED' | 'COMPLETED' | 'CANCELED';
      /**
       * @description Additional comments left by the patient or doctor.
       * @example Get some blood pressure pills.
       */
      notes?: string;
      /**
       * @description The unique Id of the billed payment.
       * @example 78a6e481-121d-440e-bc03-f2636ce50d95
       */
      paymentInvoiceKey?: string;
      /**
       * @description The unique id of the payment receipt.
       * @example 5a18c2f7-0d77-46d2-8438-b764d5d79b77
       */
      paymentReceiptKey?: string;
      /** @description The date and time the appointment started */
      startedAt?: string;
      /** @description The date and time the appointment ended */
      endedAt?: string;
    };
    CreateDeclarationDto: {
      /**
       * @description Unique doctor id.
       * @example e664f83e-e03d-4471-9a58-829526587660
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example 24ff593e-f425-41bf-bfdd-a6b815037bf4
       */
      patientId: string;
    };
    ResponseDeclarationDto: {
      /**
       * @description Unique doctor id.
       * @example e664f83e-e03d-4471-9a58-829526587660
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example 24ff593e-f425-41bf-bfdd-a6b815037bf4
       */
      patientId: string;
      /**
       * @description Unique declration id.
       * @example 1
       */
      id: number;
    };
    CreateReviewDto: {
      /**
       * @description Text of the review.
       * @example Good doctor, recommended.
       */
      text?: string;
      /**
       * @description Rate of the review.
       * @example 5
       */
      rate?: number;
    };
    ResponseReviewDto: {
      /**
       * @description Unique rating id.
       * @example 2712fa22-9058-40e0-9c31-d4e7d07f98d5
       */
      id: string;
      /**
       * @description The rate in review.
       * @example 4
       */
      rate: number;
      /**
       * @description Text in review.
       * @example Experienced doctor with a focus on patient care.
       */
      text: string;
      /**
       * @description Unique doctor id.
       * @example f7fc491a-b4e5-4abb-ba91-12b6737c7bd4
       */
      doctorId: string;
      /**
       * Format: date-time
       * @description The date when the review was created.
       * @example 2024-04-29T18:13:34.380Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The date when the review was updated.
       * @example 2024-04-29T18:13:34.380Z
       */
      updatedAt: string;
    };
    ResponseReviewDtoWithNames: {
      /**
       * @description Unique rating id.
       * @example 2712fa22-9058-40e0-9c31-d4e7d07f98d5
       */
      id: string;
      /**
       * @description The rate in review.
       * @example 4
       */
      rate: number;
      /**
       * @description Text in review.
       * @example Experienced doctor with a focus on patient care.
       */
      text: string;
      /**
       * @description Unique doctor id.
       * @example f7fc491a-b4e5-4abb-ba91-12b6737c7bd4
       */
      doctorId: string;
      /**
       * @description The names of the doctor, when icnludesName prodived.
       * @example {
       *   "user": {
       *     "firstName": "John",
       *     "lastName": "Doe"
       *   }
       * }
       */
      doctor?: Record<string, never>;
      /**
       * @description The names of the patient, when icnludesName provided.
       * @example {
       *   "user": {
       *     "firstName": "John",
       *     "lastName": "Doe"
       *   }
       * }
       */
      patient?: Record<string, never>;
    };
    AvgRateResponse: {
      /**
       * @description Average rating.
       * @example 4.5
       */
      avg: number;
      /**
       * @description Total number of reviews.
       * @example 10
       */
      count: number;
    };
    PatchReviewDto: {
      /**
       * @description Text of the review.
       * @example Good doctor, recommended.
       */
      text?: string;
      /**
       * @description Rate of the review.
       * @example 5
       */
      rate?: number;
    };
    CreateConditionDto: {
      /**
       * @description Condition name
       * @example Asthma
       */
      name: string;
    };
    ResponseCondtionDto: {
      /**
       * @description Condition id
       * @example 1
       */
      id: string;
      /**
       * @description Condition name
       * @example Asthma
       */
      name: string;
    };
    UpdateConditionDto: {
      /**
       * @description Condition name
       * @example Asthma
       */
      name?: string;
    };
    CreateAllergyDto: {
      /**
       * @description Name of allergy.
       * @example Dust
       */
      name: string;
    };
    UpdateAllergyDto: {
      /**
       * @description Name of allergy.
       * @example Dust
       */
      name?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** Login patient */
  AuthController_localLogin: {
    requestBody: {
      content: {
        'application/json': components['schemas']['LocalLoginDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['LocalLoginResponseDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Login patient with MFA */
  AuthController_verifyMFA: {
    requestBody: {
      content: {
        'application/json': components['schemas']['LocalLoginTwoFactorDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Sign up user */
  AuthController_signUpUserFirstStep: {
    requestBody: {
      content: {
        'application/json': components['schemas']['SignUpUserDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseUserDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Sign up patient */
  AuthController_signUpPatientSecondStep: {
    parameters: {
      path: {
        token: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SignUpPatientDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Login with Google */
  AuthController_googleLogin: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Login with Google redirect */
  AuthController_googleLoginRedirect: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Logout */
  AuthController_logout: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Change password */
  AuthController_changePassword: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ChangePasswordDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedResponse'];
        };
      };
      500: {
        content: {
          'application/json': components['schemas']['BadRequestException'];
        };
      };
    };
  };
  /** Get patient */
  AuthController_getPatient: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponsePatientDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get user */
  UserController_getUser: {
    parameters: {
      path: {
        /**
         * @description Unique user id.
         * @example b558013e-8bda-42d1-8e9c-43ce825b2e6c
         */
        id: string;
      };
    };
    responses: {
      /** @description Response if an error occurs while processing a request. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseUserDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete user */
  UserController_deleteUser: {
    parameters: {
      path: {
        /**
         * @description Unique user id.
         * @example 15d3d63d-0d31-4080-bc5c-ac4dc2041177
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update user */
  UserController_patchUser: {
    parameters: {
      path: {
        /**
         * @description Unique user id.
         * @example 17c292ac-dc75-4ed8-be92-27579003f2c6
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchUserWithoutCredentialsDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseUserDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create user */
  UserController_createUser: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateUserDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseUserDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get patient */
  PatientController_getPatient: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example d05893d9-b685-4e32-a3b2-ac51134ec7e1
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponsePatientDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete patient */
  PatientController_deletePatient: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example 53bbc3e0-62ba-41f2-93f2-fd3d430b3f76
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update patient */
  PatientController_patchPatient: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example 788ad72f-68b0-46f2-96d3-4394aa5f34df
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchPatientDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponsePatientDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create patient */
  PatientController_createPatient: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePatientDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponsePatientDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get patient allergies */
  PatientController_getPatientAllergies: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example aff86675-27a0-40d1-a4db-3875d839113a
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAllergyDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create patient allergy */
  PatientController_createPatientAllergy: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example 1e5b2d13-d75f-4f9c-911b-1e5818ef0802
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePatientAllergyDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponsePatientAllergyDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get patient conditions */
  PatientController_getPatientConditions: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example a096d451-ffbc-4e0a-b46a-ca69baa15fc7
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseConditionDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create patient conditions */
  PatientController_createPatientConditions: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example b13d4888-1fab-4a76-a979-1cf5cb7d7928
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePatientConditionDto'][];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': number;
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get favorites */
  FavoriteController_getFavorites: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseFavoriteDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create favorite */
  FavoriteController_createFavorite: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateFavoriteDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseFavoriteDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get favorite */
  FavoriteController_getFovorite: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 4f84ae44-4477-4e8a-9597-b37544a863da
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseFavoriteDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete favorite */
  FavoriteController_deleteFavorite: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 35c300a4-96a9-439e-93d8-1c82c2b9a080
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all doctors */
  DoctorController_getDoctors: {
    parameters: {
      query?: {
        /** @description ID of the hospital to filter doctors by */
        hospitalId?: string;
        /** @description ID of the specialization to filter doctors by */
        specializationId?: string;
        /** @description Search string */
        search?: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDoctorDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create doctor */
  DoctorController_createDoctor: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateDoctorDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDoctorDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all doctors by patient */
  DoctorController_getPatientDoctors: {
    parameters: {
      path: {
        /**
         * @description Unique patient id.
         * @example a591b80f-2012-4b2d-933b-3585f7902653
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDoctorDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get my doctors */
  DoctorController_getMyDoctors: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDoctorDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get doctor */
  DoctorController_getDoctor: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example ade3e598-17a5-42f5-97e8-b9b604c517b4
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDoctorDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete doctor */
  DoctorController_deleteDoctor: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 292961e7-06fa-45c4-941a-e881304ef091
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update doctor */
  DoctorController_patchDoctor: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 3df8bf54-006e-45e4-9880-5543eef25e34
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchDoctorDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDoctorDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all hospitals */
  HospitalController_getHospitals: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseHospitalDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create hospital */
  HospitalController_createHospital: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateHospitalDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseHospitalDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get hospital */
  HospitalController_getHospital: {
    parameters: {
      path: {
        /**
         * @description The hospital's unique id.
         * @example d492b590-f311-43d1-924c-756f8f5198f9
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseHospitalDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete hospital */
  HospitalController_deleteHospital: {
    parameters: {
      path: {
        /**
         * @description The hospital's unique id.
         * @example e4a0c02e-16ac-4c02-b29f-4306148c53a6
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update hospital */
  HospitalController_patchHospital: {
    parameters: {
      path: {
        /**
         * @description The hospital's unique id.
         * @example 1dedf128-77b4-44c3-93e4-091d2af5cb66
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchHospitalDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseHospitalDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all specializations */
  SpecializationController_getSpecializations: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseSpecializationDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
    };
  };
  /** Create specialization */
  SpecializationController_createSpecialization: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSpecializationDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseSpecializationDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
    };
  };
  /** Get specialization */
  SpecializationController_getSpecialization: {
    parameters: {
      path: {
        /**
         * @description Unique specialisation id.
         * @example 8c17a46e-c5bb-4108-9b6e-3e0c22853b25
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseSpecializationDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
    };
  };
  /** Delete specialization */
  SpecializationController_deleteSpecialization: {
    parameters: {
      path: {
        /**
         * @description Unique specialisation id.
         * @example 471c9484-822d-479b-b095-61ce4fe0c4e9
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
    };
  };
  /** Update specialization */
  SpecializationController_patchSpecialization: {
    parameters: {
      path: {
        /**
         * @description Unique specialisation id.
         * @example d75ad002-e4bc-4efa-88e5-2cf02f478be8
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSpecializationDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseSpecializationDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
    };
  };
  /** Upload file */
  FileController_uploadFile: {
    /** @description The file to be uploaded. */
    requestBody: {
      content: {
        'multipart/form-data': string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseFileDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get file */
  FileController_getFileByName: {
    parameters: {
      path: {
        /**
         * @description Unique file name.
         * @example 0d0ad6af-1883-4181-824b-1dcfbc4578e4.png
         */
        name: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseFileDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete file */
  FileController_deleteFileByName: {
    parameters: {
      path: {
        /**
         * @description Unique file name.
         * @example ede377db-3bb7-4da6-bdc8-8161b50e0ba6.png
         */
        name: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all appointments */
  AppointmentController_getAppointments: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAppointmentDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create an appointment */
  AppointmentController_createAppointment: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAppointmentDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAppointmentDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all appointments by patient id */
  AppointmentController_getAppointmentsByPatientId: {
    parameters: {
      path: {
        /**
         * @description Unique patient id.
         * @example 3da14958-dead-4751-bdf0-c02b0b972360
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAppointmentDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get my appointment */
  AppointmentController_getMyAppointments: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAppointmentDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all appointments by doctor id */
  AppointmentController_getAppointmentsByDoctorId: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 1d3d1d9c-244d-45af-9827-4f4a8c042366
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAppointmentDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get an appointment */
  AppointmentController_getAppointment: {
    parameters: {
      path: {
        /**
         * @description Unique appointment id.
         * @example 2c63a332-dbe5-4d9d-9221-a838d1b11d12
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAppointmentDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete an appointment */
  AppointmentController_deleteAppointment: {
    parameters: {
      path: {
        /**
         * @description Unique appointment id.
         * @example 33b15d58-fb0c-4f34-b577-6143b8c42166
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update an appointment */
  AppointmentController_patchAppointment: {
    parameters: {
      path: {
        /**
         * @description Unique appointment id.
         * @example cb2cd951-861e-4223-bd32-f1044433c3e2
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchAppointmentDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAppointmentDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get declarations */
  DeclarationController_getDeclrations: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDeclarationDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create declaration */
  DeclarationController_createDeclaration: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateDeclarationDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDeclarationDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get declaration */
  DeclarationController_getDeclaration: {
    parameters: {
      path: {
        /**
         * @description Unique declaration id.
         * @example 1
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDeclarationDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete declaration */
  DeclarationController_deleteDeclaration: {
    parameters: {
      path: {
        /**
         * @description Unique declaration id.
         * @example 1
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update declaration */
  DeclarationController_patchDeclaration: {
    parameters: {
      path: {
        /**
         * @description Unique declaration id.
         * @example 1
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateDeclarationDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDeclarationDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get reviews by doctor */
  ReviewController_getReviewsByDoctorId: {
    parameters: {
      path: {
        doctorId: string;
        /**
         * @description Include names in reviews.
         * @example false
         */
        includeNames: string;
        /**
         * @description How many reviews should be skipped.
         * @example 1
         */
        skip: string;
        /**
         * @description How many reviews should be taken.
         * @example 50
         */
        take: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseReviewDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create a new review */
  ReviewController_createReview: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
      path: {
        doctorId: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateReviewDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseReviewDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get reviews */
  ReviewController_getReviews: {
    parameters: {
      path: {
        /**
         * @description Include names in reviews.
         * @example false
         */
        includeNames: string;
        /**
         * @description How many reviews should be skipped.
         * @example 1
         */
        skip: string;
        /**
         * @description How many reviews should be taken.
         * @example 50
         */
        take: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseReviewDtoWithNames'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get the average rating of a doctor */
  ReviewController_getAvgRateByDoctorId: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 4c94a553-c005-472e-84c7-dada9ec31b08
         */
        doctorId: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['AvgRateResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get review */
  ReviewController_getReview: {
    parameters: {
      path: {
        /**
         * @description Unique review id.
         * @example 0d5ec105-56c2-4dca-920b-108b3013764f
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseReviewDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete a review */
  ReviewController_deleteReview: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
      path: {
        reviewId: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update a review */
  ReviewController_patchReview: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
      path: {
        reviewId: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchReviewDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseReviewDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /**
   * Get all conditions
   * @description This endpoint retrieves all conditions.
   */
  ConditionController_findAll: {
    responses: {
      /** @description Return conditions list */
      200: {
        content: {
          'application/json': components['schemas']['ResponseCondtionDto'][];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /**
   * Create a new condition
   * @description This endpoint creates a new condition.
   */
  ConditionController_create: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateConditionDto'];
      };
    };
    responses: {
      /** @description Condition created */
      200: {
        content: {
          'application/json': components['schemas']['ResponseCondtionDto'];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /**
   * Get a condition by ID
   * @description This endpoint retrieves a condition object by ID.
   */
  ConditionController_findOne: {
    parameters: {
      path: {
        /**
         * @description Condition ID
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    responses: {
      /** @description Return condition by id */
      200: {
        content: {
          'application/json': components['schemas']['ResponseCondtionDto'];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /**
   * Delete a condition by ID
   * @description This endpoint deletes a condition object by ID.
   */
  ConditionController_remove: {
    parameters: {
      path: {
        /**
         * @description Condition id
         * @example 1
         */
        id: string;
      };
    };
    responses: {
      /** @description Condition deleted */
      200: {
        content: {
          'application/json': components['schemas']['ResponseCondtionDto'];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Condition not found */
      404: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /**
   * Update a condition by ID
   * @description This endpoint updates a condition object by ID.
   */
  ConditionController_update: {
    parameters: {
      path: {
        /**
         * @description Condition id
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateConditionDto'];
      };
    };
    responses: {
      /** @description Condition updated */
      200: {
        content: {
          'application/json': components['schemas']['ResponseCondtionDto'];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all allergies */
  AllergyController_getAllergies: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAllergyDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create allergy */
  AllergyController_createAllergy: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAllergyDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAllergyDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get allergy */
  AllergyController_getAllergy: {
    parameters: {
      path: {
        /**
         * @description Unique allergy id.
         * @example c385bf1e-6b54-483f-abe1-882cbc8daf0b
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAllergyDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete allergy */
  AllergyController_deleteAllergy: {
    parameters: {
      path: {
        /**
         * @description Unique allergy id.
         * @example 539e91ca-0299-4fc4-bef5-4d1faeb42651
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      404: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update allergy */
  AllergyController_patchAllergy: {
    parameters: {
      path: {
        /**
         * @description Unique allergy id.
         * @example a4e12510-e294-4cd6-a02e-716a716d2a25
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAllergyDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAllergyDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
}
