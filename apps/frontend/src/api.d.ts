/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/login/patient": {
    /**
     * Login with an email and a password
     * @description This endpoint is used for logging in with an email and password.
     */
    post: operations["AuthController_localLogin"];
  };
  "/auth/signup": {
    /**
     * Local sign up
     * @description This endpoint is used for the local sign up.
     */
    post: operations["AuthController_signUpFirstStep"];
  };
  "/auth/signup/patient/{token}": {
    post: operations["AuthController_signUpPatientSecondStep"];
  };
  "/auth/login/google": {
    get: operations["AuthController_googleLogin"];
  };
  "/auth/login/google/redirect": {
    get: operations["AuthController_googleLoginRedirect"];
  };
  "/auth/logout": {
    /**
     * Logging out
     * @description This endpoint is used for logging out.
     */
    get: operations["AuthController_logout"];
  };
  "/user/{id}": {
    /**
     * Get a user by ID
     * @description This endpoint retrieves a user object by ID.
     */
    get: operations["UserController_getUser"];
    /**
     * Delete a user by ID
     * @description This endpoint deletes a user object by ID.
     */
    delete: operations["UserController_deleteUser"];
    /**
     * Update a user by ID
     * @description This endpoint updates a user object by ID.
     */
    patch: operations["UserController_patchUser"];
  };
  "/user": {
    /**
     * Create a new user
     * @description This endpoint creates a new user.
     */
    post: operations["UserController_createUser"];
  };
  "/patient/{id}": {
    /**
     * Get a patient by ID
     * @description This endpoint retrieves a patient object by ID.
     */
    get: operations["PatientController_getPatient"];
    /**
     * Delete a patient by ID
     * @description This endpoint deletes a patient object by ID.
     */
    delete: operations["PatientController_deletePatient"];
    /**
     * Update a patient by ID
     * @description This endpoint updates a patient object by ID.
     */
    patch: operations["PatientController_patchPatient"];
  };
  "/patient": {
    /**
     * Create a new patient
     * @description This endpoint creates a new patient.
     */
    post: operations["PatientController_createPatient"];
  };
  "/favorite": {
    /**
     * Get favorite doctors
     * @description This endpoint retrieves favorite doctors.
     */
    get: operations["FavoriteController_getFavorites"];
    /**
     * Add a doctor to favorites
     * @description This endpoint addes a doctor to favorites list.
     */
    post: operations["FavoriteController_createFavorite"];
  };
  "/favorite/{id}": {
    /**
     * Get a favorite doctor by ID
     * @description This endpoint retrieves a favorite doctor by ID.
     */
    get: operations["FavoriteController_getFovorite"];
    /**
     * Remove the doctor from favorites
     * @description This endpoint deletes a doctor from favorite doctors.
     */
    delete: operations["FavoriteController_deleteFavorite"];
  };
  "/doctor": {
    /**
     * Get all doctors
     * @description This endpoint retrieves all doctors.
     */
    get: operations["DoctorController_getDoctors"];
    /**
     * Create a new doctor
     * @description Creates a new doctor profile
     */
    post: operations["DoctorController_createDoctor"];
  };
  "/doctor/{id}": {
    /**
     * Get a doctor by ID
     * @description This endpoint retrieves a doctor by ID.
     */
    get: operations["DoctorController_getDoctor"];
    /**
     * Delete a doctor by ID
     * @description This endpoint deletes a doctor object by ID.
     */
    delete: operations["DoctorController_deleteDoctor"];
    /**
     * Update a doctor by ID
     * @description This endpoint updates a doctor object by ID.
     */
    patch: operations["DoctorController_patchDoctor"];
  };
  "/hospital": {
    /**
     * Get a list of hospitals
     * @description This endpoint retrieves a list of hospital objects.
     */
    get: operations["HospitalController_getHospitals"];
    /**
     * Create a new hospital
     * @description This endpoint creates a new hospital.
     */
    post: operations["HospitalController_createHospital"];
  };
  "/hospital/{id}": {
    /**
     * Get a hospital by ID
     * @description This endpoint retrieves a hospital object by ID.
     */
    get: operations["HospitalController_getHospital"];
    /**
     * Delete a hospital by ID
     * @description This endpoint deletes a hospital object by ID.
     */
    delete: operations["HospitalController_deleteHospital"];
    /**
     * Update a hospital by ID
     * @description This endpoint updates a hospital object by ID.
     */
    patch: operations["HospitalController_patchHospital"];
  };
  "/specialization": {
    get: operations["SpecializationController_getSpecializations"];
    post: operations["SpecializationController_create"];
  };
  "/specialization/{id}": {
    get: operations["SpecializationController_getSpecialization"];
    delete: operations["SpecializationController_deleteSpecialization"];
    patch: operations["SpecializationController_updateSpecialization"];
  };
  "/file/upload": {
    /**
     * Uploading a file
     * @description This endpoint is used for the file uploading.
     */
    post: operations["FileController_uploadFile"];
  };
  "/file/{name}": {
    /**
     * Get a link for a file by name
     * @description This endpoint retrieves a link for a file by name.
     */
    get: operations["FileController_getFile"];
    /**
     * Delete a file by name
     * @description This endpoint deletes a file by name.
     */
    delete: operations["FileController_deleteFile"];
  };
  "/appointment": {
    /**
     * Get a list of all appointments
     * @description This endpoint retrieves a list of all appointment objects.
     */
    get: operations["AppointmentController_findAll"];
    /**
     * Create a new appointment
     * @description This endpoint creates a new appointment.
     */
    post: operations["AppointmentController_create"];
  };
  "/appointment/all-by-patient/{id}": {
    /**
     * Get a list of appointments of the patient
     * @description This endpoint retrieves a list of appointment objects of the patient by it's ID.
     */
    get: operations["AppointmentController_findAllByPatientId"];
  };
  "/appointment/all-by-doctor/{id}": {
    /**
     * Get a list of appointments of the doctor
     * @description This endpoint retrieves a list of appointment objects of the doctor by it's ID.
     */
    get: operations["AppointmentController_findAllByDoctorId"];
  };
  "/appointment/{id}": {
    /**
     * Get an appointment by ID
     * @description This endpoint retrieves an appointment object by ID.
     */
    get: operations["AppointmentController_findOne"];
    /**
     * Delete an appointment by ID
     * @description This endpoint deletes an appointment object by ID.
     */
    delete: operations["AppointmentController_remove"];
    /**
     * Update an appointment by ID
     * @description This endpoint updates an appointment object by ID.
     */
    patch: operations["AppointmentController_update"];
  };
  "/declaration": {
    get: operations["DeclarationController_findAll"];
    post: operations["DeclarationController_create"];
  };
  "/declaration/{id}": {
    get: operations["DeclarationController_findOne"];
    delete: operations["DeclarationController_remove"];
    patch: operations["DeclarationController_update"];
  };
  "/payment": {
    /**
     * Get a payment intent
     * @description This endpoint return payment intent from stripe api
     */
    post: operations["PaymentController_createPayment"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AuthLocalLoginDto: {
      /**
       * @description Patient email
       * @example hello@example.com
       */
      email: string;
      /**
       * @description Patient password
       * @example password
       */
      password: string;
    };
    ResponsePatientDto: {
      /** @description The ID of the patient */
      id: string;
      /** @description The ID of the user associated with the patient */
      userId: string;
      /** @description The weight of the patient */
      weight: number;
      /** @description The height of the patient */
      height: number;
      /** @description The age of the patient */
      age: number;
      /**
       * @description The blood type of the patient
       * @enum {string}
       */
      bloodType: "O_PLUS" | "O_MINUS" | "A_PLUS" | "A_MINUS" | "B_PLUS" | "B_MINUS" | "AB_PLUS" | "AB_MINUS";
      /**
       * @description The gender of the patient
       * @enum {string}
       */
      gender: "MALE" | "FEMALE";
      /** @description The identity card key of the patient */
      identityCardKey: string;
      /** @description The country of residence of the patient */
      country: string;
      /** @description The state of residence of the patient */
      state?: string;
      /** @description The city of residence of the patient */
      city: string;
      /** @description The street address of the patient */
      street: string;
      /** @description The apartment number of the patient */
      apartment?: string;
      /** @description The zip code of the patient */
      zipCode?: number;
      /** @description The email notification toggle of the patient */
      emailNotificationToggle: boolean;
      /** @description The sms notification toggle of the patient */
      twoFactorAuthToggle: boolean;
      /** @description The two factor authentication toggle of the patient */
      requestBillPaymentApproval: boolean;
    };
    ErrorObject: {
      /**
       * @description Property name
       * @example name
       */
      proparty: string;
      /**
       * @description Detailed error message
       * @example Name is too short
       */
      message: string;
    };
    BadRequestResponse: {
      /**
       * @description Error in numeric format.
       * @example 404
       */
      statusCode: number;
      /** @description Detailed description of the error. */
      message: string | string[];
      /** @description List of errors */
      errors: components["schemas"]["ErrorObject"][];
    };
    ClassicNestResponse: {
      /**
       * @description Error in numeric format.
       * @example 404
       */
      statusCode: number;
      /** @description Detailed description of the error. */
      message: string | string[];
      /**
       * @description Brief description of the error.
       * @example Not Found
       */
      error?: string;
    };
    ResponseWithoutRelationsUserDto: {
      /**
       * @description The ID of the user
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333
       */
      id: string;
      /**
       * @description The first name of the user
       * @example John
       */
      firstName: string;
      /**
       * @description The last name of the user
       * @example Doe
       */
      lastName: string;
      /**
       * @description The phone number of the user
       * @example +380980000000
       */
      phone: string;
      /**
       * @description The email address of the user
       * @example user@example.com
       */
      email: string;
      /**
       * @description Indicates whether the email is verified
       * @example true
       */
      emailVerified: boolean;
      /**
       * @description The Google ID of the user
       * @example google123
       */
      googleId: string;
      /**
       * @description The avatar key of the user
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333
       */
      avatarKey: string;
    };
    AuthSignUpPatientDto: {
      /** @description The weight of the patient */
      weight: number;
      /** @description The height of the patient */
      height: number;
      /** @description The age of the patient */
      age: number;
      /**
       * @description The blood type of the patient
       * @enum {string}
       */
      bloodType: "O_PLUS" | "O_MINUS" | "A_PLUS" | "A_MINUS" | "B_PLUS" | "B_MINUS" | "AB_PLUS" | "AB_MINUS";
      /**
       * @description The gender of the patient
       * @enum {string}
       */
      gender: "MALE" | "FEMALE";
      /** @description The country of residence of the patient */
      country: string;
      /** @description The state of residence of the patient */
      state?: string;
      /** @description The city of residence of the patient */
      city: string;
      /** @description The street address of the patient */
      street: string;
      /** @description The apartment number of the patient */
      apartment?: string;
      /** @description The zip code of the patient */
      zipCode?: number;
    };
    ResponseUserDto: {
      /**
       * @description The ID of the user
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333
       */
      id: string;
      /**
       * @description The first name of the user
       * @example John
       */
      firstName: string;
      /**
       * @description The last name of the user
       * @example Doe
       */
      lastName: string;
      /**
       * @description The phone number of the user
       * @example +380980000000
       */
      phone: string;
      /**
       * @description The email address of the user
       * @example user@example.com
       */
      email: string;
      /**
       * @description Indicates whether the email is verified
       * @example true
       */
      emailVerified: boolean;
      /**
       * @description The Google ID of the user
       * @example google123
       */
      googleId: string;
      /**
       * @description The avatar key of the user
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333
       */
      avatarKey: string;
      /**
       * @description The list of doctors associated with the user
       * @example []
       */
      doctors: string[];
      /**
       * @description The list of patients associated with the user
       * @example []
       */
      patients: string[];
    };
    CreateUserDto: {
      /**
       * @description The first name of the user
       * @example John
       */
      firstName: string;
      /**
       * @description The last name of the user
       * @example Doe
       */
      lastName: string;
      /**
       * @description The phone number of the user
       * @example +380980000000
       */
      phone: string;
      /**
       * @description The email address of the user
       * @example user@example.com
       */
      email: string;
      /**
       * @description The password of the user
       * @example password123
       */
      password: string | null;
      /**
       * @description The Google ID of the user
       * @example google123
       */
      googleId: string | null;
      /**
       * @description The avatar key of the user
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333
       */
      avatarKey: string;
    };
    PatchUserDto: {
      /**
       * @description The first name of the user
       * @example John
       */
      firstName?: string;
      /**
       * @description The last name of the user
       * @example Doe
       */
      lastName?: string;
      /**
       * @description The phone number of the user
       * @example +380980000000
       */
      phone?: string;
      /**
       * @description The email address of the user
       * @example user@example.com
       */
      email?: string;
      /**
       * @description The password of the user
       * @example password123
       */
      password?: string | null;
      /**
       * @description The Google ID of the user
       * @example google123
       */
      googleId?: string | null;
      /**
       * @description The avatar key of the user
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333
       */
      avatarKey?: string;
    };
    CreatePatientDto: {
      /** @description The ID of the user associated with the patient */
      userId: string;
      /** @description The weight of the patient */
      weight: number;
      /** @description The height of the patient */
      height: number;
      /** @description The age of the patient */
      age: number;
      /**
       * @description The blood type of the patient
       * @enum {string}
       */
      bloodType: "O_PLUS" | "O_MINUS" | "A_PLUS" | "A_MINUS" | "B_PLUS" | "B_MINUS" | "AB_PLUS" | "AB_MINUS";
      /**
       * @description The gender of the patient
       * @enum {string}
       */
      gender: "MALE" | "FEMALE";
      /** @description The country of residence of the patient */
      country: string;
      /** @description The state of residence of the patient */
      state?: string;
      /** @description The city of residence of the patient */
      city: string;
      /** @description The street address of the patient */
      street: string;
      /** @description The apartment number of the patient */
      apartment?: string;
      /** @description The zip code of the patient */
      zipCode?: number;
    };
    PatchPatientDto: {
      /** @description The weight of the patient */
      weight?: number;
      /** @description The height of the patient */
      height?: number;
      /** @description The age of the patient */
      age?: number;
      /**
       * @description The blood type of the patient
       * @enum {string}
       */
      bloodType?: "O_PLUS" | "O_MINUS" | "A_PLUS" | "A_MINUS" | "B_PLUS" | "B_MINUS" | "AB_PLUS" | "AB_MINUS";
      /**
       * @description The gender of the patient
       * @enum {string}
       */
      gender?: "MALE" | "FEMALE";
      /** @description The country of residence of the patient */
      country?: string;
      /** @description The state of residence of the patient */
      state?: string;
      /** @description The city of residence of the patient */
      city?: string;
      /** @description The street address of the patient */
      street?: string;
      /** @description The apartment number of the patient */
      apartment?: string;
      /** @description The zip code of the patient */
      zipCode?: number;
      /** @description The ID of declaration between the patient and the user */
      declarationId: string;
      /** @description Identity card key of the patient */
      identityCardKey: string;
      /** @description The email notification toggle of the patient */
      emailNotificationToggle: boolean;
      /** @description The sms notification toggle of the patient */
      twoFactorAuthToggle: boolean;
      /** @description The two factor authentication toggle of the patient */
      requestBillPaymentApproval: boolean;
    };
    CreateFavoriteDto: {
      /**
       * @description The ID of the doctor
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333
       */
      doctorId: string;
      /**
       * @description The ID of the patient
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333
       */
      patientId: string;
    };
    CreateDoctorDto: {
      /**
       * @description The ID of the user
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333
       */
      userId: string;
      /**
       * @description The pay rate of the doctor
       * @example 100
       */
      payrate: number;
      /**
       * @description About section of the doctor
       * @example Experienced doctor with a focus on patient care
       */
      about: string;
      /** @description An array of IDs for specializations of the Doctor */
      specializationIds: string[];
      /** @description An array of IDs for hospitals the Doctor is associated with */
      hospitalIds: string[];
    };
    ResponseDoctorDto: {
      /**
       * @description The ID of the doctor
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333
       */
      id: string;
      /**
       * @description The pay rate of the doctor
       * @example 100
       */
      payrate: number;
      /**
       * @description About section of the doctor
       * @example Experienced doctor with a focus on patient care
       */
      about: string;
      /**
       * @description The ID of the user associated with the doctor
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333
       */
      userId: string;
    };
    PatchDoctorDto: {
      /**
       * @description The pay rate of the doctor
       * @example 100
       */
      payrate: number;
      /**
       * @description About section of the doctor
       * @example Experienced doctor with a focus on patient care
       */
      about: string;
    };
    CreateHospitalDto: {
      /** @description The name of the hospital */
      name: string;
      /** @description The country where the hospital is situated */
      country: string;
      /** @description The state where the hospital is situated */
      state?: string;
      /** @description The city where the hospital is situated */
      city: string;
      /** @description The street where the hospital is situated */
      street: string;
      /** @description The apartment where the hospital is situated */
      apartment: string;
      /** @description The zip code of the hospital */
      zipCode: number;
    };
    ResponseHospitalDto: {
      /** @description The name of the hospital */
      name: string;
      /** @description The country where the hospital is situated */
      country: string;
      /** @description The state where the hospital is situated */
      state: string | null;
      /** @description The city where the hospital is situated */
      city: string;
      /** @description The street where the hospital is situated */
      street: string;
      /** @description The apartment where the hospital is situated */
      apartment: string;
      /** @description The zip code of the hospital */
      zipCode: number;
    };
    PatchHospitalDto: {
      /** @description The name of the hospital */
      name?: string;
      /** @description The country where the hospital is situated */
      country?: string;
      /** @description The state where the hospital is situated */
      state?: string;
      /** @description The city where the hospital is situated */
      city?: string;
      /** @description The street where the hospital is situated */
      street?: string;
      /** @description The apartment where the hospital is situated */
      apartment?: string;
      /** @description The zip code of the hospital */
      zipCode?: number;
    };
    CreateSpecializationDto: {
      /**
       * @description Specialization name
       * @example Surgeon
       */
      name: string;
    };
    ResponseSpecializationDto: {
      /**
       * @description Spesialization id
       * @example 1
       */
      id: string;
      /**
       * @description Spesialization name
       * @example Surgeon
       */
      name: string;
    };
    UpdateSpecializationDto: {
      /**
       * @description Specialization name
       * @example Surgeon
       */
      name?: string;
    };
    CreateAppointmentDto: {
      /** @description The ID of the doctor the appointment is created with */
      doctorId: string;
      /** @description The ID of the patient who created the appointment */
      patientId: string;
      /** @description The date and time of the appointment in ISO8601 fromat */
      assignedAt: Record<string, never>;
      /**
       * @description The status of the appointment
       * @enum {string}
       */
      status: "PLANNED" | "COMPLETED" | "CANCELED";
      /** @description Notes for the appointment */
      notes: string;
    };
    ResponseAppointmentDto: {
      /** @description The ID of the appointment */
      id: string;
      /** @description The ID of the doctor the appointment is created with */
      doctorId: string;
      /** @description The ID of the patient who created the appointment */
      patientId: string;
      /**
       * Format: date-time
       * @description assingedAt for the appointment
       */
      assignedAt: string;
      /** @description Notes for the appointment */
      notes: string;
      /**
       * @description The status of the appointment
       * @enum {string}
       */
      status: "PLANNED" | "COMPLETED" | "CANCELED";
      /** @description The key of the video record of the appointment */
      videoRecordKey: string;
      /** @description The key of the file with the invoice for the appointment */
      paymentInvoiceKey: string;
      /** @description The key of the file with the receipt for payment for the appointment */
      paymentReceiptKey: string;
    };
    PatchAppointmentDto: {
      /** @description The ID of the doctor the appointment is created with */
      doctorId?: string;
      /** @description The ID of the patient who created the appointment */
      patientId?: string;
      /** @description The date and time of the appointment in ISO8601 fromat */
      assignedAt?: Record<string, never>;
      /**
       * @description The status of the appointment
       * @enum {string}
       */
      status?: "PLANNED" | "COMPLETED" | "CANCELED";
      /** @description Notes for the appointment */
      notes?: string;
    };
    CreateDeclarationDto: {
      /**
       * @description Doctor Id
       * @example 8ef6b3ed-24c5-48d7-8627-6f792096e753
       */
      doctorId: string;
      /**
       * @description Patient Id
       * @example be464d16-37b9-44f7-b3b2-b9ace817b695
       */
      patientId: string;
    };
    CreatePaymentDto: {
      /**
       * @description The appointment duration in hour
       * @example 1
       */
      appointmentDuration: number;
      /**
       * @description The price per hour
       * @example 50
       */
      pricePerHour: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Login with an email and a password
   * @description This endpoint is used for logging in with an email and password.
   */
  AuthController_localLogin: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthLocalLoginDto"];
      };
    };
    responses: {
      /** @description User data */
      200: {
        content: {
          "application/json": components["schemas"]["ResponsePatientDto"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Local sign up
   * @description This endpoint is used for the local sign up.
   */
  AuthController_signUpFirstStep: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResponseWithoutRelationsUserDto"];
      };
    };
    responses: {
      /** @description Patient data */
      200: {
        content: {
          "application/json": components["schemas"]["ResponsePatientDto"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  AuthController_signUpPatientSecondStep: {
    parameters: {
      path: {
        token: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthSignUpPatientDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  AuthController_googleLogin: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  AuthController_googleLoginRedirect: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  /**
   * Logging out
   * @description This endpoint is used for logging out.
   */
  AuthController_logout: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthLocalLoginDto"];
      };
    };
    responses: {
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Get a user by ID
   * @description This endpoint retrieves a user object by ID.
   */
  UserController_getUser: {
    parameters: {
      path: {
        /**
         * @description User ID
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    responses: {
      /** @description User exists */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseUserDto"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description User not found */
      404: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Delete a user by ID
   * @description This endpoint deletes a user object by ID.
   */
  UserController_deleteUser: {
    parameters: {
      path: {
        /**
         * @description User ID
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    responses: {
      /** @description User deleted */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description User not found */
      404: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Update a user by ID
   * @description This endpoint updates a user object by ID.
   */
  UserController_patchUser: {
    parameters: {
      path: {
        /**
         * @description User ID
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchUserDto"];
      };
    };
    responses: {
      /** @description User updated */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseUserDto"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description User not found */
      404: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Create a new user
   * @description This endpoint creates a new user.
   */
  UserController_createUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserDto"];
      };
    };
    responses: {
      /** @description User created */
      201: {
        content: {
          "application/json": components["schemas"]["ResponseUserDto"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Get a patient by ID
   * @description This endpoint retrieves a patient object by ID.
   */
  PatientController_getPatient: {
    parameters: {
      path: {
        /**
         * @description Patient ID
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    responses: {
      /** @description Patient exists */
      200: {
        content: {
          "application/json": components["schemas"]["ResponsePatientDto"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Patient not found */
      404: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Delete a patient by ID
   * @description This endpoint deletes a patient object by ID.
   */
  PatientController_deletePatient: {
    parameters: {
      path: {
        /**
         * @description Patient ID
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    responses: {
      /** @description Patient deleted */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Patient not found */
      404: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Update a patient by ID
   * @description This endpoint updates a patient object by ID.
   */
  PatientController_patchPatient: {
    parameters: {
      path: {
        /**
         * @description Patient ID
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchPatientDto"];
      };
    };
    responses: {
      /** @description Patient updated */
      200: {
        content: {
          "application/json": components["schemas"]["ResponsePatientDto"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Patient not found */
      404: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Create a new patient
   * @description This endpoint creates a new patient.
   */
  PatientController_createPatient: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePatientDto"];
      };
    };
    responses: {
      /** @description Patient created */
      201: {
        content: {
          "application/json": components["schemas"]["ResponsePatientDto"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Get favorite doctors
   * @description This endpoint retrieves favorite doctors.
   */
  FavoriteController_getFavorites: {
    responses: {
      /** @description Favorite doctors */
      200: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Add a doctor to favorites
   * @description This endpoint addes a doctor to favorites list.
   */
  FavoriteController_createFavorite: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateFavoriteDto"];
      };
    };
    responses: {
      /** @description Doctor is added to favorite doctors. */
      201: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Get a favorite doctor by ID
   * @description This endpoint retrieves a favorite doctor by ID.
   */
  FavoriteController_getFovorite: {
    parameters: {
      path: {
        /**
         * @description Doctor ID
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    responses: {
      /** @description Favorite doctor by ID exists */
      200: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Favorite doctor not found */
      404: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Remove the doctor from favorites
   * @description This endpoint deletes a doctor from favorite doctors.
   */
  FavoriteController_deleteFavorite: {
    parameters: {
      path: {
        /**
         * @description Doctor ID
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    responses: {
      /** @description Doctor removed from favorites */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Get all doctors
   * @description This endpoint retrieves all doctors.
   */
  DoctorController_getDoctors: {
    parameters: {
      query?: {
        /** @description ID of the hospital to filter doctors by */
        hospitalId?: string;
        /** @description ID of the specialization to filter doctors by */
        specializationId?: string;
        /** @description Search string */
        search?: string;
      };
    };
    responses: {
      /** @description All doctors */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDoctorDto"][];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Create a new doctor
   * @description Creates a new doctor profile
   */
  DoctorController_createDoctor: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateDoctorDto"];
      };
    };
    responses: {
      /** @description Doctor created */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDoctorDto"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Get a doctor by ID
   * @description This endpoint retrieves a doctor by ID.
   */
  DoctorController_getDoctor: {
    parameters: {
      path: {
        /**
         * @description Doctor ID
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    responses: {
      /** @description A doctor object got by ID */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDoctorDto"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Doctor not found */
      404: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Delete a doctor by ID
   * @description This endpoint deletes a doctor object by ID.
   */
  DoctorController_deleteDoctor: {
    parameters: {
      path: {
        /**
         * @description Doctor ID
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    responses: {
      /** @description Doctor deleted */
      200: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Doctor not found */
      404: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Update a doctor by ID
   * @description This endpoint updates a doctor object by ID.
   */
  DoctorController_patchDoctor: {
    parameters: {
      path: {
        /**
         * @description Doctor ID
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchDoctorDto"];
      };
    };
    responses: {
      /** @description Doctor updated */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseDoctorDto"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Doctor not found */
      404: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Get a list of hospitals
   * @description This endpoint retrieves a list of hospital objects.
   */
  HospitalController_getHospitals: {
    responses: {
      /** @description Hospitals exist */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseHospitalDto"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Create a new hospital
   * @description This endpoint creates a new hospital.
   */
  HospitalController_createHospital: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateHospitalDto"];
      };
    };
    responses: {
      /** @description Hospital created */
      201: {
        content: {
          "application/json": components["schemas"]["ResponseHospitalDto"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Get a hospital by ID
   * @description This endpoint retrieves a hospital object by ID.
   */
  HospitalController_getHospital: {
    parameters: {
      path: {
        /**
         * @description Hospital ID
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    responses: {
      /** @description Hospital exists */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseHospitalDto"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Hospital not found */
      404: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Delete a hospital by ID
   * @description This endpoint deletes a hospital object by ID.
   */
  HospitalController_deleteHospital: {
    parameters: {
      path: {
        /**
         * @description Hospital ID
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    responses: {
      /** @description Hospital deleted */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Hospital not found */
      404: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Update a hospital by ID
   * @description This endpoint updates a hospital object by ID.
   */
  HospitalController_patchHospital: {
    parameters: {
      path: {
        /**
         * @description Patient ID
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchHospitalDto"];
      };
    };
    responses: {
      /** @description Hospital updated */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseHospitalDto"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Hospital not found */
      404: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  SpecializationController_getSpecializations: {
    responses: {
      /** @description Return specializations list */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseSpecializationDto"][];
        };
      };
    };
  };
  SpecializationController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSpecializationDto"];
      };
    };
    responses: {
      /** @description Spesialization created */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseSpecializationDto"];
        };
      };
    };
  };
  SpecializationController_getSpecialization: {
    parameters: {
      path: {
        /**
         * @description Spesialization id
         * @example 1
         */
        id: string;
      };
    };
    responses: {
      /** @description Spesialization object */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseSpecializationDto"];
        };
      };
    };
  };
  SpecializationController_deleteSpecialization: {
    parameters: {
      path: {
        /**
         * @description Spesialization id
         * @example 1
         */
        id: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  SpecializationController_updateSpecialization: {
    parameters: {
      path: {
        /**
         * @description Spesialization id
         * @example 1
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSpecializationDto"];
      };
    };
    responses: {
      /** @description Spesialization updated */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseSpecializationDto"];
        };
      };
    };
  };
  /**
   * Uploading a file
   * @description This endpoint is used for the file uploading.
   */
  FileController_uploadFile: {
    /** @description Formdata object with a file data */
    requestBody: {
      content: {
        "multipart/form-data": string;
      };
    };
    responses: {
      /** @description Message: File was uploaded successfully */
      201: {
        content: {
          "application/json": string;
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Get a link for a file by name
   * @description This endpoint retrieves a link for a file by name.
   */
  FileController_getFile: {
    parameters: {
      path: {
        /**
         * @description File name
         * @example file.pdf
         */
        name: string;
      };
    };
    responses: {
      /** @description The link for the file */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description File not found */
      404: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Delete a file by name
   * @description This endpoint deletes a file by name.
   */
  FileController_deleteFile: {
    parameters: {
      path: {
        /**
         * @description File name
         * @example file.pdf
         */
        name: string;
      };
    };
    responses: {
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description File not found */
      404: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Get a list of all appointments
   * @description This endpoint retrieves a list of all appointment objects.
   */
  AppointmentController_findAll: {
    responses: {
      /** @description Appointments exist */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAppointmentDto"];
        };
      };
      /** @description Internalserver error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Create a new appointment
   * @description This endpoint creates a new appointment.
   */
  AppointmentController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAppointmentDto"];
      };
    };
    responses: {
      /** @description Appointment created */
      201: {
        content: {
          "application/json": components["schemas"]["ResponseAppointmentDto"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Get a list of appointments of the patient
   * @description This endpoint retrieves a list of appointment objects of the patient by it's ID.
   */
  AppointmentController_findAllByPatientId: {
    parameters: {
      path: {
        /**
         * @description Patient ID
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    responses: {
      /** @description Appointments exist */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAppointmentDto"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Get a list of appointments of the doctor
   * @description This endpoint retrieves a list of appointment objects of the doctor by it's ID.
   */
  AppointmentController_findAllByDoctorId: {
    parameters: {
      path: {
        /**
         * @description Doctor ID
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    responses: {
      /** @description Appointments exist */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAppointmentDto"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Get an appointment by ID
   * @description This endpoint retrieves an appointment object by ID.
   */
  AppointmentController_findOne: {
    parameters: {
      path: {
        /**
         * @description Appointment ID
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    responses: {
      /** @description Appointment exists */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAppointmentDto"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Appointment not found */
      404: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Delete an appointment by ID
   * @description This endpoint deletes an appointment object by ID.
   */
  AppointmentController_remove: {
    parameters: {
      path: {
        /**
         * @description Appointment ID
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    responses: {
      /** @description Appointment deleted */
      204: {
        content: never;
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Appointment not found */
      404: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  /**
   * Update an appointment by ID
   * @description This endpoint updates an appointment object by ID.
   */
  AppointmentController_update: {
    parameters: {
      path: {
        /**
         * @description Appointment ID
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchAppointmentDto"];
      };
    };
    responses: {
      /** @description Appointment updated */
      200: {
        content: {
          "application/json": components["schemas"]["ResponseAppointmentDto"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestResponse"];
        };
      };
      /** @description Appointment not found */
      404: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["ClassicNestResponse"];
        };
      };
    };
  };
  DeclarationController_findAll: {
    responses: {
      /** @description Declarations list */
      200: {
        content: {
          "application/json": components["schemas"]["CreateDeclarationDto"][];
        };
      };
    };
  };
  DeclarationController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateDeclarationDto"];
      };
    };
    responses: {
      /** @description Declaration created */
      200: {
        content: {
          "application/json": components["schemas"]["CreateDeclarationDto"];
        };
      };
    };
  };
  DeclarationController_findOne: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Get declaration */
      200: {
        content: {
          "application/json": components["schemas"]["CreateDeclarationDto"];
        };
      };
    };
  };
  DeclarationController_remove: {
    parameters: {
      path: {
        /**
         * @description Declaration id
         * @example 1
         */
        id: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  DeclarationController_update: {
    parameters: {
      path: {
        /**
         * @description Declaration id
         * @example 1
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateDeclarationDto"];
      };
    };
    responses: {
      /** @description Updated declaration */
      200: {
        content: {
          "application/json": components["schemas"]["CreateDeclarationDto"][];
        };
      };
    };
  };
  /**
   * Get a payment intent
   * @description This endpoint return payment intent from stripe api
   */
  PaymentController_createPayment: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePaymentDto"];
      };
    };
    responses: {
      /** @description Get payment intent */
      201: {
        content: {
          "application/json": components["schemas"]["CreatePaymentDto"];
        };
      };
    };
  };
}
