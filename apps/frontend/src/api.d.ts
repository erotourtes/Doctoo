/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth/login/patient': {
    /** Login patient */
    post: operations['AuthController_localLogin'];
  };
  '/auth/login/patient/mfa': {
    /** Login patient with MFA */
    post: operations['AuthController_verifyMFA'];
  };
  '/auth/signup': {
    /** Sign up user */
    post: operations['AuthController_signUpUserFirstStep'];
  };
  '/auth/signup/patient/{token}': {
    /** Sign up patient */
    post: operations['AuthController_signUpPatientSecondStep'];
  };
  '/auth/login/google': {
    /** Login with Google */
    get: operations['AuthController_googleLogin'];
  };
  '/auth/login/google/redirect': {
    /** Login with Google redirect */
    get: operations['AuthController_googleLoginRedirect'];
  };
  '/auth/logout': {
    /** Logout */
    get: operations['AuthController_logout'];
  };
  '/auth/password/change': {
    /** Change password */
    post: operations['AuthController_changePassword'];
  };
  '/auth/patient/me': {
    /** Get patient */
    get: operations['AuthController_getPatient'];
  };
  '/user/me': {
    /** Get curent login user */
    get: operations['UserController_getMeInfo'];
  };
  '/user/{id}': {
    /** Get user */
    get: operations['UserController_getUser'];
    /** Delete user */
    delete: operations['UserController_deleteUser'];
    /** Update user */
    patch: operations['UserController_patchUser'];
  };
  '/user': {
    /** Create user */
    post: operations['UserController_createUser'];
  };
  '/patient/{id}': {
    /** Get patient */
    get: operations['PatientController_getPatient'];
    /** Delete patient */
    delete: operations['PatientController_deletePatient'];
    /** Update patient */
    patch: operations['PatientController_patchPatient'];
  };
  '/patient': {
    /** Create patient */
    post: operations['PatientController_createPatient'];
  };
  '/patient/{id}/allergy': {
    /** Get patient allergies */
    get: operations['PatientController_getPatientAllergies'];
    /** Create patient allergy */
    post: operations['PatientController_createPatientAllergy'];
  };
  '/patient/{id}/condition': {
    /** Get patient conditions */
    get: operations['PatientController_getPatientConditions'];
    /** Create patient conditions */
    post: operations['PatientController_createPatientConditions'];
  };
  '/favorite': {
    /** Get favorites */
    get: operations['FavoriteController_getFavorites'];
    /** Create favorite */
    post: operations['FavoriteController_createFavorite'];
  };
  '/favorite/{id}': {
    /** Get favorite */
    get: operations['FavoriteController_getFovorite'];
    /** Delete favorite */
    delete: operations['FavoriteController_deleteFavorite'];
  };
  '/doctor': {
    /** Get all doctors */
    get: operations['DoctorController_getDoctors'];
    /** Create doctor */
    post: operations['DoctorController_createDoctor'];
  };
  '/doctor/doctors/{id}': {
    /** Get all doctors by patient */
    get: operations['DoctorController_getPatientDoctors'];
  };
  '/doctor/doctors/my': {
    /** Get my doctors */
    get: operations['DoctorController_getMyDoctors'];
  };
  '/doctor/{id}': {
    /** Get doctor */
    get: operations['DoctorController_getDoctor'];
    /** Delete doctor */
    delete: operations['DoctorController_deleteDoctor'];
    /** Update doctor */
    patch: operations['DoctorController_patchDoctor'];
  };
  '/hospital': {
    /** Get all hospitals */
    get: operations['HospitalController_getHospitals'];
    /** Create hospital */
    post: operations['HospitalController_createHospital'];
  };
  '/hospital/{id}': {
    /** Get hospital */
    get: operations['HospitalController_getHospital'];
    /** Delete hospital */
    delete: operations['HospitalController_deleteHospital'];
    /** Update hospital */
    patch: operations['HospitalController_patchHospital'];
  };
  '/specialization': {
    /** Get all specializations */
    get: operations['SpecializationController_getSpecializations'];
    /** Create specialization */
    post: operations['SpecializationController_createSpecialization'];
  };
  '/specialization/{id}': {
    /** Get specialization */
    get: operations['SpecializationController_getSpecialization'];
    /** Delete specialization */
    delete: operations['SpecializationController_deleteSpecialization'];
    /** Update specialization */
    patch: operations['SpecializationController_patchSpecialization'];
  };
  '/review/doctor/{doctorId}': {
    /** Get reviews by doctor */
    get: operations['ReviewController_getReviewsByDoctorId'];
    /** Create a new review */
    post: operations['ReviewController_createReview'];
  };
  '/review': {
    /** Get reviews */
    get: operations['ReviewController_getReviews'];
  };
  '/review/doctor/{doctorId}/average': {
    /** Get the average rating of a doctor */
    get: operations['ReviewController_getAvgRateByDoctorId'];
  };
  '/review/{id}': {
    /** Get review */
    get: operations['ReviewController_getReview'];
  };
  '/review/{reviewId}': {
    /** Delete a review */
    delete: operations['ReviewController_deleteReview'];
    /** Update a review */
    patch: operations['ReviewController_patchReview'];
  };
  '/file/upload': {
    /** Upload file */
    post: operations['FileController_uploadFile'];
  };
  '/file/{name}': {
    /** Get file */
    get: operations['FileController_getFileByName'];
    /** Delete file */
    delete: operations['FileController_deleteFileByName'];
  };
  '/appointment': {
    /** Get all appointments */
    get: operations['AppointmentController_getAppointments'];
    /** Create an appointment */
    post: operations['AppointmentController_createAppointment'];
  };
  '/appointment/my': {
    /** Get my appointment */
    get: operations['AppointmentController_getMyAppointments'];
  };
  '/appointment/patient/{id}': {
    /** Get all appointments by patient id */
    get: operations['AppointmentController_getAppointmentsByPatientId'];
  };
  '/appointment/doctor/{id}': {
    /** Get all appointments by doctor id */
    get: operations['AppointmentController_getAppointmentsByDoctorId'];
  };
  '/appointment/{id}': {
    /** Get an appointment */
    get: operations['AppointmentController_getAppointment'];
    /** Delete an appointment */
    delete: operations['AppointmentController_deleteAppointment'];
    /** Update an appointment */
    patch: operations['AppointmentController_patchAppointment'];
  };
  '/declaration': {
    /** Get declarations */
    get: operations['DeclarationController_getDeclrations'];
    /** Create declaration */
    post: operations['DeclarationController_createDeclaration'];
  };
  '/declaration/{id}': {
    /** Get declaration */
    get: operations['DeclarationController_getDeclaration'];
    /** Delete declaration */
    delete: operations['DeclarationController_deleteDeclaration'];
    /** Update declaration */
    patch: operations['DeclarationController_patchDeclaration'];
  };
  '/condition': {
    /**
     * Get all conditions
     * @description This endpoint retrieves all conditions.
     */
    get: operations['ConditionController_findAll'];
    /**
     * Create a new condition
     * @description This endpoint creates a new condition.
     */
    post: operations['ConditionController_create'];
  };
  '/condition/{id}': {
    /**
     * Get a condition by ID
     * @description This endpoint retrieves a condition object by ID.
     */
    get: operations['ConditionController_findOne'];
    /**
     * Delete a condition by ID
     * @description This endpoint deletes a condition object by ID.
     */
    delete: operations['ConditionController_remove'];
    /**
     * Update a condition by ID
     * @description This endpoint updates a condition object by ID.
     */
    patch: operations['ConditionController_update'];
  };
  '/allergy': {
    /** Get all allergies */
    get: operations['AllergyController_getAllergies'];
    /** Create allergy */
    post: operations['AllergyController_createAllergy'];
  };
  '/allergy/{id}': {
    /** Get allergy */
    get: operations['AllergyController_getAllergy'];
    /** Delete allergy */
    delete: operations['AllergyController_deleteAllergy'];
    /** Update allergy */
    patch: operations['AllergyController_patchAllergy'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    LocalLoginDto: {
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description User password.
       * @example password
       */
      password: string;
    };
    LocalLoginResponseDto: {
      /**
       * @description Whether two-factor authorization is enabled for the user.
       * @example false
       */
      isMFAEnabled: boolean;
    };
    ErrorValidationObject: {
      /**
       * @description The name of the field where validation failed.
       * @example name
       */
      proparty: string;
      /**
       * @description Detailed description of the error.
       * @example Name is too short
       */
      message: string;
    };
    BadRequestResponse: {
      /**
       * @description Error in numeric format.
       * @example 404
       */
      statusCode: number;
      /** @description Detailed description of the error. */
      message: string | string[];
      /** @description A list of all fields that failed validation. */
      errors: components['schemas']['ErrorValidationObject'][];
    };
    ClassicNestResponse: {
      /**
       * @description Error in numeric format.
       * @example 404
       */
      statusCode: number;
      /** @description Detailed description of the error. */
      message: string | string[];
      /**
       * @description Brief description of the error.
       * @example The name must be longer than 4 characters.
       */
      error?: string;
    };
    LocalLoginTwoFactorDto: {
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description User password.
       * @example password
       */
      password: string;
      /**
       * @description One-time unique authorization code.
       * @example 236854
       */
      code: string;
    };
    SignUpUserDto: {
      /**
       * @description The user's real first name.
       * @example John
       */
      firstName: string;
      /**
       * @description The user's real last name.
       * @example Doe
       */
      lastName: string;
      /**
       * @description The user's phone number in national format.
       * @example +380000000000
       */
      phone: string;
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description User password.
       * @example password
       */
      password?: string;
      /**
       * @description Unique Google Id of the user.
       * @example G-123456789
       */
      googleId?: string;
      /**
       * @description Link to the user image.
       * @example https://imgur.com/2Bmq0jd
       */
      avatarImgUrl?: string;
    };
    ResponseUserDto: {
      /**
       * @description Unique user id.
       * @example 3452489b-fdf6-4c0f-a5f3-a237fb26a892
       */
      id: string;
      /**
       * @description The user's real first name.
       * @example John
       */
      firstName: string;
      /**
       * @description The user's real last name.
       * @example Doe
       */
      lastName: string;
      /**
       * @description The user's phone number in national format.
       * @example +380000000000
       */
      phone: string;
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description Whether the user has confirmed his mail in the service.
       * @example false
       */
      emailVerified: boolean;
      /**
       * @description Unique Google Id of the user.
       * @example G-123456789
       */
      googleId?: string;
      /**
       * @description The unique file id of the file in S3 storage.
       * @example 243b29d2-589a-47bf-b779-91df8f0f7c38.jpeg
       */
      avatarKey: string;
      /**
       * @description Represent user role
       * @example DOCTOR
       */
      role?: string;
    };
    SignUpPatientDto: {
      /**
       * @description Patient's weight.
       * @example 65
       */
      weight: number;
      /**
       * @description Patient height.
       * @example 185
       */
      height: number;
      /**
       * @description Patient's age.
       * @example 35
       */
      age: number;
      /**
       * @description The patient's blood type.
       * @example AB_MINUS
       * @enum {string}
       */
      bloodType: 'O_PLUS' | 'O_MINUS' | 'A_PLUS' | 'A_MINUS' | 'B_PLUS' | 'B_MINUS' | 'AB_PLUS' | 'AB_MINUS';
      /**
       * @description Patient gender.
       * @example MALE
       * @enum {string}
       */
      gender: 'MALE' | 'FEMALE';
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description Patient's apartment number.
       * @example 35A
       */
      apartment?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode?: number;
    };
    UnauthorizedResponse: {
      /**
       * @description Detailed description of the error.
       * @example Unauthorized
       */
      message: string;
      /**
       * @description Error in numeric format.
       * @example 401
       */
      statusCode: number;
    };
    ChangePasswordDto: {
      /**
       * @description Old user password.
       * @example password
       */
      oldPassword: string;
      /**
       * @description New user password.
       * @example pa$$w0rd
       */
      newPassword: string;
    };
    BadRequestException: Record<string, never>;
    ResponseAllergyDto: {
      /**
       * @description Unique allergy id.
       * @example f31f8bd2-12bd-4582-be5a-06c7c02d1afd
       */
      id: string;
      /**
       * @description Name of allergy.
       * @example Dust
       */
      name: string;
    };
    ResponseConditionDto: {
      /**
       * @description Condition id
       * @example ad0d7175-29a1-44b6-b73f-4b21fca6ffdc
       */
      id: string;
      /**
       * @description Condition name
       * @example Asthma
       */
      name: string;
    };
    ResponsePatientDto: {
      /**
       * @description Unique patient id.
       * @example fbf68054-73b0-43c5-ad23-58f3be5b1015
       */
      id: string;
      /**
       * @description The unique user id of the user to which the patient is bound.
       * @example aff14372-2a86-4488-8d33-d1af296ea3e0
       */
      userId: string;
      /**
       * @description Patient's weight.
       * @example 65
       */
      weight: number;
      /**
       * @description Patient height.
       * @example 185
       */
      height: number;
      /**
       * @description Patient's age.
       * @example 35
       */
      age: number;
      /**
       * @description The patient's blood type.
       * @example AB_MINUS
       * @enum {string}
       */
      bloodType: 'O_PLUS' | 'O_MINUS' | 'A_PLUS' | 'A_MINUS' | 'B_PLUS' | 'B_MINUS' | 'AB_PLUS' | 'AB_MINUS';
      /**
       * @description Patient gender.
       * @example MALE
       * @enum {string}
       */
      gender: 'MALE' | 'FEMALE';
      /**
       * @description A unique key to the patient identification file.
       * @example fb13ec87-6458-4f73-9cc6-f93e99aa4156
       */
      identityCardKey: string;
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description Patient's apartment number.
       * @example 35A
       */
      apartment?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode: number;
      /**
       * @description Status of alerts to the patient's email.
       * @default false
       */
      emailNotificationToggle: boolean;
      /**
       * @description Whether to request a two-factor confirmation when making a payment.
       * @example false
       */
      requestBillPaymentApproval: boolean;
      /** @description The two factor authentication toggle of the patient */
      twoFactorAuthToggle: boolean;
      /**
       * @description First name of the doctor
       * @example John
       */
      firstName: string;
      /**
       * @description Last name of the doctor
       * @example Doe
       */
      lastName: string;
      /**
       * @description Key of the avatar of the doctor
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333.jpg
       */
      avatarKey: string;
      /**
       * @description The phone of the doctor
       * @example +38099561735634
       */
      phone: string;
      /**
       * @description Email of the doctor
       * @example johndoe@mail.com
       */
      email: string;
      /**
       * @description List of allergies of the patient.
       * @example {
       *   "id": "53b9a64f-f3f5-47f0-8806-39dfd15f04e5",
       *   "name": "Peanuts"
       * }
       */
      allergies: components['schemas']['ResponseAllergyDto'][];
      /**
       * @description List of conditions of the patient.
       * @example {
       *   "id": "96391730-78d6-4435-872c-1bb6af8b03ce",
       *   "name": "Diabetes"
       * }
       */
      conditions: components['schemas']['ResponseConditionDto'][];
    };
    CreateUserDto: {
      /**
       * @description The user's real first name.
       * @example John
       */
      firstName: string;
      /**
       * @description The user's real last name.
       * @example Doe
       */
      lastName: string;
      /**
       * @description The user's phone number in national format.
       * @example +380000000000
       */
      phone: string;
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email: string;
      /**
       * @description User password.
       * @example password
       */
      password?: string;
      /**
       * @description Unique Google Id of the user.
       * @example G-123456789
       */
      googleId?: string;
      /**
       * @description The unique file id of the file in S3 storage.
       * @example fb63fcac-11ae-4536-b177-f85e8343f84b.jpeg
       */
      avatarKey: string;
    };
    PatchUserWithoutCredentialsDto: {
      /**
       * @description The user's real first name.
       * @example John
       */
      firstName?: string;
      /**
       * @description The user's real last name.
       * @example Doe
       */
      lastName?: string;
      /**
       * @description The user's phone number in national format.
       * @example +380000000000
       */
      phone?: string;
      /**
       * @description Unique user mail.
       * @example example@example.com
       */
      email?: string;
      /**
       * @description The unique file id of the file in S3 storage.
       * @example fb63fcac-11ae-4536-b177-f85e8343f84b.jpeg
       */
      avatarKey?: string;
    };
    CreatePatientDto: {
      /**
       * @description The unique user id of the user to which the patient is bound.
       * @example 770c93f7-f368-4ea3-af89-bdef09f4e14e
       */
      userId: string;
      /**
       * @description Patient's weight.
       * @example 65
       */
      weight: number;
      /**
       * @description Patient height.
       * @example 185
       */
      height: number;
      /**
       * @description Patient's age.
       * @example 35
       */
      age: number;
      /**
       * @description The patient's blood type.
       * @example AB_MINUS
       * @enum {string}
       */
      bloodType: 'O_PLUS' | 'O_MINUS' | 'A_PLUS' | 'A_MINUS' | 'B_PLUS' | 'B_MINUS' | 'AB_PLUS' | 'AB_MINUS';
      /**
       * @description Patient gender.
       * @example MALE
       * @enum {string}
       */
      gender: 'MALE' | 'FEMALE';
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description Patient's apartment number.
       * @example 35A
       */
      apartment?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode?: number;
    };
    PatchPatientDto: {
      /**
       * @description Patient's weight.
       * @example 65
       */
      weight?: number;
      /**
       * @description Patient height.
       * @example 185
       */
      height?: number;
      /**
       * @description Patient's age.
       * @example 35
       */
      age?: number;
      /**
       * @description The patient's blood type.
       * @example AB_MINUS
       * @enum {string}
       */
      bloodType?: 'O_PLUS' | 'O_MINUS' | 'A_PLUS' | 'A_MINUS' | 'B_PLUS' | 'B_MINUS' | 'AB_PLUS' | 'AB_MINUS';
      /**
       * @description Patient gender.
       * @example MALE
       * @enum {string}
       */
      gender?: 'MALE' | 'FEMALE';
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country?: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city?: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street?: string;
      /**
       * @description Patient's apartment number.
       * @example 35A
       */
      apartment?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode?: number;
      /**
       * @description Unique declaration id.
       * @example 12234
       */
      declarationId?: string;
      /**
       * @description A unique key to the patient identification file.
       * @example 15143568-50e9-46f5-8ce8-71cc8f570c95
       */
      identityCardKey?: string;
      /**
       * @description Status of alerts to the patient's email.
       * @default false
       */
      emailNotificationToggle?: boolean;
      /**
       * @description Status of alerts on the patient's text messages.
       * @example true
       */
      twoFactorAuthToggle?: boolean;
      /**
       * @description Whether to request a two-factor confirmation when making a payment.
       * @example false
       */
      requestBillPaymentApproval?: boolean;
    };
    CreatePatientAllergyDto: {
      /**
       * @description Unique allergy id.
       * @example [
       *   "c4e829f4-bc1b-4f84-a97f-1602b9aff828"
       * ]
       */
      allergyIds: string[];
    };
    ResponsePatientAllergyDto: {
      /**
       * @description How many allergies created for patient.
       * @example 1
       */
      count: number;
    };
    CreatePatientConditionDto: {
      /** @description Id of condition */
      conditionIds: string[];
    };
    ResponsePatientConditionsDto: {
      /**
       * @description How many conditions created for patient.
       * @example 1
       */
      count: number;
    };
    CreateFavoriteDto: {
      /**
       * @description Unique doctor id.
       * @example 3b4ccdee-d391-4e18-aec7-818cada43fbb
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example fa836db9-1fe7-4da0-8c60-7ba8279a62d1
       */
      patientId: string;
    };
    ResponseFavoriteDto: {
      /**
       * @description Unique doctor id.
       * @example 3b4ccdee-d391-4e18-aec7-818cada43fbb
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example fa836db9-1fe7-4da0-8c60-7ba8279a62d1
       */
      patientId: string;
      /**
       * @description Unique favorite id.
       * @example e3dba04c-bed4-40b2-bcb6-f761c28fbf38
       */
      id: string;
    };
    CreateDoctorDto: {
      /**
       * @description Unique user id.
       * @example 02986447-514e-44d5-a545-fddde354bbb3
       */
      userId: string;
      /**
       * @description Doctor's hourly rate.
       * @example 100
       */
      payrate: number;
      /**
       * @description A full description of the doctor.
       * @example Experienced doctor with a focus on patient care.
       */
      about: string;
      /**
       * @description A list of ids specialties that the doctor covers.
       * @example [
       *   "c3f9e732-f74d-441a-b74b-5f46cf4b02eb"
       * ]
       */
      specializationIds: string[];
      /**
       * @description List of hospitals where the doctor works.
       * @example [
       *   "8a9b2287-fd94-4970-bb54-58341171129b"
       * ]
       */
      hospitalIds: string[];
    };
    ResponseHospitalDto: {
      /**
       * @description The hospital's unique id.
       * @example 7975902f-3261-418d-b43f-5daf0b4263a7
       */
      id: string;
      /**
       * @description The full name of the hospital is.
       * @example Ichilov and Assuta
       */
      name: string;
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode: number;
    };
    ResponseSpecializationDto: {
      /**
       * @description Unique specialisation id.
       * @example 9daef903-dc38-45d0-9277-5f1200e662d2
       */
      id: string;
      /**
       * @description Specialization name.
       * @example Surgeon
       */
      name: string;
    };
    ResponseDoctorDto: {
      /**
       * @description The ID of the doctor
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333
       */
      id: string;
      /**
       * @description The ID of the user associated with the doctor
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333
       */
      userId: string;
      /**
       * @description The pay rate of the doctor
       * @example 100
       */
      payrate: number;
      /**
       * @description About section of the doctor
       * @example Experienced doctor with a focus on patient care
       */
      about: string;
      /**
       * @description The rating of the doctor
       * @example 4.7
       */
      rating: number;
      /**
       * @description The count of reviews of the doctor
       * @example 100
       */
      reviewsCount: number;
      /**
       * @description First name of the doctor
       * @example John
       */
      firstName: string;
      /**
       * @description Last name of the doctor
       * @example Doe
       */
      lastName: string;
      /**
       * @description Key of the avatar of the doctor
       * @example acde070d-8c4c-4f0d-9d8a-162843c10333.jpg
       */
      avatarKey: string;
      /**
       * @description The phone of the doctor
       * @example +38099561735634
       */
      phone: string;
      /**
       * @description Email of the doctor
       * @example johndoe@mail.com
       */
      email: string;
      /** @description An array of hospitals associated with the doctor */
      hospitals: components['schemas']['ResponseHospitalDto'][];
      /** @description An array of specializations of the doctor */
      specializations: components['schemas']['ResponseSpecializationDto'][];
    };
    ResponseDoctorListDto: {
      /**
       * @description Count of records matching filters
       * @example 100
       */
      count: number;
      /** @description The list of doctors */
      doctors: components['schemas']['ResponseDoctorDto'][];
    };
    PatchDoctorDto: {
      /**
       * @description The pay rate of the doctor
       * @example 100
       */
      payrate?: number;
      /**
       * @description About section of the doctor
       * @example Experienced doctor with a focus on patient care
       */
      about?: string;
    };
    CreateHospitalDto: {
      /**
       * @description The full name of the hospital is.
       * @example Ichilov and Assuta
       */
      name: string;
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode: number;
    };
    PatchHospitalDto: {
      /**
       * @description The full name of the hospital is.
       * @example Ichilov and Assuta
       */
      name?: string;
      /**
       * @description The country where the hospital is located.
       * @example USA
       */
      country?: string;
      /**
       * @description The address of the state where the hospital is located.
       * @example Oregon
       */
      state?: string;
      /**
       * @description The name of the city where this hospital is located.
       * @example Salem
       */
      city?: string;
      /**
       * @description The name of the street where this hospital is located.
       * @example St. Big Bells
       */
      street?: string;
      /**
       * @description The hospital's zip code.
       * @example 128
       */
      zipCode?: number;
    };
    CreateSpecializationDto: {
      /**
       * @description Specialization name.
       * @example Surgeon
       */
      name: string;
    };
    UpdateSpecializationDto: {
      /**
       * @description Specialization name.
       * @example Surgeon
       */
      name?: string;
    };
    CreateReviewDto: {
      /**
       * @description Text of the review.
       * @example Good doctor, recommended.
       */
      text?: string;
      /**
       * @description Rate of the review.
       * @example 5
       */
      rate?: number;
    };
    ResponseReviewDto: {
      /**
       * @description Unique rating id.
       * @example 437b6443-3f44-44b1-85d4-062b6f8607eb
       */
      id: string;
      /**
       * @description The rate in review.
       * @example 4
       */
      rate: number;
      /**
       * @description Text in review.
       * @example Experienced doctor with a focus on patient care.
       */
      text: string;
      /**
       * @description Unique doctor id.
       * @example 135b0ca6-5a82-41fa-9917-6c256a5750a5
       */
      doctorId: string;
      /**
       * Format: date-time
       * @description The date when the review was created.
       * @example 2024-04-30T09:00:18.007Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The date when the review was updated.
       * @example 2024-04-30T09:00:18.008Z
       */
      updatedAt: string;
    };
    ResponseReviewDtoWithNames: {
      /**
       * @description Unique rating id.
       * @example 437b6443-3f44-44b1-85d4-062b6f8607eb
       */
      id: string;
      /**
       * @description The rate in review.
       * @example 4
       */
      rate: number;
      /**
       * @description Text in review.
       * @example Experienced doctor with a focus on patient care.
       */
      text: string;
      /**
       * @description Unique doctor id.
       * @example 135b0ca6-5a82-41fa-9917-6c256a5750a5
       */
      doctorId: string;
      /**
       * @description The names of the doctor, when icnludesName prodived.
       * @example {
       *   "user": {
       *     "firstName": "John",
       *     "lastName": "Doe"
       *   }
       * }
       */
      doctor?: Record<string, never>;
      /**
       * @description The names of the patient, when icnludesName provided.
       * @example {
       *   "user": {
       *     "firstName": "John",
       *     "lastName": "Doe"
       *   }
       * }
       */
      patient?: Record<string, never>;
    };
    AvgRateResponse: {
      /**
       * @description Average rating.
       * @example 4.5
       */
      avg: number;
      /**
       * @description Total number of reviews.
       * @example 10
       */
      count: number;
    };
    PatchReviewDto: {
      /**
       * @description Text of the review.
       * @example Good doctor, recommended.
       */
      text?: string;
      /**
       * @description Rate of the review.
       * @example 5
       */
      rate?: number;
    };
    ResponseFileDto: {
      /**
       * @description File Name.
       * @example aee01772-ef9c-4917-9b85-733536bd538d.png
       */
      name: string;
      /**
       * @description Full link in the S3 storage to get the file.
       * @example https://storage.googleapis.com/bucket/aee01772-ef9c-4917-9b85-733536bd538d.png
       */
      url: string;
    };
    CreateAppointmentDto: {
      /**
       * @description Unique doctor id.
       * @example aa0c24c6-1b3b-4d27-9ef4-20f6f4aba5f6
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example 766126ae-94b0-444c-bb91-6344141135f9
       */
      patientId: string;
      /**
       * @description The date on which the meeting is scheduled.
       * @example 2024-04-30T09:00:18.012Z
       */
      assignedAt: string;
      /**
       * @description Current status of the appointment.
       * @example PLANNED
       * @enum {string}
       */
      status: 'PENDING_PAYMENT' | 'PLANNED' | 'COMPLETED' | 'CANCELED';
      /**
       * @description Additional comments left by the patient or doctor.
       * @example Get some blood pressure pills.
       */
      notes?: string;
      /**
       * @description The unique Id of the billed payment.
       * @example cbd96ab4-6c48-42e5-a4f6-b3182f319bfb
       */
      paymentInvoiceKey?: string;
      /**
       * @description The unique id of the payment receipt.
       * @example 75725516-7255-4d3e-981b-47f2e648200e
       */
      paymentReceiptKey?: string;
      /** @description The date and time the appointment started */
      startedAt?: string;
      /** @description The date and time the appointment ended */
      endedAt?: string;
    };
    ResponseAppointmentDto: {
      /**
       * @description Unique appointment id.
       * @example edfe3c2e-1e19-4628-b075-fa64c6deff2a
       */
      id: string;
      /**
       * @description Unique doctor id.
       * @example 2d2e4f7a-cd38-419e-b376-bb655d125a2a
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example 03f7fe82-b49b-4ecb-96cc-c0925f47abd4
       */
      patientId: string;
      /**
       * Format: date-time
       * @description The date on which the meeting is scheduled.
       * @example 2024-04-30T09:00:18.011Z
       */
      assignedAt: string;
      /**
       * @description Current status of the appointment.
       * @enum {string}
       */
      status: 'PENDING_PAYMENT' | 'PLANNED' | 'COMPLETED' | 'CANCELED';
      /**
       * @description Additional comments left by the patient or doctor.
       * @example Get some blood pressure pills.
       */
      notes: string;
      /**
       * @description The unique id of the billed payment.
       * @example 7e3e0aa7-c7e3-4d24-acdb-602649ac1040
       */
      paymentInvoiceKey: string;
      /** @description The unique id from the receipt file for the appointment. */
      paymentReceiptKey: string;
      /**
       * @description The unique id of the video chat recording.
       * @example 007e4000-055d-477a-8c0d-de6a271fa98b.mp4
       */
      videoRecordKey: string;
      /**
       * @description The time when the appointment should start.
       * @example 2024-04-30T09:00:18.011Z
       */
      startedAt: string;
      /**
       * @description The time when the appointment should end.
       * @example 2024-04-30T09:00:18.011Z
       */
      endedAt: string;
    };
    PatchAppointmentDto: {
      /**
       * @description Unique doctor id.
       * @example aa0c24c6-1b3b-4d27-9ef4-20f6f4aba5f6
       */
      doctorId?: string;
      /**
       * @description Unique patient id.
       * @example 766126ae-94b0-444c-bb91-6344141135f9
       */
      patientId?: string;
      /**
       * @description The date on which the meeting is scheduled.
       * @example 2024-04-30T09:00:18.012Z
       */
      assignedAt?: string;
      /**
       * @description Current status of the appointment.
       * @example PLANNED
       * @enum {string}
       */
      status?: 'PENDING_PAYMENT' | 'PLANNED' | 'COMPLETED' | 'CANCELED';
      /**
       * @description Additional comments left by the patient or doctor.
       * @example Get some blood pressure pills.
       */
      notes?: string;
      /**
       * @description The unique Id of the billed payment.
       * @example cbd96ab4-6c48-42e5-a4f6-b3182f319bfb
       */
      paymentInvoiceKey?: string;
      /**
       * @description The unique id of the payment receipt.
       * @example 75725516-7255-4d3e-981b-47f2e648200e
       */
      paymentReceiptKey?: string;
      /** @description The date and time the appointment started */
      startedAt?: string;
      /** @description The date and time the appointment ended */
      endedAt?: string;
    };
    CreateDeclarationDto: {
      /**
       * @description Unique doctor id.
       * @example 13463138-81d5-447a-9efc-209acb93463b
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example 7b7cd17c-3c95-453d-a5fb-1f5800887514
       */
      patientId: string;
    };
    ResponseDeclarationDto: {
      /**
       * @description Unique doctor id.
       * @example 13463138-81d5-447a-9efc-209acb93463b
       */
      doctorId: string;
      /**
       * @description Unique patient id.
       * @example 7b7cd17c-3c95-453d-a5fb-1f5800887514
       */
      patientId: string;
      /**
       * @description Unique declration id.
       * @example 1
       */
      id: number;
    };
    CreateConditionDto: {
      /**
       * @description Condition name
       * @example Asthma
       */
      name: string;
    };
    ResponseCondtionDto: {
      /**
       * @description Condition id
       * @example 1
       */
      id: string;
      /**
       * @description Condition name
       * @example Asthma
       */
      name: string;
    };
    UpdateConditionDto: {
      /**
       * @description Condition name
       * @example Asthma
       */
      name?: string;
    };
    CreateAllergyDto: {
      /**
       * @description Name of allergy.
       * @example Dust
       */
      name: string;
    };
    UpdateAllergyDto: {
      /**
       * @description Name of allergy.
       * @example Dust
       */
      name?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** Login patient */
  AuthController_localLogin: {
    requestBody: {
      content: {
        'application/json': components['schemas']['LocalLoginDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['LocalLoginResponseDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Login patient with MFA */
  AuthController_verifyMFA: {
    requestBody: {
      content: {
        'application/json': components['schemas']['LocalLoginTwoFactorDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Sign up user */
  AuthController_signUpUserFirstStep: {
    requestBody: {
      content: {
        'application/json': components['schemas']['SignUpUserDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseUserDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Sign up patient */
  AuthController_signUpPatientSecondStep: {
    parameters: {
      path: {
        token: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SignUpPatientDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Login with Google */
  AuthController_googleLogin: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Login with Google redirect */
  AuthController_googleLoginRedirect: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Logout */
  AuthController_logout: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Change password */
  AuthController_changePassword: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ChangePasswordDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedResponse'];
        };
      };
      500: {
        content: {
          'application/json': components['schemas']['BadRequestException'];
        };
      };
    };
  };
  /** Get patient */
  AuthController_getPatient: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponsePatientDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get curent login user */
  UserController_getMeInfo: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
    };
    responses: {
      /** @description Response if an error occurs while processing a request. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseUserDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get user */
  UserController_getUser: {
    parameters: {
      path: {
        /**
         * @description Unique user id.
         * @example 16ae3b4e-8649-41a3-8e3b-5c830bd0b7d5
         */
        id: string;
      };
    };
    responses: {
      /** @description Response if an error occurs while processing a request. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseUserDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete user */
  UserController_deleteUser: {
    parameters: {
      path: {
        /**
         * @description Unique user id.
         * @example 4ee2f4c4-7b8e-411f-8b94-4a0d9b0ba4e7
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update user */
  UserController_patchUser: {
    parameters: {
      path: {
        /**
         * @description Unique user id.
         * @example 0975ed5d-b72f-4a8a-9625-9c4f9b2f255d
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchUserWithoutCredentialsDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseUserDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create user */
  UserController_createUser: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateUserDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseUserDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get patient */
  PatientController_getPatient: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example 291391f4-4188-424f-bee3-68521355cd62
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponsePatientDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete patient */
  PatientController_deletePatient: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example 56515190-f2ec-4f1e-96d9-ed915929b4dc
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update patient */
  PatientController_patchPatient: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example 98ef88c5-cb60-42db-9603-8a9ece8d320c
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchPatientDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponsePatientDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create patient */
  PatientController_createPatient: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePatientDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponsePatientDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get patient allergies */
  PatientController_getPatientAllergies: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example 894c0372-10d5-43a3-bc03-6b1b5f9ca51c
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAllergyDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create patient allergy */
  PatientController_createPatientAllergy: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example 88f214d4-edb4-45d1-bcc8-03bfb5c8a2ef
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePatientAllergyDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponsePatientAllergyDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get patient conditions */
  PatientController_getPatientConditions: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example d3571830-c7ba-41a9-9ec3-979602d242b3
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseConditionDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create patient conditions */
  PatientController_createPatientConditions: {
    parameters: {
      path: {
        /**
         * @description The patient's unique id.
         * @example 1cf085d4-453e-4520-9636-882b7832a3b1
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePatientConditionDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponsePatientConditionsDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get favorites */
  FavoriteController_getFavorites: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseFavoriteDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create favorite */
  FavoriteController_createFavorite: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateFavoriteDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseFavoriteDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get favorite */
  FavoriteController_getFovorite: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example d7e13134-a2af-456b-8a90-a7c3d479b491
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseFavoriteDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete favorite */
  FavoriteController_deleteFavorite: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example b92c2a9d-309a-4067-939a-d9a33e351bbb
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all doctors */
  DoctorController_getDoctors: {
    parameters: {
      query?: {
        /** @description Status to filter doctors by */
        status?: unknown;
        /** @description Search string */
        search?: string;
        /** @description Page number */
        page?: number;
        /** @description Items per page count */
        itemsPerPage?: number;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDoctorListDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create doctor */
  DoctorController_createDoctor: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateDoctorDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDoctorDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all doctors by patient */
  DoctorController_getPatientDoctors: {
    parameters: {
      path: {
        /**
         * @description Unique patient id.
         * @example f400430a-fbfb-4aad-b8ec-0e9e0bd8b7e5
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDoctorDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get my doctors */
  DoctorController_getMyDoctors: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDoctorDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get doctor */
  DoctorController_getDoctor: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 545a567a-f1a1-4eba-bcef-5e0d87ee82f5
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDoctorDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete doctor */
  DoctorController_deleteDoctor: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 7bdaa1fb-dfc0-4381-b183-3018c4d8cfb0
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update doctor */
  DoctorController_patchDoctor: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example a904f6f6-10e8-4c48-b1f7-d171f84c503a
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchDoctorDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDoctorDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all hospitals */
  HospitalController_getHospitals: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseHospitalDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create hospital */
  HospitalController_createHospital: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateHospitalDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseHospitalDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get hospital */
  HospitalController_getHospital: {
    parameters: {
      path: {
        /**
         * @description The hospital's unique id.
         * @example 3584174d-31a2-4379-89bb-f1da2556a252
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseHospitalDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete hospital */
  HospitalController_deleteHospital: {
    parameters: {
      path: {
        /**
         * @description The hospital's unique id.
         * @example a73e8974-4064-4aa9-9471-3a89c7365f30
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update hospital */
  HospitalController_patchHospital: {
    parameters: {
      path: {
        /**
         * @description The hospital's unique id.
         * @example 8537d29d-5dc0-41da-8030-da9cd62ca9c1
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchHospitalDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseHospitalDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all specializations */
  SpecializationController_getSpecializations: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseSpecializationDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
    };
  };
  /** Create specialization */
  SpecializationController_createSpecialization: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSpecializationDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseSpecializationDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
    };
  };
  /** Get specialization */
  SpecializationController_getSpecialization: {
    parameters: {
      path: {
        /**
         * @description Unique specialisation id.
         * @example 606d9c6e-6f42-4949-91c7-83043bb31e63
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseSpecializationDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
    };
  };
  /** Delete specialization */
  SpecializationController_deleteSpecialization: {
    parameters: {
      path: {
        /**
         * @description Unique specialisation id.
         * @example 7f5fbcf6-33d5-496c-bfb5-51fa06185296
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
    };
  };
  /** Update specialization */
  SpecializationController_patchSpecialization: {
    parameters: {
      path: {
        /**
         * @description Unique specialisation id.
         * @example 4077c9f9-0cfe-4905-9d96-f2f01a3ef3b7
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSpecializationDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseSpecializationDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
    };
  };
  /** Get reviews by doctor */
  ReviewController_getReviewsByDoctorId: {
    parameters: {
      path: {
        doctorId: string;
        /**
         * @description Include names in reviews.
         * @example false
         */
        includeNames: string;
        /**
         * @description How many reviews should be skipped.
         * @example 1
         */
        skip: string;
        /**
         * @description How many reviews should be taken.
         * @example 50
         */
        take: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseReviewDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create a new review */
  ReviewController_createReview: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
      path: {
        doctorId: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateReviewDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseReviewDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get reviews */
  ReviewController_getReviews: {
    parameters: {
      path: {
        /**
         * @description Include names in reviews.
         * @example false
         */
        includeNames: string;
        /**
         * @description How many reviews should be skipped.
         * @example 1
         */
        skip: string;
        /**
         * @description How many reviews should be taken.
         * @example 50
         */
        take: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseReviewDtoWithNames'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get the average rating of a doctor */
  ReviewController_getAvgRateByDoctorId: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 84d2553e-62f0-460a-abfc-8f83db4b1230
         */
        doctorId: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['AvgRateResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get review */
  ReviewController_getReview: {
    parameters: {
      path: {
        /**
         * @description Unique review id.
         * @example 8f396805-f849-45c5-8790-96acdefdc5d5
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseReviewDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete a review */
  ReviewController_deleteReview: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
      path: {
        reviewId: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update a review */
  ReviewController_patchReview: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
      path: {
        reviewId: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchReviewDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseReviewDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Upload file */
  FileController_uploadFile: {
    /** @description The file to be uploaded. */
    requestBody: {
      content: {
        'multipart/form-data': string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseFileDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get file */
  FileController_getFileByName: {
    parameters: {
      path: {
        /**
         * @description Unique file name.
         * @example f0ae3f33-33d9-48ef-b504-e218e3b8a0c5.png
         */
        name: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseFileDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete file */
  FileController_deleteFileByName: {
    parameters: {
      path: {
        /**
         * @description Unique file name.
         * @example 8417c53d-48c0-4fc0-9599-6116bfa14f87.png
         */
        name: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all appointments */
  AppointmentController_getAppointments: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAppointmentDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create an appointment */
  AppointmentController_createAppointment: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAppointmentDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAppointmentDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get my appointment */
  AppointmentController_getMyAppointments: {
    parameters: {
      header?: {
        /** @description JWT token */
        Cookie?: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAppointmentDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      401: {
        content: {
          'application/json': components['schemas']['UnauthorizedResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all appointments by patient id */
  AppointmentController_getAppointmentsByPatientId: {
    parameters: {
      path: {
        /**
         * @description Unique patient id.
         * @example 9dbaddd4-d91d-4d60-a2dc-657db6d53b1a
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAppointmentDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all appointments by doctor id */
  AppointmentController_getAppointmentsByDoctorId: {
    parameters: {
      path: {
        /**
         * @description Unique doctor id.
         * @example 3331fd6e-0403-4470-8fef-db9227386a3b
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAppointmentDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get an appointment */
  AppointmentController_getAppointment: {
    parameters: {
      path: {
        /**
         * @description Unique appointment id.
         * @example 7b9624eb-0e90-4384-b893-a9d594072f97
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAppointmentDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete an appointment */
  AppointmentController_deleteAppointment: {
    parameters: {
      path: {
        /**
         * @description Unique appointment id.
         * @example 0af58432-f383-4ec2-9b9f-d82150800455
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update an appointment */
  AppointmentController_patchAppointment: {
    parameters: {
      path: {
        /**
         * @description Unique appointment id.
         * @example 7655a212-2914-498c-8db1-ba984b2372d9
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PatchAppointmentDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAppointmentDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get declarations */
  DeclarationController_getDeclrations: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDeclarationDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create declaration */
  DeclarationController_createDeclaration: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateDeclarationDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDeclarationDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get declaration */
  DeclarationController_getDeclaration: {
    parameters: {
      path: {
        /**
         * @description Unique declaration id.
         * @example 1
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDeclarationDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete declaration */
  DeclarationController_deleteDeclaration: {
    parameters: {
      path: {
        /**
         * @description Unique declaration id.
         * @example 1
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update declaration */
  DeclarationController_patchDeclaration: {
    parameters: {
      path: {
        /**
         * @description Unique declaration id.
         * @example 1
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateDeclarationDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseDeclarationDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /**
   * Get all conditions
   * @description This endpoint retrieves all conditions.
   */
  ConditionController_findAll: {
    responses: {
      /** @description Return conditions list */
      200: {
        content: {
          'application/json': components['schemas']['ResponseCondtionDto'][];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /**
   * Create a new condition
   * @description This endpoint creates a new condition.
   */
  ConditionController_create: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateConditionDto'];
      };
    };
    responses: {
      /** @description Condition created */
      200: {
        content: {
          'application/json': components['schemas']['ResponseCondtionDto'];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /**
   * Get a condition by ID
   * @description This endpoint retrieves a condition object by ID.
   */
  ConditionController_findOne: {
    parameters: {
      path: {
        /**
         * @description Condition ID
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    responses: {
      /** @description Return condition by id */
      200: {
        content: {
          'application/json': components['schemas']['ResponseCondtionDto'];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /**
   * Delete a condition by ID
   * @description This endpoint deletes a condition object by ID.
   */
  ConditionController_remove: {
    parameters: {
      path: {
        /**
         * @description Condition id
         * @example 1
         */
        id: string;
      };
    };
    responses: {
      /** @description Condition deleted */
      200: {
        content: {
          'application/json': components['schemas']['ResponseCondtionDto'];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Condition not found */
      404: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /**
   * Update a condition by ID
   * @description This endpoint updates a condition object by ID.
   */
  ConditionController_update: {
    parameters: {
      path: {
        /**
         * @description Condition id
         * @example acde070d-8c4c-4f0d-9d8a-162843c10333
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateConditionDto'];
      };
    };
    responses: {
      /** @description Condition updated */
      200: {
        content: {
          'application/json': components['schemas']['ResponseCondtionDto'];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get all allergies */
  AllergyController_getAllergies: {
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAllergyDto'][];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Create allergy */
  AllergyController_createAllergy: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAllergyDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAllergyDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Get allergy */
  AllergyController_getAllergy: {
    parameters: {
      path: {
        /**
         * @description Unique allergy id.
         * @example cbb89e90-d4b6-40a3-ba7b-a5b073411343
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAllergyDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Delete allergy */
  AllergyController_deleteAllergy: {
    parameters: {
      path: {
        /**
         * @description Unique allergy id.
         * @example 64212b98-60e2-4a26-a28b-784243603d2c
         */
        id: string;
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: never;
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      404: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
  /** Update allergy */
  AllergyController_patchAllergy: {
    parameters: {
      path: {
        /**
         * @description Unique allergy id.
         * @example 89fed423-3a5b-450b-a598-677abb8e9525
         */
        id: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAllergyDto'];
      };
    };
    responses: {
      /** @description Response when the request is successfully processed. */
      200: {
        content: {
          'application/json': components['schemas']['ResponseAllergyDto'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      400: {
        content: {
          'application/json': components['schemas']['BadRequestResponse'];
        };
      };
      /** @description Response if an error occurs while processing a request. */
      500: {
        content: {
          'application/json': components['schemas']['ClassicNestResponse'];
        };
      };
    };
  };
}
