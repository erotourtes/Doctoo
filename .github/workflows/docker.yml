name: CI & CD

on:
  push:
    branches:
      - 'development'
      - 'main'

jobs:
  ci-job:
    strategy:
      matrix:
        service: [backend, frontend, summarizer, mailer]

    runs-on: self-hosted-deploy
    name: CI Job
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitHub CLI
        uses: dev-hanz-ops/install-gh-cli-action@v0.1.0
        with:
          gh-cli-version: 2.44.1

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ${{ secrets.DOCKER_REGISTRY }}

      - name: Build & Push
        uses: docker/build-push-action@v4
        with:
          file: ./apps/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/doctoo-${{ matrix.service }}:latest
          build-args: |
            VITE_BACKEND_API_URL=${{ secrets.VITE_BACKEND_API_URL }}
            VITE_STRIPE_API_KEY=${{ secrets.VITE_STRIPE_API_KEY }}
            VITE_S3_BASE_URL=${{ secrets.VITE_S3_BASE_URL }}
            VITE_FHIR_ISS_URL=${{ secrets.VITE_FHIR_ISS_URL }}
            VITE_FHIR_CLIENT_ID=${{ secrets.VITE_FHIR_CLIENT_ID }}

  cd-job:
    runs-on: self-hosted-deploy
    name: CD Job
    needs: ci-job
    steps:
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ${{ secrets.DOCKER_REGISTRY }}

      - name: Goto project directory
        shell: bash
        run: mkdir -p ${{ secrets.PROJECT_DIR }} && cd ${{ secrets.PROJECT_DIR }}

      - name: Download new docker-compose.yaml
        shell: bash
        run: |
          cd ${{ secrets.PROJECT_DIR }}

          HEAD_REF="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          FILE_URL="https://raw.githubusercontent.com/$GITHUB_REPOSITORY/$HEAD_REF/docker-compose.prod.yaml"

          curl -H "Authorization: token ${{ secrets.PIPELINE_TOKEN }}" -o docker-compose.yaml $FILE_URL

          sed -i 's/\$ADMINER_PASSWORD/${{ secrets.ADMINER_PASSWORD }}/g' docker-compose.yaml
          sed -i 's/$BACKEND_PORT/${{ secrets.BACKEND_PORT }}/g' docker-compose.yaml

      - name: Create new .env
        shell: bash
        run: |
          cd ${{ secrets.PROJECT_DIR }}

          cat << EOF > .env
          # DATABASE
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}

          # RABBITMQ
          RMQ_HOST=${{ secrets.RMQ_HOST}}
          RMQ_PORT=${{ secrets.RMQ_PORT }}
          RMQ_USERNAME=${{ secrets.RMQ_USERNAME }}
          RMQ_PASSWORD=${{ secrets.RMQ_PASSWORD }}

          # DATABASE BACKUP
          BACKUP_BUCKET_NAME=${{ secrets.BACKUP_BUCKET_NAME }}
          BACKUP_BUCKET_REGION=${{ secrets.BACKUP_BUCKET_REGION }}
          BACKUP_SCHEDULE=${{ secrets.BACKUP_SCHEDULE }}
          BACKUP_ENDPOINT=https://${{ secrets.MINIO_ENDPOINT }}
          ENCRYPTION_PASSWORD=${{ secrets.ENCRYPTION_PASSWORD }}

          # BACKEND
          BACKEND_PORT=${{ secrets.BACKEND_PORT }}
          DATABASE_URL=postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@postgres/${{ secrets.POSTGRES_DB }}?schema=public
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION_DAYS=${{ secrets.JWT_EXPIRATION_DAYS }}
          JWT_EXPIRATION_TRESHOLD_SECONDS=${{ secrets.JWT_EXPIRATION_TRESHOLD_SECONDS }}
          SALT_ROUNDS=${{ secrets.SALT_ROUNDS }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URL=${{ secrets.GOOGLE_REDIRECT_URL }}
          MINIO_ENDPOINT=${{ secrets.MINIO_ENDPOINT }}
          MINIO_ACCESS_KEY=${{ secrets.MINIO_ACCESS_KEY }}
          MINIO_SECRET_KEY=${{ secrets.MINIO_SECRET_KEY }}
          MINIO_USE_SSL=${{ secrets.MINIO_USE_SSL }}
          MINIO_BUCKET_NAME=${{ secrets.MINIO_BUCKET_NAME }}
          STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}
          TZ=${{ secrets.TZ }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          CACHE_DAYS_TO_LIVE=${{ secrets.CACHE_DAYS_TO_LIVE }}
          RMQ_HOST=${{ secrets.RMQ_HOST}}
          RMQ_PORT=${{ secrets.RMQ_PORT }}
          RMQ_USERNAME=${{ secrets.RMQ_USERNAME }}
          RMQ_PASSWORD=${{ secrets.RMQ_PASSWORD }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_ASSISTANT_ID=${{ secrets.OPENAI_API_ASSISTANT_ID }}

          # SUMMARIZER SERVICE
          HF_TOKEN=${{ secrets.HF_TOKEN}}
          HF_MODEL_NAME=${{ secrets.HF_MODEL_NAME }}

          # MAILER SERVICE
          MAIL_HOST=${{ secrets.MAIL_HOST }}
          MAIL_USER=${{ secrets.MAIL_USER }}
          MAIL_PASS=${{ secrets.MAIL_PASS }}
          MAIL_FROM=${{ secrets.MAIL_FROM }}
          MAIL_PORT=${{ secrets.MAIL_PORT }}
          MAIL_SECURE=${{ secrets.MAIL_SECURE }}
          NODE_ENV=${{ secrets.NODE_ENV }}
          BACKEND_URL=${{ secrets.BACKEND_URL }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          APP_NAME=${{ secrets.APP_NAME }}
          FRONTEND_SIGNUP_PATH=${{ secrets.FRONTEND_SIGNUP_PATH }}
          FRONTEND_CHANGE_EMAIL_PATH=${{ secrets.FRONTEND_CHANGE_EMAIL_PATH }}
          EOF

      - name: Run new Docker containers
        shell: bash
        run: |
          cd ${{ secrets.PROJECT_DIR }}

          docker compose pull
          docker compose up -d --remove-orphans
